[
  {
    "id": "https://docs.safe.global/core-api/api-overview#chunk-0",
    "url": "https://docs.safe.global/core-api/api-overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Overview Safe{Core} Infrastructure The Safe{Core} Infrastructure consists of the following services: Safe Transaction Service The Safe Transaction Service tracks transactions related to Safe contracts using tracing on Mainnet, Sepolia, and Gnosis Chain. It uses event indexing for the other chains. For each supported network there is one instance of the Transaction Service. Safe Events Service The Events Service handles Safe indexing events and delivers them as HTTP webhooks, connection to the events queue processed by the Transaction Service. The service's database stores the configuration of webhook destinations. Architecture Safe{Wallet} uses these services to offer functionality to end customers via the web and mobile applications. The Safe Client Gateway (opens in a new tab) acts as a facade between the end customer and the Safe{Core} services and the Safe Config Service (opens in a new tab) stores all supported networks and chain-specific variables. Safe's production setup consists of several instances of the Transaction Service orchestrated by the Config Service, which are later consumed by the Safe Client Gateway. The Events Service notifies the Safe Client Gateway when new events are indexed, helping to improve the user experience. Integration Flow for Safe{Wallet} and Safe{Core} The Client Gateway leverages the Config Service to find the Transaction Service instance required for a specific request. The Client Gateway forwards the request to the specified Transaction Service instance for the supported networks (determined by the Config Service). The Client Gateway transforms, aggregates, and caches information from the Config and Transaction Services, optimizing data for Safe's web and mobile clients. The Event Service provides information to the Client Gateway when the Transaction Service indexes an event using webhooks. The Client Gateway is then responsible for providing this information to the end clients. Even though the Config Service and Transaction Service instances are reachable by clients that aren't the Client Gateway, this may change in the future. The Client Gateway is the outermost component of the Safe infrastructure and should be the single point of communication with any front-end client. Rate limits All Safe{Core} Infrastructure services have a rate limit of 5 requests per second. Running locally Safe Infrastructure (opens in a new tab) repository and the running services locally (opens in a new tab) guide show how to run Safe's infrastructure ( Safe{Wallet} (opens in a new tab) and Safe{Core}). Note that these documents are examples of how these services run, and the configuration should adapt to the needs of a specific use case. ← Go Home Running the Safe Transaction Service Was this page helpful? Report issue",
    "title": "Safe{Core} Infrastructure – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe{Core} Infrastructure",
      "Safe Transaction Service",
      "Safe Events Service",
      "Architecture",
      "Integration Flow for Safe{Wallet} and Safe{Core}",
      "Rate limits",
      "Running locally"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/api-safe-transaction-service#chunk-0",
    "url": "https://docs.safe.global/core-api/api-safe-transaction-service",
    "chunk_index": 0,
    "total_chunks": 3,
    "text": "API Running the Safe Transaction Service Running the Safe Transaction Service The Safe Transaction Service tracks transactions sent via Safe contracts. It indexes these transactions using events (L2 chains) and tracing (L1 chains) mechanisms. Key Features Blockchain indexing : Executed transactions, configuration changes, ERC-20/721 transfers, and on-chain confirmations are automatically indexed from the blockchain. Off-chain transaction signatures : Transactions can be sent to the service, enabling off-chain signature collection. This feature helps inform owners about pending transactions awaiting confirmation for execution. Off-chain messages : The service can collect off-chain signatures to confirm messages following EIP-1271 (opens in a new tab) . Transaction decoding : The service keeps getting source and ABIs from contracts that interact with Safe to decode these interactions. Technology stack overview The Safe Transaction Service is a Django (opens in a new tab) app written in Python with the following architecture: Gunicorn (opens in a new tab) : A Python WSGI HTTP Server. Celery (opens in a new tab) : A task queue with focus on real-time processing, while also supporting task scheduling. The Safe Transaction Service has a scheduler (for periodic tasks), a worker indexer to consume and execute indexing tasks, and a contracts worker mainly to get metadata from contracts. RabbitMQ (opens in a new tab) : A distributed message broker system Celery uses to share messages between the scheduler, workers, and the Django application. PostgreSQL (opens in a new tab) : An open source object-relational database system. Redis (opens in a new tab) : An open source, in-memory data structure store used for caching by the Safe Transaction Service. safe-eth-py (opens in a new tab) : A library to interact with Safe and blockchains. Blockchain indexing The Safe Transaction Service can index automatically executed transactions, configuration changes, ERC-20/721 transfers, and on-chain confirmations. The indexer is running on worker-indexer by different periodic tasks (opens in a new tab) . ERC-20 and ERC-721 are indexed using eth_getLogs (opens in a new tab) filtered by the Transfer topic keccak('Transfer(address,address,uint256)') . Safe creation, executed transactions, configuration changes, and on-chain confirmations are indexed differently depending on whether the chain is L1 or L2. For L1 chains, the indexer calls tracing methods. For the oldest blocks, trace_filter (opens in a new tab) is used filtering by singleton address of Safe contracts, and for the latest blocks trace_block (opens in a new tab) is used, as trace_filter takes longer to return updated information. trace_block will be used if the block depth is lower than ETH_INTERNAL_TXS_NUMBER_TRACE_BLOCKS . The environment variables indexing uses are defined here (opens in a new tab) . For L2 chains, the indexing is by events with the eth_getLogs (opens in a new tab) method with the corresponding topics. From Safe creation, the Transaction Service stores each contract change on the SafeStatus model as nonce , owners , etc. The latest and current status of a Safe is stored as SafeLastStatus for easy database access and optimization. Endpoints The following endpoints show the current indexing status of the Safe",
    "title": "Running the Safe Transaction Service – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Running the Safe Transaction Service",
      "Key Features",
      "Technology stack overview",
      "Blockchain indexing",
      "Endpoints",
      "Reorgs handling",
      "Off-chain transaction signatures",
      "Endpoints",
      "Off-chain messages",
      "Endpoints",
      "Transaction decoder",
      "Running and Maintenance"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/api-safe-transaction-service#chunk-1",
    "url": "https://docs.safe.global/core-api/api-safe-transaction-service",
    "chunk_index": 1,
    "total_chunks": 3,
    "text": "Transaction Service: GET /v1/about/indexing/ Response example: _ 10 { _ 10 \"currentBlockNumber\": 9773327, // Last block on the blockchain _ 10 \"erc20BlockNumber\": 9773326, // Last block indexed for erc20/721 events _ 10 \"erc20Synced\": true, _ 10 \"masterCopiesBlockNumber\": 9773327, // Last block indexed for executed transactions, ether transfers, configuration changes, etc. _ 10 \"masterCopiesSynced\": true, _ 10 \"synced\": true _ 10 } Reorgs handling Every block is marked as not confirmed during indexing unless it has some depth (configured via the ETH_REORG_BLOCKS environment variable). Unconfirmed blocks are checked periodically to see if the blockchain blockHash for that number changed before it reaches the desired number of confirmations. If that's the case, all blocks from that block and related transactions are deleted, and indexing is restarted to the last confirmed block. Note: No off-chain signatures, transactions, or messages are lost in this process. Only on-chain data is removed. Off-chain transaction signatures The Safe Transaction Service can collect off-chain transaction signatures, allowing the owners to share their signatures to reach the required threshold before executing a transaction and spending less gas than on-chain approvals. Endpoints The following endpoints let us propose a transaction and collect every confirmation (off-chain signatures): POST /v1/safes/{address}/multisig-transactions/ : Creates a new transaction and requires at least one signature. POST /v1/multisig-transactions/{safe_tx_hash}/confirmations/ : Adds a new confirmation and needs the safe_tx_hash . GET /v1/multisig-transactions/{safe_tx_hash}/ : Returns all the multi-signature transaction information. GET /v1/multisig-transactions/{safe_tx_hash}/confirmations/ : Returns the list of all confirmations to a multi-signature transaction. The following sequence diagram shows a use case for a Safe shared by Alice and Bob where at least one confirmation for each one is required: What's the safe_tx_hash ? safe_tx_hash is the unique identifier for a Safe transaction and is calculated using the EIP-712 (opens in a new tab) standard: keccak256(0x19 || 0x1 || domainSeparator || safeTxHashStruct) where safeTxHashStruct is the hashStruct of a Safe transaction. Follow our guides to learn how to create and execute Safe transactions using the Safe Transaction Service. Off-chain messages The Safe Transaction Service can collect the necessary off-chain signatures to confirm a message using EIP-1271 (opens in a new tab) . The message can be a string (EIP-191 is used to get the hash) or an object EIP-712. Endpoints GET /v1/safes/{address}/messages/ : Returns the messages created for the given Safe address. POST /v1/safes/{address}/messages/ : Creates a message with at least one signature. GET /v1/messages/{message_hash}/ : Returns a message for a given message hash. POST /v1/messages/{message_hash}/signatures/ : Adds another signature to the message with the given message hash. The following sequence diagram shows a use case for a Safe shared by Alice and Bob where at least one signature for each one is required to confirm a message fully: Follow our guides to learn how to create and sign messages using the Safe Transaction Service. Transaction decoder The Safe Transaction Service can decode contract interactions. To achieve it, the service periodically gets source and ABIs from different sources like Sourcify, Etherscan, and Blockscout using the safe-eth-py library. The detection of contract",
    "title": "Running the Safe Transaction Service – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Running the Safe Transaction Service",
      "Key Features",
      "Technology stack overview",
      "Blockchain indexing",
      "Endpoints",
      "Reorgs handling",
      "Off-chain transaction signatures",
      "Endpoints",
      "Off-chain messages",
      "Endpoints",
      "Transaction decoder",
      "Running and Maintenance"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/api-safe-transaction-service#chunk-2",
    "url": "https://docs.safe.global/core-api/api-safe-transaction-service",
    "chunk_index": 2,
    "total_chunks": 3,
    "text": "interactions is done in a periodic task executed every hour for multisig-transaction and module-transactions or every six hours for multisend-transactions on worker-contracts-tokens . For every new contract, the service tries to download the source, and the ABI requests it first to Sourcify, then Etherscan, and as a last chance, Blockscout. It's important to know that not all these data sources are supported or configured for every network on safe-eth-py . Supported and configured networks on safe-eth-py : Sourcify supported networks (opens in a new tab) Etherscan configured networks (opens in a new tab) Blockscout configured networks (opens in a new tab) Follow our guides to learn how to decode contract interaction data using the Safe Transaction Service for a transaction. Running and Maintenance In the Safe Transaction Service (opens in a new tab) GitHub repository, under the Setup for production (event indexing) (opens in a new tab) and Setup for production (tracing mode) (opens in a new tab) sections, it is shown how to run the service and retrieve events from any supported network type. Note that the configuration must be adapted to the needs of a specific use case. In addition, the Service maintenance (opens in a new tab) section shows how to deal with some common errors in the service operation. Overview RPC Requirements Was this page helpful? Report issue",
    "title": "Running the Safe Transaction Service – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Running the Safe Transaction Service",
      "Key Features",
      "Technology stack overview",
      "Blockchain indexing",
      "Endpoints",
      "Reorgs handling",
      "Off-chain transaction signatures",
      "Endpoints",
      "Off-chain messages",
      "Endpoints",
      "Transaction decoder",
      "Running and Maintenance"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/api-safe-transaction-service/rpc-requirements#chunk-0",
    "url": "https://docs.safe.global/core-api/api-safe-transaction-service/rpc-requirements",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "API Running the Safe Transaction Service RPC Requirements RPC Requirements What are the RPC requirements? To run the Transaction Service in tracing mode , you will need a tracing-compatible node: Erigon (opens in a new tab) node (recommended). Deprecated OpenEthereum (opens in a new tab) node with tracing enabled ( --tracing flag) if it's still supported on your network. Nethermind (opens in a new tab) ( archive mode so tracing is enabled). Any RPC that supports eth_getLogs if using the Safe L2 Version. From Safe v1.3.0 there's an alternative and recommended way to avoid using tracing, the L2 Safe version ( https://github.com/safe-global/safe-deployments/blob/main/src/assets/v1.3.0/gnosis_safe_l2.json (opens in a new tab) ) that emits events, so no tracing node is required. This is the approach used in networks like Polygon or Binance Smart Chain where fees are cheap and emitting events don't impact the user: A Transaction Service configured with a tracing node can index L2 and non-L2 versions of the Safe contracts. A Transaction Service configured without a tracing node can only index L2 versions of the Safe contracts. Indexing mode shouldn't be changed after initializing the service, as the database could become corrupted, so if a tracing node wasn't set up, it shouldn't be added later. The opposite is also problematic. What RPC methods are used? For indexing, basic RPC methods are required, and the service uses batching to query the RPC: eth_getTransactionByHash eth_getBlockByNumber eth_getTransactionReceipt eth_getLogs (for indexing ERC20/721 transfers) eth_chainId (just called once and cached) ... For the regular version of the Safe (not L2), tracing endpoints are used: ​ trace_filter (opens in a new tab) : For quick sync, but it could be disabled setting the configuration parameter ETH_INTERNAL_NO_FILTER=False . Be careful, it will make the service really slow when syncing from scratch. ​ trace_block (opens in a new tab) ​ ​ trace_transaction (opens in a new tab) ​ No special RPC methods are used for the L2 version of Safe. The most demanding one will be eth_getLogs (opens in a new tab) to get the Safe events. How many queries will the Transaction Service send to the RPC? The number of queries sent may vary depending on the network. The Transaction Service has some environment variables that can be configured to set a limit on the number of blocks that are processed together ( ETH_EVENTS_BLOCK_PROCESS_LIMIT_MAX ), but the default behavior is trying to detect the best configuration for every network similar to how TCP congestion control (opens in a new tab) works. The indexer tries to process a low number of blocks (currently 50), and depending on that: If the request takes less than 1 second , the node can process more. The number of blocks to fetch is duplicated for the next request. If the request takes less than 3 seconds , the number of blocks to process is incremented by a small amount (currently 20). If the request takes more than 20 seconds , the number of blocks to process is decremented by a small amount (currently",
    "title": "RPC Requirements – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [
      {
        "text": "Running the Safe Transaction Service",
        "url": "/core-api/api-safe-transaction-service"
      }
    ],
    "depth": 0,
    "section_titles": [
      "RPC Requirements",
      "What are the RPC requirements?",
      "What RPC methods are used?",
      "How many queries will the Transaction Service send to the RPC?",
      "RPC Provider expectations"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/api-safe-transaction-service/rpc-requirements#chunk-1",
    "url": "https://docs.safe.global/core-api/api-safe-transaction-service/rpc-requirements",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "20). If the request takes more than 30 seconds , the number of blocks to process is halved. If there is an exception when requesting the information (I/O error) number of blocks to process is reset to the minimum number of blocks (currently 1). All this happens in every request to the node used for indexing (safe transactions, erc20/721 events...). Be careful, some nodes, like Binance Smart Chain public nodes, have a hard-coded limit of blocks they can process ( 5000 in the case of BSC). Set ETH_EVENTS_BLOCK_PROCESS_LIMIT_MAX to prevent the algorithm from trying to process more blocks and raise errors all the time RPC Provider expectations For RPC providers, we expect communication on every update and configuration change as it could impact our indexers: Timeout for the requests. Number of batch requests allowed in the same HTTP request. Block range that can be queried in queries like eth_getLogs or trace_filter . Results limit for endpoints (for example, some providers implement a limit to the number of queries like eth_getLogs ). The indexer expects failures and not capped results. Running the Safe Transaction Service FAQ Was this page helpful? Report issue",
    "title": "RPC Requirements – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [
      {
        "text": "Running the Safe Transaction Service",
        "url": "/core-api/api-safe-transaction-service"
      }
    ],
    "depth": 0,
    "section_titles": [
      "RPC Requirements",
      "What are the RPC requirements?",
      "What RPC methods are used?",
      "How many queries will the Transaction Service send to the RPC?",
      "RPC Provider expectations"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/api-safe-transaction-service/faq#chunk-0",
    "url": "https://docs.safe.global/core-api/api-safe-transaction-service/faq",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Running the Safe Transaction Service FAQ FAQ How can I interact with the service? Aside from using standard HTTP requests: Safe{Core} API Kit (opens in a new tab) Safe-eth-py (opens in a new tab) Safe CLI (opens in a new tab) : It has a tx-service mode to gather off-chain signatures. More information is available in the Guides section of this documentation. If I add my chain to safe-eth-py (opens in a new tab) will you support it? No, for a chain to be supported, we need to set up a dedicated infra for that network and have a proper RPC (opens in a new tab) . How do you handle reorgs? When indexing, every block is marked as not confirmed unless it has some depth (configured via ETH_REORG_BLOCKS environment variable). Not confirmed blocks are checked periodically to check if the blockchain blockHash for that number changed before it reaches the desired number of confirmations . If that's the case, all blocks from that block and the related transactions are deleted, and indexing is restarted to the last confirmed block. What does the banned field mean in SafeContract model? The banned field in the SafeContract model is used to prevent indexing certain Safes with an unsupported MasterCopy or unverified proxies that have issues during indexing. This field does not remove the banned Safe, and indexing can be resumed once the problem is solved. Why does the /v1/safes/{address} endpoint show a nonce indicating that a transaction was executed while it is not shown or marked as executed in the other endpoints? /v1/safes/{address} endpoint uses eth_call from the RPC to get the current information for a Safe, so there's no delay, and as soon as a transaction is executed, it will be updated. The other endpoints rely on polling, indexing, decoding, and processing of traces/events, taking longer (shouldn't be more than half a minute). RPC Requirements Overview Was this page helpful? Report issue",
    "title": "FAQ – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [
      {
        "text": "Running the Safe Transaction Service",
        "url": "/core-api/api-safe-transaction-service"
      }
    ],
    "depth": 0,
    "section_titles": [
      "FAQ",
      "How can I interact with the service?",
      "If I add my chain tosafe-eth-py(opens in a new tab)will you support it?",
      "How do you handle reorgs?",
      "What does the banned field mean in SafeContract model?",
      "Why does the /v1/safes/{address} endpoint show a nonce indicating that a transaction was executed while it is not shown or marked as executed in the other endpoints?"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-overview#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Overview Safe Transaction Service API The Safe Transaction Service offers a REST API to track transactions sent via the Safe Smart Account. It also provides endpoints to send transactions, allow off-chain collecting of signatures, or informing the owners about a pending transaction to be sent to the blockchain. Additionally, the Safe{Core} SDK provides the API Kit , a TypeScript client for the Safe Transaction Service API. Guides Reference Getting started Are you new to our API and not sure where to get started? We recommend heading over to the guides on the Safe Transaction Service API. Resources Learn about the Safe Transaction Service tech stack and how to run it . Check the Safe Transaction Service GitHub repository (opens in a new tab) (Python). FAQ How to use API keys Was this page helpful? Report issue",
    "title": "Safe Transaction Service API – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe Transaction Service API",
      "Getting started",
      "Resources"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/how-to-use-api-keys#chunk-0",
    "url": "https://docs.safe.global/core-api/how-to-use-api-keys",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API How to use API keys How to use API Keys To enhance the security and reliability of your integrations, Safe is introducing authenticated API access . Authenticated requests ensure that only authorized applications and developers can interact with our services, protecting your data and the overall ecosystem. ⚠️ Public (unauthenticated) API endpoints will soon be deprecated. To prevent any disruptions, we strongly recommend transitioning your integrations to authenticated API access as soon as possible. This guide explains how to generate an API key, use it for authenticated requests, and handle rate limits, errors, and security best practices. Getting a Safe API Key Visit the Safe API Dashboard (opens in a new tab) . Create an account (if you haven’t already). Generate your API key in the API Keys section. The API Key is a JWT, which is set to expire after 5 years. Using Your API Key To authenticate your requests, include your API key in the Authorization header. Below, there are different request examples. We use EIP3770 names for chains, so for example, for Ethereum Mainnet (eth): cURL JavaScript (Fetch) SafeApiKit _ 10 curl -X GET \"https://api.safe.global/tx-service/eth/api/v2/safes/0x5298a93734c3d979ef1f23f78ebb871879a21f22/multisig-transactions\" \\ _ 10 -H \"Authorization: Bearer $YOUR_API_KEY\" Rate Limits and Usage Tiers The Safe API currently has a default rate limit of 5 requests per second. If you require a higher rate limit, please contact us at support@safe.global to discuss upgrading your tier and to understand usage quotas. Error Handling If your API key is invalid or exceeds its rate limit, the API returns standard HTTP error codes: 401 Unauthorized : Invalid or missing API key. 429 Too Many Requests : Rate limit exceeded. Make sure your application gracefully handles these errors to avoid disruptions. Best Practices Store keys securely : Use environment variables or secure vaults instead of hard-coding API keys in your application. Rotate keys periodically : Periodically rotate your API keys to minimize potential security risks. Revoke compromised keys immediately : If an API key is compromised, revoke it immediately via the dashboard and generate a new one. Need Help? If you have questions or encounter issues, please reach out to our support team at support@safe.global . Overview Supported Networks Was this page helpful? Report issue",
    "title": "How to use API Keys – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "How to use API Keys",
      "Getting a Safe API Key",
      "Using Your API Key",
      "Rate Limits and Usage Tiers",
      "Error Handling",
      "Best Practices",
      "Need Help?"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-guides/transactions#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-guides/transactions",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "API Guides Transactions Transactions with off-chain signatures This guide shows how to interact with the Safe Transaction Service API to create, sign, and execute transactions with the owners of a Safe account. The different steps are implemented using Curl (opens in a new tab) requests, the Safe{Core} SDK (opens in a new tab) TypeScript library and the safe-eth-py (opens in a new tab) Python library. Prerequisites Node.js and npm (opens in a new tab) when using the Safe{Core} SDK. Python (opens in a new tab) >= 3.9 when using safe-eth-py . Have a Safe account configured with a threshold of 2, where two signatures are needed. Steps Install dependencies TypeScript Python _ 10 yarn add @safe-global/api-kit @safe-global/protocol-kit @safe-global/types-kit Imports TypeScript Python _ 10 import SafeApiKit from '@safe-global/api-kit' _ 10 import Safe from '@safe-global/protocol-kit' _ 10 import { _ 10 MetaTransactionData, _ 10 OperationType _ 10 } from '@safe-global/types-kit' Create a Safe transaction TypeScript Python Curl _ 18 // Initialize the Protocol Kit with Owner A _ 18 const protocolKitOwnerA = await Safe.init({ _ 18 provider: config.RPC_URL, _ 18 signer: config.OWNER_A_PRIVATE_KEY, _ 18 safeAddress: config.SAFE_ADDRESS _ 18 }) _ 18 _ 18 // Create a Safe transaction _ 18 const safeTransactionData: MetaTransactionData = { _ 18 to: config.TO, _ 18 value: config.VALUE, _ 18 data: '0x', _ 18 operation: OperationType.Call _ 18 } _ 18 _ 18 const safeTransaction = await protocolKitOwnerA.createTransaction({ _ 18 transactions: [safeTransactionData] _ 18 }) Sign the transaction TypeScript Python Curl _ 10 // Sign the transaction with Owner A _ 10 const safeTxHash = await protocolKitOwnerA.getTransactionHash(safeTransaction) _ 10 const signatureOwnerA = await protocolKitOwnerA.signHash(safeTxHash) Send the transaction to the service TypeScript Python Curl _ 15 // Initialize the API Kit _ 15 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 15 const apiKit = new SafeApiKit({ _ 15 chainId: 11155111n, _ 15 apiKey: 'YOUR_API_KEY' _ 15 }) _ 15 _ 15 // Send the transaction to the Transaction Service with the signature from Owner A _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: config.SAFE_ADDRESS, _ 15 safeTransactionData: safeTransaction.data, _ 15 safeTxHash, _ 15 senderAddress: config.OWNER_A_ADDRESS, _ 15 senderSignature: signatureOwnerA.data _ 15 }) Collect missing signatures Get the pending transaction TypeScript Python Curl _ 10 const signedTransaction = await apiKit.getTransaction(safeTxHash) Add missing signatures TypeScript Python Curl _ 15 // Initialize the Protocol Kit with Owner B _ 15 const protocolKitOwnerB = await Safe.init({ _ 15 provider: config.RPC_URL, _ 15 signer: config.OWNER_B_PRIVATE_KEY, _ 15 safeAddress: config.SAFE_ADDRESS _ 15 }) _ 15 _ 15 // Sign the transaction with Owner B _ 15 const signatureOwnerB = await protocolKitOwnerB.signHash(safeTxHash) _ 15 _ 15 // Send the transaction to the Transaction Service with the signature from Owner B _ 15 await apiKit.confirmTransaction( _ 15 safeTxHash, _ 15 signatureOwnerB.data _ 15 ) Execute the transaction TypeScript Python _ 10 const transactionResponse = _ 10 await protocolKitOwnerA.executeTransaction(signedTransaction) Get the executed transaction TypeScript Python Curl _ 10 const transactions = await apiKit.getMultisigTransactions(config.SAFE_ADDRESS) _ 10 _ 10 if (transactions.results.length > 0) { _ 10 console.log('Last",
    "title": "Transactions with off-chain signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Transactions with off-chain signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Create a Safe transaction",
      "Sign the transaction",
      "Send the transaction to the service",
      "Collect missing signatures",
      "Get the pending transaction",
      "Add missing signatures",
      "Execute the transaction",
      "Get the executed transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-guides/transactions#chunk-1",
    "url": "https://docs.safe.global/core-api/transaction-service-guides/transactions",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "executed transaction', transactions.results[0]) _ 10 } Supported Networks Data decoder Was this page helpful? Report issue",
    "title": "Transactions with off-chain signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Transactions with off-chain signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Create a Safe transaction",
      "Sign the transaction",
      "Send the transaction to the service",
      "Collect missing signatures",
      "Get the pending transaction",
      "Add missing signatures",
      "Execute the transaction",
      "Get the executed transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-guides/data-decoder#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-guides/data-decoder",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Guides Data decoder Transaction data decoder This guide shows how to use the Safe Transaction Service API to decode transaction data for contract interactions. The different steps are implemented using Curl (opens in a new tab) requests and the Safe{Core} SDK (opens in a new tab) TypeScript library. Prerequisites Node.js and npm (opens in a new tab) when using the Safe{Core} SDK. Have a Safe account. Steps Install dependencies TypeScript Python _ 10 yarn add @safe-global/api-kit Imports TypeScript Python _ 10 import SafeApiKit from '@safe-global/api-kit' Decode transaction data TypeScript Python Curl _ 11 // Initialize the API Kit _ 11 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 11 const apiKit = new SafeApiKit({ _ 11 chainId: 11155111n, _ 11 apiKey: 'YOUR_API_KEY' _ 11 }) _ 11 _ 11 const data = \"0x095ea7b3000000000000000000000000e6fc577e87f7c977c4393300417dcc592d90acf8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\" _ 11 const dataDecoded = await apiKit.decodeData(data) _ 11 _ 11 // This decoded data is also included as dataDecoded in the response of the apiKit's getMultisigTransactions, getModuleTransactions, and getAllTransactions methods. Transactions Messages Was this page helpful? Report issue",
    "title": "Transaction data decoder – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Transaction data decoder",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Decode transaction data"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-guides/messages#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-guides/messages",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Guides Messages Messages with off-chain signatures This guide shows how to interact with the Safe Transaction Service API to create and sign messages with a Safe account. The different steps are implemented using Curl (opens in a new tab) requests, the Safe{Core} SDK (opens in a new tab) TypeScript library and the safe-eth-py (opens in a new tab) Python library. Prerequisites Node.js and npm (opens in a new tab) when using the Safe{Core} SDK. Python (opens in a new tab) >= 3.9 when using safe-eth-py . Have a Safe account configured with a threshold of 2, where two signatures are needed. Steps Install dependencies TypeScript Python _ 10 yarn add @safe-global/api-kit @safe-global/protocol-kit @safe-global/types-kit Imports TypeScript Python _ 10 import SafeApiKit, {AddMessageOptions} from '@safe-global/api-kit' _ 10 import Safe, {hashSafeMessage} from '@safe-global/protocol-kit' Create a Safe message TypeScript Python Curl _ 11 // Initialize the Protocol Kit with Owner A _ 11 const protocolKitOwnerA = await Safe.init({ _ 11 provider: config.RPC_URL, _ 11 signer: config.OWNER_A_PRIVATE_KEY, _ 11 safeAddress: config.SAFE_ADDRESS _ 11 }) _ 11 _ 11 const rawMessage: string = 'A Safe Message - ' + Date.now() _ 11 _ 11 // Create a Safe message _ 11 const safeMessage = protocolKitOwnerA.createMessage(rawMessage) Sign the message TypeScript Python Curl _ 10 // Sign the message with Owner A _ 10 const signedMessageOwnerA = await protocolKitOwnerA.signMessage(safeMessage) Send the message to the service TypeScript Python Curl _ 14 // Initialize the API Kit _ 14 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 14 const apiKit = new SafeApiKit({ _ 14 chainId: 11155111n, _ 14 apiKey: 'YOUR_API_KEY' _ 14 }) _ 14 _ 14 const messageProps: AddMessageOptions = { _ 14 message: rawMessage, _ 14 signature: signedMessageOwnerA.encodedSignatures() _ 14 } _ 14 _ 14 // Send the message to the Transaction Service with the signature from Owner A _ 14 apiKit.addMessage(config.SAFE_ADDRESS, messageProps) Collect the missing signatures Get the pending message TypeScript Python Curl _ 14 // Initialize the Protocol Kit with Owner B _ 14 const protocolKitOwnerB = await Safe.init({ _ 14 provider: config.RPC_URL, _ 14 signer: config.OWNER_B_PRIVATE_KEY, _ 14 safeAddress: config.SAFE_ADDRESS _ 14 }) _ 14 _ 14 // Get the Safe message hash _ 14 const safeMessageHash = await protocolKitOwnerB.getSafeMessageHash( _ 14 hashSafeMessage(rawMessage) _ 14 ) _ 14 _ 14 // Get the Safe message _ 14 const safeServiceMessage = await apiKit.getMessage(safeMessageHash) Add missing signatures TypeScript Python Curl _ 11 // Sign the message with Owner B _ 11 const signedMessageOwnerB = await protocolKitOwnerB.signMessage(safeServiceMessage) _ 11 _ 11 // Get Owner B address _ 11 const ownerBAddress = '0x...' _ 11 _ 11 // Send the message to the Transaction Service with the signature from Owner B _ 11 await apiKit.addMessageSignature( _ 11 safeMessageHash, _ 11 signedMessageOwnerB.getSignature(ownerBAddress)?.data || '0x' _ 11 ) Data decoder Delegates Was this page helpful? Report issue",
    "title": "Messages with off-chain signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Messages with off-chain signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Create a Safe message",
      "Sign the message",
      "Send the message to the service",
      "Collect the missing signatures",
      "Get the pending message",
      "Add missing signatures"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-guides/delegates#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-guides/delegates",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Guides Delegates Manage user delegates This guide shows how to interact with the Safe Transaction Service API to manage user delegates. The different steps are implemented using Curl (opens in a new tab) requests, the Safe{Core} SDK (opens in a new tab) TypeScript library and the safe-eth-py (opens in a new tab) Python library. Prerequisites Node.js and npm (opens in a new tab) when using the Safe{Core} SDK. Python (opens in a new tab) >= 3.9 when using safe-eth-py . Have a Safe account. Steps Install dependencies TypeScript Python _ 10 yarn add ethers @safe-global/api-kit @safe-global/protocol-kit @safe-global/types-kit Imports TypeScript Python _ 10 import { ethers } from 'ethers' _ 10 import SafeApiKit, { AddSafeDelegateProps } from '@safe-global/api-kit' Get the delegates from a Safe TypeScript Python Curl _ 11 // Initialize the API Kit _ 11 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 11 const apiKit = new SafeApiKit({ _ 11 chainId: 11155111n, _ 11 apiKey: 'YOUR_API_KEY' _ 11 }) _ 11 _ 11 // Get the Safe delegates _ 11 const delegates = await apiKit.getSafeDelegates({ _ 11 delegatorAddress: config.SAFE_ADDRESS _ 11 }) Add a delegate to a delegator TypeScript Python Curl _ 17 const provider = new ethers.JsonRpcProvider(config.RPC_URL) _ 17 _ 17 const ownerA = new ethers.Wallet(config.OWNER_A_PRIVATE_KEY, provider) _ 17 const ownerAAddress = await ownerA.getAddress() _ 17 _ 17 const ownerB = new ethers.Wallet(config.OWNER_B_PRIVATE_KEY, provider) _ 17 const ownerBAddress = await ownerB.getAddress() _ 17 _ 17 const delegateConfig: AddSafeDelegateProps = { _ 17 delegateAddress: ownerBAddress || '0x', _ 17 delegatorAddress: ownerAAddress || '0x', _ 17 signer: ownerA, _ 17 label: 'Label' _ 17 } _ 17 _ 17 // Add Owner B as a delegate of Owner A for all Safes accounts (safeAddress = null) _ 17 const safeDelegateAddResponse = await apiKit.addSafeDelegate(delegateConfig) Delete a delegate of a delegator TypeScript Python Curl _ 10 const delegateConfig: DeleteSafeDelegateProps = { _ 10 delegateAddress: ownerBAddress || '0x', _ 10 delegatorAddress: ownerAAddress || '0x', _ 10 signer: ownerA _ 10 } _ 10 _ 10 // Remove Owner B as delegate of Owner A _ 10 await apiKit.removeSafeDelegate(delegateConfig) Messages 0g Was this page helpful? Report issue",
    "title": "Manage user delegates – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Manage user delegates",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Get the delegates from a Safe",
      "Add a delegate to a delegator",
      "Delete a delegate of a delegator"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/0G#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/0G",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Delegates Arbitrum Was this page helpful? Report issue",
    "title": "0g – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/arbitrum#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/arbitrum",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET 0g Aurora Was this page helpful? Report issue",
    "title": "Arbitrum – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/aurora#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/aurora",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Arbitrum Avalanche Was this page helpful? Report issue",
    "title": "Aurora – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/avalanche#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/avalanche",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Aurora Base Was this page helpful? Report issue",
    "title": "Avalanche – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/base#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/base",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Avalanche Base Sepolia Was this page helpful? Report issue",
    "title": "Base – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/base-sepolia#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/base-sepolia",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Base Berachain Was this page helpful? Report issue",
    "title": "Base Sepolia – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/berachain#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/berachain",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Base Sepolia Botanix Was this page helpful? Report issue",
    "title": "Berachain – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/botanix#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/botanix",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Berachain Bsc Was this page helpful? Report issue",
    "title": "Botanix – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/bsc#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/bsc",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Botanix Celo Was this page helpful? Report issue",
    "title": "Bsc – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/celo#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/celo",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Bsc Chiado Was this page helpful? Report issue",
    "title": "Celo – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/chiado#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/chiado",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Celo Codex Was this page helpful? Report issue",
    "title": "Chiado – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/codex#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/codex",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Chiado Gnosis Chain Was this page helpful? Report issue",
    "title": "Codex – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/gnosis-chain#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/gnosis-chain",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Codex Hemi Was this page helpful? Report issue",
    "title": "Gnosis Chain – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/hemi#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/hemi",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Gnosis Chain Ink Was this page helpful? Report issue",
    "title": "Hemi – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/ink#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/ink",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Hemi Katana Was this page helpful? Report issue",
    "title": "Ink – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/katana#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/katana",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Ink Lens Was this page helpful? Report issue",
    "title": "Katana – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/lens#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/lens",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Katana Linea Was this page helpful? Report issue",
    "title": "Lens – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/linea#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/linea",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Lens Mainnet Was this page helpful? Report issue",
    "title": "Linea – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/mainnet#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/mainnet",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Linea Mantle Was this page helpful? Report issue",
    "title": "Mainnet – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/mantle#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/mantle",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Mainnet Monad Was this page helpful? Report issue",
    "title": "Mantle – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/monad#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/monad",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Mantle Opbnb Was this page helpful? Report issue",
    "title": "Monad – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/opbnb#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/opbnb",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Monad Optimism Was this page helpful? Report issue",
    "title": "Opbnb – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/optimism#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/optimism",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Opbnb Peaq Was this page helpful? Report issue",
    "title": "Optimism – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/peaq#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/peaq",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Optimism Plasma Was this page helpful? Report issue",
    "title": "Peaq – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/plasma#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/plasma",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Peaq Polygon Was this page helpful? Report issue",
    "title": "Plasma – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/polygon#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/polygon",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Plasma Scroll Was this page helpful? Report issue",
    "title": "Polygon – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/scroll#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/scroll",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Polygon Sepolia Was this page helpful? Report issue",
    "title": "Scroll – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/sepolia#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/sepolia",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Scroll Sonic Was this page helpful? Report issue",
    "title": "Sepolia – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/sonic#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/sonic",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Sepolia Unichain Was this page helpful? Report issue",
    "title": "Sonic – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/unichain#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/unichain",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Sonic Worldchain Was this page helpful? Report issue",
    "title": "Unichain – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/worldchain#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/worldchain",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Unichain Xdc Was this page helpful? Report issue",
    "title": "Worldchain – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/xdc#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/xdc",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Worldchain Xlayer Was this page helpful? Report issue",
    "title": "Xdc – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/xlayer#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/xlayer",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Xdc Zkevm Was this page helpful? Report issue",
    "title": "Xlayer – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/zkevm#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/zkevm",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Xlayer Zksync Was this page helpful? Report issue",
    "title": "Zkevm – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference/zksync#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference/zksync",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Zkevm Overview Was this page helpful? Report issue",
    "title": "Zksync – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-installation-overview#chunk-0",
    "url": "https://docs.safe.global/core-api/safe-installation-overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Overview Install Safe on your chain Safe's vision is to make every web3 account a smart account. Therefore, we prioritize teams and chains building with smart accounts, especially if they push account abstraction (for example, ERC-4337 or EIP-1271 adoption) with Safe. Safe's security is based on the contracts deployed in EVM-compatible networks. For the time being, we are not looking to extend beyond EVM. To have the full Safe stack running on your chain network, you need to consider the following steps: Deploy Safe canonical contracts Process You can find detailed instructions under contracts deployment . Cost The contracts are fully open source, but you have to pay gas in the new chain's native currency for contract deployment. Timeline Safe reviews registrations of canonical deployments on a two-week cadence. Deploy and maintain Safe{Wallet} and Safe{Core} Infrastructure Process You have three options available: Use the Platform-as-a-Service run by Safe Core Contributors (opens in a new tab) . Use the Platform-as-a-Service run by third-party integrators. Self-host the infrastructure. You can find detailed instructions under infrastructure deployment . Cost Safe is fully open source but requires someone to run and maintain the web interface (opens in a new tab) and infrastructure (opens in a new tab) . Cost is based on the individual agreement (if run by any third party, including Safe). Primary cost factors: Deployment costs. Indexing. Cloud storage and monitoring services. Timeline Based on the individual agreement with Safe or third-party integrators. Prioritisation for native integration ( app.safe.global (opens in a new tab) ) is primarily based on the network's smart account/account abstraction strategy (for example, is every user account a Safe under the hood beyond the usage of Safe as a multi-signature for treasury management?) and additional metrics (opens in a new tab) . Zksync Contracts Deployment Was this page helpful? Report issue",
    "title": "Install Safe on your chain – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Install Safe on your chain",
      "Deploy Safe canonical contracts",
      "Process",
      "Cost",
      "Timeline",
      "Deploy and maintain Safe{Wallet} and Safe{Core} Infrastructure",
      "Process",
      "Cost",
      "Timeline"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-contracts-deployment#chunk-0",
    "url": "https://docs.safe.global/core-api/safe-contracts-deployment",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "API Contracts Deployment Safe{Core} contracts deployment In this section, you will deploy the Safe{Core} contracts on your chain. All Safe contract deployments on any network follow the same procedure to ensure a deterministic address for all singleton contracts (proxy-factory, mastercopy, etc.) and verify the deployment. ℹ️ You can also use the Platform-as-a-Service deployment run by Safe Core Contributors (opens in a new tab) or third-party integrators. Prerequisites Open a pull request (opens in a new tab) to add your chain to chainlist.org (opens in a new tab) . Steps Singleton factory contract deployment ℹ️ You do not need to perform these tasks if your network is based on a rollup framework with Safe contracts already deployed (for example, OP Stack). Create a new issue in the safe-singleton-factory (opens in a new tab) repository. A bot will reply to the issue with the deployer address (opens in a new tab) and the amount of native token you need to send to this address. Once funded, mark the checkbox on the GitHub issue. The review of the issues happens every two weeks. Our team will perform the deterministic deployment of the safe-singleton-factory contract and publish a new npm release of @safe-global/safe-singleton-factory (opens in a new tab) . Singleton contracts deployment ℹ️ You do not need to perform these tasks if your network is based on a rollup framework with Safe contracts already deployed (for example, OP Stack). Clone the safe-smart-account (opens in a new tab) repository by running the following command: _ 10 git clone --branch v1.3.0-libs.0 https://github.com/safe-global/safe-smart-account.git _ 10 cd safe-smart-account Get the latest version of @safe-global/safe-singleton-factory (opens in a new tab) , by running the following command: _ 10 npm i --save-dev @safe-global/safe-singleton-factory Ensure the latest version includes your safe-singleton-factory deployment from before. Deploy Contracts. Infura supports your chain Infura does not support your chain Create a .env file in the root of the repository with the following content: _ 10 MNEMONIC=funded_account_on_this_network _ 10 INFURA_KEY=your_Infura_project_API_key If you deploy to a ZKsync chain, add the following line to the .env file: _ 10 HARDHAT_ENABLE_ZKSYNC=1 Deploy the contracts by running this command: _ 10 npm run deploy-all your_chain_id The script should deploy all the singleton contracts (nine contracts in total). Write down each address (example addresses for v1.3.0 could look like): _ 10 compatibility_fallback_handler: `0x017062a1dE2FE6b99BE3d9d37841FeD19F573804` _ 10 create_call: `0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d` _ 10 gnosis_safe: `0x69f4D1788e39c87893C980c06EdF4b7f686e2938` _ 10 gnosis_safe_l2: `0xfb1bffC9d739B8D520DaF37dF666da4C687191EA` _ 10 multi_send: `0x998739BFdAAdde7C933B942a68053933098f9EDa` _ 10 multi_send_call_only: `0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B` _ 10 proxy_factory: `0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC` _ 10 sign_message_lib: `0x98FFBBF51bb33A056B08ddf711f289936AafF717` _ 10 simulate_tx_accessor: `0x727a77a074D1E6c4530e814F89E618a3298FC044` Record your contracts in the official registry You must share your singleton contract deployment addresses in the official public registry. Fork the safe-deployments (opens in a new tab) GitHub repository. Add your chain ID to each of the nine JSON files in src/assets/<version> . If you deployed with the singleton deployment from above, you have to mark your chain's deployment as \"canonical\". For example, add this line to gnosis_safe.json to indicate the gnosis safe has the canonical address on your chain: _ 10 \"<your_chain_id>\": \"canonical\"",
    "title": "Safe{Core} contracts deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe{Core} contracts deployment",
      "Prerequisites",
      "Steps",
      "Singleton factory contract deployment",
      "Singleton contracts deployment",
      "Record your contracts in the official registry"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-contracts-deployment#chunk-1",
    "url": "https://docs.safe.global/core-api/safe-contracts-deployment",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "Open a pull request. Your pull request should follow this example pull request (opens in a new tab) . Now, you have deployed the Safe{Core} contracts on your chain. In the next step, you have to install the Safe{Core} Infrastructure . Overview Infrastructure Deployment Was this page helpful? Report issue",
    "title": "Safe{Core} contracts deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe{Core} contracts deployment",
      "Prerequisites",
      "Steps",
      "Singleton factory contract deployment",
      "Singleton contracts deployment",
      "Record your contracts in the official registry"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-infrastructure-deployment#chunk-0",
    "url": "https://docs.safe.global/core-api/safe-infrastructure-deployment",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "API Infrastructure Deployment Safe{Core} Infrastructure deployment Once you have deployed the Safe{Core} contracts , you must deploy the off-chain components of the Safe{Core} Stack, including backend and frontend services. You have three options for deploying the Safe stack, depending on your needs. Option 1: Safe Core Contributor Platform-as-a-Service We roll out new networks quarterly, depending on our internal capacity, and only for medium to large chains based on a strict scoring framework. ℹ️ If you want to submit your chain for assessment in the next quarter, please fill out this form (opens in a new tab) . Hard requirements EVM-compatible chain. At least two dedicated RPC node providers, with preference for at least one Tier 1 provider of Infura, Alchemy, Quicknode. You can find more on RPC nodes here . Option 2: Third-party integrators We are happy to introduce you to our integrators. Please contact networks@safe.global . Option 3: Self-hosting If you have engineering and cloud resources, you can also deploy the different components of the stack by following one of the procedures below. You can find docker images for a majority of platforms (opens in a new tab) . Requirements Hardware These are the hardware requirements to run the different services required. Network Transaction Service Client Gateway Config Service Database Small (new chain with low traffic) CPU: 2 vCPU RAM: 8GiB CPU: 2 vCPU RAM: 8 GiB CPU: 2 vCPU RAM: 8 GiB CPU: 2 vCPU RAM: 8GiB Standard CPU: 4 vCPU RAM: 16GiB CPU: 2 vCPU RAM: 8 GiB CPU: 2 vCPU RAM: 8 GiB CPU: 4 vCPU RAM: 16GiB Large (large chain with high-traffic) CPU: 8 vCPU RAM: 32GiB CPU: 2 vCPU RAM: 8 GiB CPU: 2 vCPU RAM: 8 GiB CPU: 16 vCPU RAM: 64GiB RPC For support, please refer to the RPC requirements . Safe (L1) requires tracing for indexing, while Safe (L2) supports events/logs. Docker-compose deployment Our docker-compose files are available on the safe-infrastructure (opens in a new tab) repository. _ 10 git clone git@github.com:safe-global/safe-infrastructure.git _ 10 cd safe-infrastructure Prerequisites Docker (opens in a new tab) v20.10+ Docker-compose (opens in a new tab) 2.x.x+ Running Ethereum JSON RPC client (opens in a new tab) Configuration _ 10 cp .env.sample .env _ 10 vi .env _ 10 REVERSE_PROXY_PORT=8000 _ 10 CFG_VERSION=latest _ 10 CGW_VERSION=latest _ 10 TXS_VERSION=latest _ 10 UI_VERSION=latest _ 10 EVENTS_VERSION=latest _ 10 RPC_NODE_URL=<REPLACE BY YOUR RPC ENDPOINT> Run _ 10 sh scripts/run_locally.sh _ 10 # will ask to set up username/password for config-service and transactions-service This command runs seventeen Docker containers from the docker-compose.yml (opens in a new tab) : Nginx reverse proxy Postgres 14.x database (x3 for Transaction Service, Config Service, and Events Service) Redis database (x2 for Transaction Service and Client Gateway) RabbitMQ message queue (x2 for Transaction Service and General) Transaction Service workers & scheduler (x4) Transaction Service web Config Service web Client Gateway web Events service web Wallet web Kubernetes deployment ⚠️ Our Helm Charts (opens in a new tab) are currently in alpha version, use them at",
    "title": "Safe{Core} Infrastructure deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe{Core} Infrastructure deployment",
      "Option 1: Safe Core Contributor Platform-as-a-Service",
      "Hard requirements",
      "Option 2: Third-party integrators",
      "Option 3: Self-hosting",
      "Requirements",
      "Hardware",
      "RPC",
      "Docker-compose deployment",
      "Prerequisites",
      "Configuration",
      "Run",
      "Kubernetes deployment",
      "Configuration",
      "Transaction Service",
      "Config Service"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-infrastructure-deployment#chunk-1",
    "url": "https://docs.safe.global/core-api/safe-infrastructure-deployment",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "your own risk and do not hesitate to share feedback. An official helm chart creates all the necessary manifests, including the service account and RBAC entities needed for service discovery. _ 10 helm repo add safe https://5afe.github.io/safe-helm-charts/charts/packages _ 10 helm repo update _ 10 helm install [RELEASE_NAME] safe/safe-stack -f your_values.yaml [-n NAMESPACE] The helm chart allows you to inline all the configurations directly in your values.yaml : _ 10 helm show values safe/safe-stack Configuration After all the components are up and running, you need to configure the Transaction Service and config service to start indexing data and connect to your chain from Safe{Wallet}. Transaction Service By default, Transaction Service will automatically setup MasterCopies and Proxy Factories for a list of known networks (opens in a new tab) . If your network is not supported you have to add the addresses manually in http://YOUR_TRANSACTION_SERVICE_DOMAIN/admin/ in Proxy Factories and also in Safe master copies section. Config Service Open http://YOUR_CONFIG_SERVICE_DOMAIN/admin to configure your chain: You can find more information on all parameters available in the Safe Config Service documentation . Well done! You now have the Safe Contracts deployed on your chain and the Safe infrastructure up and running. Contracts Deployment Configuration Was this page helpful? Report issue",
    "title": "Safe{Core} Infrastructure deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe{Core} Infrastructure deployment",
      "Option 1: Safe Core Contributor Platform-as-a-Service",
      "Hard requirements",
      "Option 2: Third-party integrators",
      "Option 3: Self-hosting",
      "Requirements",
      "Hardware",
      "RPC",
      "Docker-compose deployment",
      "Prerequisites",
      "Configuration",
      "Run",
      "Kubernetes deployment",
      "Configuration",
      "Transaction Service",
      "Config Service"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-decoder-service-overview#chunk-0",
    "url": "https://docs.safe.global/core-api/safe-decoder-service-overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Overview Safe Decoder Service overview Safe Decoder Service is a REST API that translates blockchain call‑data into human‑readable information for transactions within the Safe ecosystem. Part of the Safe{Core} infrastructure, it maintains a database of contract ABIs and uses them to decode incoming calldata. Reference Resources Check the Safe Decoder Service GitHub repository (opens in a new tab) (Python). Configuration Reference Was this page helpful? Report issue",
    "title": "Safe Decoder Service overview – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [
      "Safe Decoder Service overview",
      "Resources"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/safe-decoder-service-reference#chunk-0",
    "url": "https://docs.safe.global/core-api/safe-decoder-service-reference",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Contracts List Contracts GET Get Specific Contract GET Data decoder /api/v1/data-decoder - POST POST Overview Was this page helpful? Report issue",
    "title": "Safe Decoder Service Reference – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": null,
    "breadcrumbs": [],
    "depth": 0,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/safe-core-api/rpc-requirements#chunk-0",
    "url": "https://docs.safe.global/safe-core-api/rpc-requirements",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "API Running the Safe Transaction Service RPC Requirements RPC Requirements What are the RPC requirements? To run the Transaction Service in tracing mode , you will need a tracing-compatible node: Erigon (opens in a new tab) node (recommended). Deprecated OpenEthereum (opens in a new tab) node with tracing enabled ( --tracing flag) if it's still supported on your network. Nethermind (opens in a new tab) ( archive mode so tracing is enabled). Any RPC that supports eth_getLogs if using the Safe L2 Version. From Safe v1.3.0 there's an alternative and recommended way to avoid using tracing, the L2 Safe version ( https://github.com/safe-global/safe-deployments/blob/main/src/assets/v1.3.0/gnosis_safe_l2.json (opens in a new tab) ) that emits events, so no tracing node is required. This is the approach used in networks like Polygon or Binance Smart Chain where fees are cheap and emitting events don't impact the user: A Transaction Service configured with a tracing node can index L2 and non-L2 versions of the Safe contracts. A Transaction Service configured without a tracing node can only index L2 versions of the Safe contracts. Indexing mode shouldn't be changed after initializing the service, as the database could become corrupted, so if a tracing node wasn't set up, it shouldn't be added later. The opposite is also problematic. What RPC methods are used? For indexing, basic RPC methods are required, and the service uses batching to query the RPC: eth_getTransactionByHash eth_getBlockByNumber eth_getTransactionReceipt eth_getLogs (for indexing ERC20/721 transfers) eth_chainId (just called once and cached) ... For the regular version of the Safe (not L2), tracing endpoints are used: ​ trace_filter (opens in a new tab) : For quick sync, but it could be disabled setting the configuration parameter ETH_INTERNAL_NO_FILTER=False . Be careful, it will make the service really slow when syncing from scratch. ​ trace_block (opens in a new tab) ​ ​ trace_transaction (opens in a new tab) ​ No special RPC methods are used for the L2 version of Safe. The most demanding one will be eth_getLogs (opens in a new tab) to get the Safe events. How many queries will the Transaction Service send to the RPC? The number of queries sent may vary depending on the network. The Transaction Service has some environment variables that can be configured to set a limit on the number of blocks that are processed together ( ETH_EVENTS_BLOCK_PROCESS_LIMIT_MAX ), but the default behavior is trying to detect the best configuration for every network similar to how TCP congestion control (opens in a new tab) works. The indexer tries to process a low number of blocks (currently 50), and depending on that: If the request takes less than 1 second , the node can process more. The number of blocks to fetch is duplicated for the next request. If the request takes less than 3 seconds , the number of blocks to process is incremented by a small amount (currently 20). If the request takes more than 20 seconds , the number of blocks to process is decremented by a small amount (currently",
    "title": "RPC Requirements – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/core-api/api-safe-transaction-service/faq",
    "breadcrumbs": [
      {
        "text": "Running the Safe Transaction Service",
        "url": "/core-api/api-safe-transaction-service"
      }
    ],
    "depth": 1,
    "section_titles": [
      "RPC Requirements",
      "What are the RPC requirements?",
      "What RPC methods are used?",
      "How many queries will the Transaction Service send to the RPC?",
      "RPC Provider expectations"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/safe-core-api/rpc-requirements#chunk-1",
    "url": "https://docs.safe.global/safe-core-api/rpc-requirements",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "20). If the request takes more than 30 seconds , the number of blocks to process is halved. If there is an exception when requesting the information (I/O error) number of blocks to process is reset to the minimum number of blocks (currently 1). All this happens in every request to the node used for indexing (safe transactions, erc20/721 events...). Be careful, some nodes, like Binance Smart Chain public nodes, have a hard-coded limit of blocks they can process ( 5000 in the case of BSC). Set ETH_EVENTS_BLOCK_PROCESS_LIMIT_MAX to prevent the algorithm from trying to process more blocks and raise errors all the time RPC Provider expectations For RPC providers, we expect communication on every update and configuration change as it could impact our indexers: Timeout for the requests. Number of batch requests allowed in the same HTTP request. Block range that can be queried in queries like eth_getLogs or trace_filter . Results limit for endpoints (for example, some providers implement a limit to the number of queries like eth_getLogs ). The indexer expects failures and not capped results. Running the Safe Transaction Service FAQ Was this page helpful? Report issue",
    "title": "RPC Requirements – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/core-api/api-safe-transaction-service/faq",
    "breadcrumbs": [
      {
        "text": "Running the Safe Transaction Service",
        "url": "/core-api/api-safe-transaction-service"
      }
    ],
    "depth": 1,
    "section_titles": [
      "RPC Requirements",
      "What are the RPC requirements?",
      "What RPC methods are used?",
      "How many queries will the Transaction Service send to the RPC?",
      "RPC Provider expectations"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/api-kit#chunk-0",
    "url": "https://docs.safe.global/sdk/api-kit",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK API Kit API Kit The API Kit facilitates the interaction with the Safe Transaction Service API , allowing to propose and share transactions with the other signers of a Safe, sending the signatures to the service to collect them, getting information about a Safe (like reading the transaction history, pending transactions, enabled Modules and Guards, etc.), among other features. @safe-global/api-kit The following guides show how to use the API Kit and integrate it into your project: Propose and confirm transactions Resources API Kit on GitHub (opens in a new tab) Reference Propose and Confirm Transactions Was this page helpful? Report issue",
    "title": "API Kit – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/core-api/transaction-service-overview",
    "breadcrumbs": [],
    "depth": 1,
    "section_titles": [
      "API Kit",
      "@safe-global/api-kit",
      "Resources"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/core-api/transaction-service-reference#chunk-0",
    "url": "https://docs.safe.global/core-api/transaction-service-reference",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "← Go to API Delegates List Delegates GET Create Delegate POST Delete Delegate DELETE Messages Get Message GET Sign Message POST List Messages GET Create Signed Message POST Transactions Get Module Transaction GET List Multisig Confirmations GET Confirm Multisig Transaction POST List Incoming Transfers GET List a Safe's Module Transactions GET Estimate Gas Costs for a Multisig Transaction POST List Transfers GET Get Transfer GET Get Multisig Transaction GET Delete Queued Multisig Transaction DELETE List Transactions GET List a Safe's Multisig Transactions GET Create Multisig Transaction POST Modules List Safes that use a Specific Module GET Owners List Safes from a Specific Owner GET 4337 Get Safe Operation GET Get the list of confirmations for a multisig transaction GET Add a confirmation for a transaction POST List Safe Operations GET Create Safe Operation POST List User Operations GET Get User Operation GET Safes Get Safe Status GET Get Safe Creation Status GET Get Transactions for CSV Export GET Get Safe Balances GET List Collectibles GET Tokens List Tokens GET Get a Specific Token's Information GET List Token Data Sources GET Linea Mantle Was this page helpful? Report issue",
    "title": "Mainnet – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/core-api/transaction-service-overview",
    "breadcrumbs": [],
    "depth": 1,
    "section_titles": [],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/erc-4337/4337-safe#chunk-0",
    "url": "https://docs.safe.global/advanced/erc-4337/4337-safe",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced ERC-4337 Safe and ERC-4337 Safe and ERC-4337 Safe has adopted a modular and flexible approach to integrating the ERC-4337, allowing users to turn their Safe account into an ERC-4337 smart account. Safe ERC-4337 compatibility is provided via Safe Modules and the Fallback Handler. This means the functionality is not implemented directly in the Safe Smart Account, but in the Safe4337Module (opens in a new tab) contract, which can be enabled in any Safe account at the Safe deployment time or afterward. Safe4337Module This module is an extension to the Safe Smart Account that acts both as a Fallback Handler, meaning that the Safe Proxy contract will fallback to this contract when its functions are called in the proxy, and a Safe Module, having the right to execute Safe transactions once it's enabled in a Safe account. It implements the ERC-4337 interface, including the functions to validate and execute the user operation, and it's limited to the EntryPoint address. ℹ️ This module must only be used with Safe v1.4.1 (opens in a new tab) or newer. UserOperation validation The Safe Proxy contract receives a call to the validateUserOp function from the EntryPoint and forwards it to the Safe4337Module . The module validates the UserOperation object by checking that the Safe owners signed the UserOperation hash and returns the result. It also executes a module transaction to pay the fees back. UserOperation execution After successful validation, the EntryPoint calls the executeUserOp function, forwarding it again to the module, which executes a module transaction with the target and data specified in the UserOperation object. Overview Supported Networks Was this page helpful? Report issue",
    "title": "Safe and ERC-4337 – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/core-api/safe-installation-overview",
    "breadcrumbs": [],
    "depth": 1,
    "section_titles": [
      "Safe and ERC-4337",
      "Safe4337Module",
      "UserOperation validation",
      "UserOperation execution"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/config-service-configuration/overview#chunk-0",
    "url": "https://docs.safe.global/config-service-configuration/overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Config Service Reference Overview Safe Config Service Django configuration This document describes how to configure the Config Service through the Django admin panel correctly. Overview The Config Service is a Django application that allows you to manage configurations for your clients. It provides a web interface where you can create, update, and delete configurations, as well as manage groups of permissions to control who can access the configurations. It assumes you have already set up your Safe Infrastructure (opens in a new tab) instance. If you haven't, please refer to the Safe{Core} Infrastructure Deployment guide. The following document concerns only the Safe Config Service. For other services of Safe{Core} Infrastructure, please refer to the Safe{Core} Infrastructure documentation. ← Go Back Add or edit groups Was this page helpful? Report issue",
    "title": "Safe Config Service Django configuration – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/core-api/safe-infrastructure-deployment",
    "breadcrumbs": [],
    "depth": 1,
    "section_titles": [
      "Safe Config Service Django configuration",
      "Overview"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions#chunk-0",
    "url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "SDK API Kit Guides Propose and Confirm Transactions Propose and confirm transactions In this guide you will learn how to propose transactions to the service and collect the signatures from the owners so they become executable. For more detailed information, see the API Kit Reference . Prerequisites Node.js and npm (opens in a new tab) A Safe with several signers Steps Install dependencies First, you need to install some dependencies. _ 10 yarn add @safe-global/api-kit \\ _ 10 @safe-global/protocol-kit \\ _ 10 @safe-global/types-kit Imports Here are all the necessary imports for this guide. _ 10 import SafeApiKit from '@safe-global/api-kit' _ 10 import Safe from '@safe-global/protocol-kit' _ 10 import { _ 10 MetaTransactionData, _ 10 OperationType _ 10 } from '@safe-global/types-kit' Setup We will use a Safe account setup with two or more signers, and threshold two, so at least multiple signatures will need to be collected when executing a transaction. _ 10 // https://chainlist.org/?search=sepolia&testnets=true _ 10 const RPC_URL = 'https://eth-sepolia.public.blastapi.io' _ 10 _ 10 const SAFE_ADDRESS = // ... _ 10 _ 10 const OWNER_1_ADDRESS = // ... _ 10 const OWNER_1_PRIVATE_KEY = // ... _ 10 _ 10 const OWNER_2_PRIVATE_KEY = // ... Initialize the API Kit Firstly, you need to create an instance of the API Kit. In chains where the Safe Transaction Service is supported, it's enough to specify the chainId property. _ 10 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 10 const apiKit = new SafeApiKit({ _ 10 chainId: 1n, _ 10 apiKey: 'YOUR_API_KEY' _ 10 }) Alternatively, you can use a custom service using the optional txServiceUrl property. _ 10 const apiKit = new SafeApiKit({ _ 10 chainId: 1n, // set the correct chainId _ 10 txServiceUrl: 'https://url-to-your-custom-service' _ 10 }) Initialize the Protocol Kit To handle transactions and signatures, you need to create an instance of the Protocol Kit with the provider , signer and safeAddress . _ 10 const protocolKitOwner1 = await Safe.init({ _ 10 provider: RPC_URL, _ 10 signer: OWNER_1_PRIVATE_KEY, _ 10 safeAddress: SAFE_ADDRESS _ 10 }) Propose a transaction to the service Before a transaction can be executed, any of the Safe signers needs to initiate the process by creating a proposal of a transaction. This transaction is sent to the service to make it accessible by the other owners so they can give their approval and sign the transaction as well. For a full list and description of the properties see proposeTransaction in the API Kit reference. _ 23 // Create transaction _ 23 const safeTransactionData: MetaTransactionData = { _ 23 to: '0x', _ 23 value: '1', // 1 wei _ 23 data: '0x', _ 23 operation: OperationType.Call _ 23 } _ 23 _ 23 const safeTransaction = await protocolKitOwner1.createTransaction({ _ 23 transactions: [safeTransactionData] _ 23 }) _ 23 _ 23 const safeTxHash = await protocolKitOwner1.getTransactionHash(safeTransaction) _ 23 const signature = await protocolKitOwner1.signHash(safeTxHash) _ 23 _ 23 // Propose transaction to the service _ 23 await apiKit.proposeTransaction({ _ 23 safeAddress: SAFE_ADDRESS, _ 23 safeTransactionData: safeTransaction.data, _ 23",
    "title": "Propose and confirm transactions – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit",
    "breadcrumbs": [
      {
        "text": "API Kit",
        "url": "/sdk/api-kit"
      }
    ],
    "depth": 2,
    "section_titles": [
      "Propose and confirm transactions",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Setup",
      "Initialize the API Kit",
      "Initialize the Protocol Kit",
      "Propose a transaction to the service",
      "Retrieve the pending transactions",
      "Confirm the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions#chunk-1",
    "url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "safeTxHash, _ 23 senderAddress: OWNER_1_ADDRESS, _ 23 senderSignature: signature.data _ 23 }) Retrieve the pending transactions Different methods in the API Kit are available to retrieve pending transactions depending on the situation. To retrieve a transaction given the Safe transaction hash use the method that's not commented. _ 10 const transaction = await service.getTransaction(safeTxHash) _ 10 // const transactions = await service.getPendingTransactions() _ 10 // const transactions = await service.getIncomingTransactions() _ 10 // const transactions = await service.getMultisigTransactions() _ 10 // const transactions = await service.getModuleTransactions() _ 10 // const transactions = await service.getAllTransactions() Confirm the transaction In this step you need to sign the transaction with the Protocol Kit and submit the signature to the Safe Transaction Service using the confirmTransaction method. _ 14 const protocolKitOwner2 = await Safe.init({ _ 14 provider: RPC_URL, _ 14 signer: OWNER_2_PRIVATE_KEY, _ 14 safeAddress: SAFE_ADDRESS _ 14 }) _ 14 _ 14 const safeTxHash = transaction.transactionHash _ 14 const signature = await protocolKitOwner2.signHash(safeTxHash) _ 14 _ 14 // Confirm the Safe transaction _ 14 const signatureResponse = await apiKit.confirmTransaction( _ 14 safeTxHash, _ 14 signature.data _ 14 ) The Safe transaction is now ready to be executed. This can be done using the Safe{Wallet} web (opens in a new tab) interface, the Protocol Kit , the Safe CLI or any other tool that's available. API Kit Migrate to v1 Was this page helpful? Report issue",
    "title": "Propose and confirm transactions – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit",
    "breadcrumbs": [
      {
        "text": "API Kit",
        "url": "/sdk/api-kit"
      }
    ],
    "depth": 2,
    "section_titles": [
      "Propose and confirm transactions",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Imports",
      "Setup",
      "Initialize the API Kit",
      "Initialize the Protocol Kit",
      "Propose a transaction to the service",
      "Retrieve the pending transactions",
      "Confirm the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/glossary#chunk-0",
    "url": "https://docs.safe.global/home/glossary",
    "chunk_index": 0,
    "total_chunks": 4,
    "text": "Home Glossary Glossary This glossary contains terms and definitions used throughout the Safe documentation. Account Abstraction Account Abstraction is a new paradigm that focuses on improving the user experience when interacting with the blockchain by replacing the use of externally-owned accounts with smart accounts . Some Account Abstraction features are: Elimination of seed phrase reliance Ease of multichain interactions Account recovery Gasless transactions Transaction batching See also: Account Abstraction (opens in a new tab) on ethereum.org ERC-4337: Account Abstraction (opens in a new tab) on erc4337.io Bundler Bundlers are nodes that participate in the ERC-4337 standard who bundle user operations from an alternative mempool and submit them to the blockchain. Bundlers pay for the associated transaction fees in advance, which are later refunded by the user account who proposed the user operation or by a Paymaster . See also: Bundling (opens in a new tab) process on ethereum.org Bundlers (opens in a new tab) on erc4337.io EIP-1271 The EIP-1271 (opens in a new tab) is an Ethereum Improvement Proposal (opens in a new tab) that proposes a standard way for any contract to verify whether a signature on behalf of a given contract is valid. This is possible via the implementation of a isValidSignature(hash, signature) function on the signing contract, which can be called to validate a signature. EIP-712 The EIP-712 (opens in a new tab) is an Ethereum Improvement Proposal that proposes a standard for hashing and signing of typed structured data instead of just bytestrings. EntryPoint According to the ERC-4337 , the EntryPoint is the singleton smart contract that processes bundles of UserOperation objects sent by the Bundlers . It verifies and executes them by calling the target smart accounts according to predefined rules. See also: EntryPoint (opens in a new tab) on ethereum.org Bundlers (opens in a new tab) on erc4337.io ERC-4337 The ERC-4337 (opens in a new tab) is an Ethereum Request for Comments (opens in a new tab) that introduces a higher-layer pseudo-transaction object called UserOperation . Users send UserOperation objects into a separate mempool. A special class of actor called Bundlers package up a set of these objects into a transaction making a handleOps call to a special contract, and that transaction then gets included in a block. See also: ERC-4337 Documentation (opens in a new tab) on erc4337.io Externally-Owned Account An externally-owned account (also known as EOA) is one of the two types of Ethereum accounts. A private key controls it; it has no code, and users can send messages by creating and signing Ethereum transactions. See also: Ethereum Accounts (opens in a new tab) on ethereum.org Ethereum Whitepaper (opens in a new tab) on ethereum.org Gasless Transaction Gasless transactions (also known as meta-transactions) are Ethereum transactions that are executed by a third party called relayer on behalf of a smart account to abstract the use of gas. Users must sign a message (instead of the transaction itself) with information about the transaction they want to execute. A relayer will create the Ethereum",
    "title": "Glossary – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/erc-4337/4337-safe",
    "breadcrumbs": [],
    "depth": 2,
    "section_titles": [
      "Glossary",
      "Account Abstraction",
      "Bundler",
      "EIP-1271",
      "EIP-712",
      "EntryPoint",
      "ERC-4337",
      "Externally-Owned Account",
      "Gasless Transaction",
      "Multi-signature",
      "Network",
      "Owner",
      "Paymaster",
      "Relayer",
      "Safe{DAO}",
      "Safe{Wallet}",
      "Safe Apps",
      "Safe Guard",
      "Safe Module",
      "Smart Account",
      "Transaction",
      "Threshold",
      "UserOperation",
      "Wallet"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/glossary#chunk-1",
    "url": "https://docs.safe.global/home/glossary",
    "chunk_index": 1,
    "total_chunks": 4,
    "text": "transaction, sign and execute it, and pay for the gas costs. The main benefit is that users can interact with the blockchain without holding the native token in their account. See also: Relay Kit documentation on docs.safe.global Multi-signature A multi-signature account is a smart account that allows you to customize ownership and control structures according to your needs. Multiple externally-owned accounts can be designated as owners, and you can specify how many of those owners must approve a transaction before it is executed. Possible configurations: 0/0 Safe : An account with no owners, controlled entirely by Safe Modules . This configuration is typically used for automation or executing conditional functions within a protocol's architecture. 1/1 Safe : An account with a single owner who has full control and ownership. Ideal for setting up a smart account with a single EOA that can take advantage of all smart account functionalities. Warning: If the owner loses access to their private key, there is no way to recover the account. A recovery plan or an emergency mechanism to handle key loss should be set. N/N Safe : An account with multiple owners, all of whom must approve a transaction before it is executed. This setup is perfect for scenarios where equal ownership and responsibility among all participants are required. Warning: If any owner loses their private key, the Safe may become locked and unable to process transactions. A recovery plan or an emergency mechanism to handle key loss should be set. N/M Safe : An account with multiple owners, but only a subset of them is required to approve a transaction. This configuration is useful when you want to distribute responsibility while maintaining flexibility in decision-making. How does it work? Multi-signature is a function native to Safe smart contract. The contract stores the owners' addresses and the threshold needed to execute a transaction in the smart contract storage. When the user wants to perform a transaction, they send a payload containing the transaction details and the owners' signatures to the Safe account. The safe account iterates through the signatures to verify that the payload has been signed correctly and by the correct owners. Benefits: Enhanced Security : Reduces the risk associated with single points of failure, protecting your assets even if a key is lost or compromised. Customizable : Tailor each smart account to fit your specific needs, allowing you to set up configurations that work best for your particular use case. Interoperable : Flexibly assign a variety of signers as owners, including: Hardware wallets such as Leger (opens in a new tab) or Trezor (opens in a new tab) . Software wallets such as Trust (opens in a new tab) or Metamask (opens in a new tab) . MPC wallets such as Fireblocks (opens in a new tab) or Zengo (opens in a new tab) . Another smart contract account, such as Safe. Wallets generated via Social Logins or Passkeys. Upgradable : Easily adjust the number of owners and the signing threshold",
    "title": "Glossary – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/erc-4337/4337-safe",
    "breadcrumbs": [],
    "depth": 2,
    "section_titles": [
      "Glossary",
      "Account Abstraction",
      "Bundler",
      "EIP-1271",
      "EIP-712",
      "EntryPoint",
      "ERC-4337",
      "Externally-Owned Account",
      "Gasless Transaction",
      "Multi-signature",
      "Network",
      "Owner",
      "Paymaster",
      "Relayer",
      "Safe{DAO}",
      "Safe{Wallet}",
      "Safe Apps",
      "Safe Guard",
      "Safe Module",
      "Smart Account",
      "Transaction",
      "Threshold",
      "UserOperation",
      "Wallet"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/glossary#chunk-2",
    "url": "https://docs.safe.global/home/glossary",
    "chunk_index": 2,
    "total_chunks": 4,
    "text": "for your account whenever Key Rotation : Rotate ownership of any accounts at any time, maintaining security while adapting to changes. Shared Control : Grant shared access and control of your account to multiple individuals, ensuring collaborative management. Auditability : Maintain a transparent, auditable record of who signed each transaction and when providing clear accountability for all account activities. Network A blockchain network is a collection of interconnected computers that utilize a blockchain protocol for communication. Decentralized networks allow users to send transactions, that are processed on a distributed ledger with a consensus mechanism ensuring the batching, verification, and acceptance of data into blocks. This structure enables the development of applications without the need for a central authority or server. See also: Networks (opens in a new tab) on ethereum.org Owner A Safe owner is one of the accounts that control a given Safe. Only owners can manage the configuration of a Safe and approve transactions. They can be either externally-owned accounts or smart accounts . The threshold of a Safe defines how many owners need to approve a Safe transaction to make it executable. See also: OwnerManager.sol (opens in a new tab) on github.com Paymaster Paymasters are smart contracts that allow an account to pay for the gas fees of other users. This feature abstracts away the concept of gas fees by subsidizing them for users, allowing them to pay with ERC-20 tokens, and enables many other use cases. See also: Paymasters (opens in a new tab) on ethereum.org Paymasters (opens in a new tab) on erc4337.io Relayer A relayer is a third-party service acting as an intermediary between users' accounts and blockchain networks . It executes transactions on behalf of users and covers the associated execution costs, which may or may not be claimed. See also: What's Relaying? (opens in a new tab) on docs.gelato.network Safe{DAO} The Safe{DAO} is the Decentralized Autonomous Organization (opens in a new tab) (DAO) that aims to foster a vibrant ecosystem of applications and wallets leveraging Safe accounts. This will be achieved through data-backed discussions, grants, and ecosystem investments, as well as providing developer tools and infrastructure. See also: Safe{DAO} Forum (opens in a new tab) Safe{DAO} Governance process (opens in a new tab) on forum.safe.global Safe{DAO} Proposals (opens in a new tab) on snapshot.org Safe{Wallet} Safe{Wallet} (opens in a new tab) is the official user interface to manage Safe accounts. See also: Getting Started with Safe{Wallet} (opens in a new tab) on help.safe.global Safe Apps Safe Apps are web applications that run in the Safe Apps marketplace. They support Safe, use the Safe Apps SDK to interact with it, and aren't owned, controlled, maintained, or audited by Safe. See also: Safe Apps SDK (opens in a new tab) on GitHub Safe Guard A Safe Guard is a smart contract that adds restrictions on top of the n-out-of-m scheme that Safe accounts offer. They make checks before and after the execution of a Safe transaction. See also: Safe Guards documentation on docs.safe.global Zodiac",
    "title": "Glossary – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/erc-4337/4337-safe",
    "breadcrumbs": [],
    "depth": 2,
    "section_titles": [
      "Glossary",
      "Account Abstraction",
      "Bundler",
      "EIP-1271",
      "EIP-712",
      "EntryPoint",
      "ERC-4337",
      "Externally-Owned Account",
      "Gasless Transaction",
      "Multi-signature",
      "Network",
      "Owner",
      "Paymaster",
      "Relayer",
      "Safe{DAO}",
      "Safe{Wallet}",
      "Safe Apps",
      "Safe Guard",
      "Safe Module",
      "Smart Account",
      "Transaction",
      "Threshold",
      "UserOperation",
      "Wallet"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/glossary#chunk-3",
    "url": "https://docs.safe.global/home/glossary",
    "chunk_index": 3,
    "total_chunks": 4,
    "text": "Guards (opens in a new tab) on zodiac.wiki Get the enabled Safe Guard and enable a Safe Guard with the Safe{Core} SDK on docs.safe.global Safe Module A Safe Module is a smart contract that adds functionality to Safe while separating module logic from Safe core contracts. See also: Safe Modules documentation on docs.safe.global Safe Modules repository (opens in a new tab) on github.com Zodiac Modules (opens in a new tab) on zodiac.wiki Get the enabled Safe Modules and enable a Safe Module with the Safe{Core} SDK on docs.safe.global Smart Account A smart account (also known as a smart contract account) leverages the programmability of smart contracts to extend its functionality and improve its security in comparison with externally-owned accounts . Smart accounts are controlled by one or multiple externally-owned accounts or other smart accounts, and all transactions have to be initiated by one of those. Some common features that smart accounts offer to their users are: Multi-signature scheme Transaction batching Account recovery Gasless transactions Safe is one of the most trusted implementations of a smart account. Transaction A transaction is an action initiated by an externally-owned account to update the state of the EVM network. Transaction objects must be signed using the sender's private key, require a fee, and be included in a validated block. A Safe transaction is a transaction sent to a Safe Proxy contract calling the execTransaction (opens in a new tab) method. See also: Transactions (opens in a new tab) on ethereum.org Threshold The threshold of a Safe account is a crucial configuration element that enables using Safe as a multi-signature smart account. It defines the number of required confirmations from the Safe owners a (Safe) transaction must have to be executable. See also: Get the threshold and change the threshold of a Safe with the Safe{Core} SDK on docs.safe.global UserOperation UserOperation objects are pseudo-transaction objects introduced by the ERC-4337 that users send to the UserOperation mempool. They wrap the users' transactions, and are sent to the EntryPoint contract by Bundlers . See also: UserOperations (opens in a new tab) on ethereum.org UserOperation mempool (opens in a new tab) on erc4337.io Wallet A wallet is an interface or application that gives users control over their blockchain account. Wallets allow users to sign in to applications, read their account balance, send transactions, and verify their identity. See also: Ethereum Wallets (opens in a new tab) on ethereum.org AI agent swaps on Uniswap Support Was this page helpful? Report issue",
    "title": "Glossary – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/erc-4337/4337-safe",
    "breadcrumbs": [],
    "depth": 2,
    "section_titles": [
      "Glossary",
      "Account Abstraction",
      "Bundler",
      "EIP-1271",
      "EIP-712",
      "EntryPoint",
      "ERC-4337",
      "Externally-Owned Account",
      "Gasless Transaction",
      "Multi-signature",
      "Network",
      "Owner",
      "Paymaster",
      "Relayer",
      "Safe{DAO}",
      "Safe{Wallet}",
      "Safe Apps",
      "Safe Guard",
      "Safe Module",
      "Smart Account",
      "Transaction",
      "Threshold",
      "UserOperation",
      "Wallet"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/erc-4337/overview#chunk-0",
    "url": "https://docs.safe.global/advanced/erc-4337/overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced ERC-4337 Overview What is ERC-4337? ERC-4337 addresses the challenges associated with account abstraction without requiring changes to the consensus-layer protocol. It serves as a transaction relayer for smart accounts like Safe. It does so by introducing a pseudo-transaction object called a UserOperation , which sends a transaction on behalf of the user. Nodes in Ethereum can act as a Bundler, which picks up multiple user operations and packs them into a single transaction known as a bundle transaction. The bundle transactions are then sent to a global smart contract on Ethereum (of which there is only one) called the EntryPoint . ERC-4337 enhances usability by introducing paymasters. This decentralized mechanism allows users to pay gas fees using ERC-20 tokens (like USDC) instead of native tokens like ETH or to seek a third party to cover their gas fees entirely. ERC-4337 is currently under development and still needs to be finalized, so developers should pay attention to new changes that may occur. Why ERC-4337? ERC-4337 provides a bunch of benefits along with all the inherent advantages of utilizing smart accounts: Flexibility of payments Users can decide how to pay the gas fees. Use native tokens like ETH, ERC-20 tokens, or even sponsored transactions. Freedom of Authentication It enables the use of different authentication mechanisms, such as multi-signature, passkeys, and future quantum-proof cryptography. Decentralization It's supported by various providers, avoiding lock-in to a single-relayer technology, offering an anti-fragile approach with no single point of failure. Further reading Official documentation (opens in a new tab) EIP document (opens in a new tab) Reference Safe and ERC-4337 Was this page helpful? Report issue",
    "title": "What is ERC-4337? – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/erc-4337/4337-safe",
    "breadcrumbs": [],
    "depth": 2,
    "section_titles": [
      "What is ERC-4337?",
      "Why ERC-4337?",
      "Flexibility of payments",
      "Freedom of Authentication",
      "Decentralization",
      "Further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/config-service-configuration/add-or-edit-group#chunk-0",
    "url": "https://docs.safe.global/config-service-configuration/add-or-edit-group",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Config Service Reference Add or edit groups Add or edit user groups Add (or edit) a new group of permissions to the configuration, so they can be attributed to users. Usage You can add a new group by visiting this address: http://localhost:8000/cfg/admin/auth/group/add/ Parameters Name The name of the permission group. Permissions Individual permissions to be added to the group. You can select as many as you want from the left column Available permissions and move them to the right column Selected permissions . Overview Add users Was this page helpful? Report issue",
    "title": "Add or edit user groups – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/config-service-configuration/overview",
    "breadcrumbs": [],
    "depth": 2,
    "section_titles": [
      "Add or edit user groups",
      "Usage",
      "Parameters",
      "Name",
      "Permissions"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/overview#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/overview",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference Overview API Kit Reference The API Kit facilitates the interaction with the Safe Transaction Service API . Install dependencies To add the API Kit to your project, run: pnpm npm yarn _ 10 pnpm add @safe-global/api-kit ← Go Back constructor Was this page helpful? Report issue",
    "title": "API Kit Reference – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "API Kit Reference",
      "Install dependencies"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/proposetransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/proposetransaction",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "API Kit Reference proposeTransaction proposeTransaction Creates a new multi-signature transaction with its confirmations and stores it in the Safe Transaction Service. Usage example.ts setup.ts _ 24 import { ProposeTransactionProps } from '@safe-global/api-kit' _ 24 import { OperationType, SafeTransactionData } from '@safe-global/types-kit' _ 24 import { apiKit } from './setup.ts' _ 24 _ 24 const safeTransactionData: SafeTransactionData = { _ 24 operation: OperationType.Call, _ 24 safeTxGas: '0x...', _ 24 baseGas: '123', _ 24 gasPrice: '123', _ 24 gasToken: '0x...', _ 24 refundReceiver: '0x...', _ 24 nonce: '10' _ 24 } _ 24 _ 24 const config: ProposeTransactionProps = { _ 24 safeAddress: '0x...', _ 24 safeTxHash: '0x...', _ 24 safeTransactionData, _ 24 senderAddress: '0x...', _ 24 senderSignature: '0x...', _ 24 origin: 'App name' // Optional _ 24 } _ 24 _ 24 await apiKit.proposeTransaction(config) Parameters config.safeAddress Type: string The Safe address. _ 10 await apiKit.proposeTransaction({ _ 10 safeAddress: '0x...', _ 10 safeTxHash: '0x...', _ 10 safeTransactionData, _ 10 senderAddress: '0x...', _ 10 senderSignature: '0x...' _ 10 }) config.safeTxHash Type: string The Safe transaction hash of the proposed transaction. _ 10 await apiKit.proposeTransaction({ _ 10 safeAddress: '0x...', _ 10 safeTxHash: '0x...', _ 10 safeTransactionData, _ 10 senderAddress: '0x...', _ 10 senderSignature: '0x...' _ 10 }) config.safeTransactionData.operation Type: OperationType The operation of the proposed transaction. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash: '0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.safeTransactionData.safeTxGas Type: string The Safe transaction hash of the proposed transaction. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash: '0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.safeTransactionData.baseGas Type: string The base gas of the proposed transaction. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash: '0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.safeTransactionData.gasPrice Type: string The gas price of the proposed transaction. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash: '0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.safeTransactionData.gasToken Type: string The address of the ERC-20 token sent to the refund receiver. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash:",
    "title": "proposeTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "proposeTransaction",
      "Usage",
      "Parameters",
      "config.safeAddress",
      "config.safeTxHash",
      "config.safeTransactionData.operation",
      "config.safeTransactionData.safeTxGas",
      "config.safeTransactionData.baseGas",
      "config.safeTransactionData.gasPrice",
      "config.safeTransactionData.gasToken",
      "config.safeTransactionData.refundReceiver",
      "config.safeTransactionData.nonce",
      "config.senderAddress",
      "config.senderSignature",
      "config.origin(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/proposetransaction#chunk-1",
    "url": "https://docs.safe.global/reference-sdk-api-kit/proposetransaction",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "'0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.safeTransactionData.refundReceiver Type: string The address of the refund receiver of the proposed transaction. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash: '0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.safeTransactionData.nonce Type: string The nonce of the proposed transaction. _ 15 await apiKit.proposeTransaction({ _ 15 safeAddress: '0x...', _ 15 safeTxHash: '0x...', _ 15 safeTransactionData: { _ 15 operation: OperationType.Call, _ 15 safeTxGas: '0x...', _ 15 baseGas: '123', _ 15 gasPrice: '123', _ 15 gasToken: '0x...', _ 15 refundReceiver: '0x...', _ 15 nonce: '10' _ 15 }, _ 15 senderAddress: '0x...', _ 15 senderSignature: '0x...' _ 15 }) config.senderAddress Type: string The address of the signer account that proposes the transaction. _ 10 await apiKit.proposeTransaction({ _ 10 safeAddress: '0x...', _ 10 safeTxHash: '0x...', _ 10 safeTransactionData, _ 10 senderAddress: '0x...', _ 10 senderSignature: '0x...' _ 10 }) config.senderSignature Type: string The signature of the sender, the signer account that proposes the transaction. _ 10 await apiKit.proposeTransaction({ _ 10 safeAddress: '0x...', _ 10 safeTxHash: '0x...', _ 10 safeTransactionData, _ 10 senderAddress: '0x...', _ 10 senderSignature: '0x...' _ 10 }) config.origin (Optional) Type: string The name of the application that proposes the transaction. _ 10 await apiKit.proposeTransaction({ _ 10 safeAddress: '0x...', _ 10 safeTxHash: '0x...', _ 10 safeTransactionData, _ 10 senderAddress: '0x...', _ 10 senderSignature: '0x...', _ 10 origin: 'App name' _ 10 }) estimateSafeTransaction getIncomingTransactions Was this page helpful? Report issue",
    "title": "proposeTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "proposeTransaction",
      "Usage",
      "Parameters",
      "config.safeAddress",
      "config.safeTxHash",
      "config.safeTransactionData.operation",
      "config.safeTransactionData.safeTxGas",
      "config.safeTransactionData.baseGas",
      "config.safeTransactionData.gasPrice",
      "config.safeTransactionData.gasToken",
      "config.safeTransactionData.refundReceiver",
      "config.safeTransactionData.nonce",
      "config.senderAddress",
      "config.senderSignature",
      "config.origin(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/confirmtransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/confirmtransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference confirmTransaction confirmTransaction Adds a confirmation for a Safe transaction. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeTxHash = '0x...' _ 10 _ 10 const signature = '0x...' _ 10 _ 10 const signature = await apiKit.confirmTransaction(safeTxHash, signature) Returns Promise<SignatureResponse> The signature. Parameters safeTxHash Type: string The hash of the Safe transaction that will be confirmed. _ 10 const signature = await apiKit.confirmTransaction( _ 10 '0x...', _ 10 '0x...' _ 10 ) signature Type: string The signature of the transaction. _ 10 const signature = await apiKit.confirmTransaction( _ 10 '0x...', _ 10 '0x...' _ 10 ) getTransactionConfirmations getSafeInfo Was this page helpful? Report issue",
    "title": "confirmTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "confirmTransaction",
      "Usage",
      "Returns",
      "Parameters",
      "safeTxHash",
      "signature"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/executetransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/executetransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Transactions executeTransaction executeTransaction Executes a Safe transaction. Usage example.ts setup.ts _ 30 import { _ 30 MetaTransactionData, _ 30 OperationType, _ 30 TransactionOptions _ 30 } from '@safe-global/types-kit' _ 30 import { protocolKit } from './setup.ts' _ 30 _ 30 const transactions: MetaTransactionData[] = [{ _ 30 to: '0x...', _ 30 value: '123', _ 30 data: '0x', _ 30 operation: OperationType.Call // Optional _ 30 }] _ 30 const safeTransaction = await protocolKit.createTransaction({ _ 30 transactions _ 30 }) _ 30 _ 30 const options: TransactionOptions = { _ 30 from: '0x...', // Optional _ 30 gasLimit: '123', // Optional _ 30 gasPrice: '123', // Optional _ 30 maxFeePerGas: '123', // Optional _ 30 maxPriorityFeePerGas: '123', // Optional _ 30 nonce: 123 // Optional _ 30 } _ 30 _ 30 const txResponse = await protocolKit.executeTransaction( _ 30 safeTransaction, _ 30 options // Optional _ 30 ) Parameters safeTransaction Type : SafeTransaction (opens in a new tab) The Safe transaction. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction _ 10 ) options.from (Optional) Type : string The address of the transaction sender. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 from: '0x...' _ 10 } _ 10 ) options.gasLimit (Optional) Type : number | string | bigint The maximum amount of gas the transaction can use. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 gasLimit: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : number | string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.maxFeePerGas (Optional) Type : number | string The maximum fee per gas the sender is willing to pay. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 maxFeePerGas: '123' _ 10 } _ 10 ) options.maxPriorityFeePerGas (Optional) Type : number | string The maximum priority fee per gas the sender is willing to pay. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 maxPriorityFeePerGas: '123' _ 10 } _ 10 ) options.nonce (Optional) Type : number The nonce of the transaction. _ 10 const txResponse = await protocolKit.executeTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<TransactionResult> The Safe transaction to execute. createTransaction getTransactionHash Was this page helpful? Report issue",
    "title": "executeTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "executeTransaction",
      "Usage",
      "Parameters",
      "safeTransaction",
      "options.from(Optional)",
      "options.gasLimit(Optional)",
      "options.gasPrice(Optional)",
      "options.maxFeePerGas(Optional)",
      "options.maxPriorityFeePerGas(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-reference/tx-service-commands#chunk-0",
    "url": "https://docs.safe.global/advanced/cli-reference/tx-service-commands",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced Reference Commands specific to the tx-service mode Commands specific to the tx-service mode Here's a reference for commands specific to the tx-service mode. Return balance Returns a list of balances for ERC-20 tokens and ether. _ 10 balances Transactions Return transaction history Returns history of multi-signature transactions (including pending). _ 10 history Execute pending transaction Execute a pending transaction with enough signatures. _ 10 execute-tx <safe-tx-hash> Sign transaction Sign a transaction with the loaded owners for the provided Safe transaction hash. _ 10 sign-tx <safe-tx-hash> Sign message Sign the string message provided by the standard input or the EIP-712 provided by the file. _ 10 sign_message [--eip191_message <str>] [--eip712_path <file-path>] Batch transactions Batch transactions into one multi-signature transaction using the provided safe-nonce. Any safe-tx can be used, like transactions from other Safe accounts, already executed transactions, pending execution, etc. The only limitation is that the transactions from other networks cannot be used. The batching order will follow the same order of the safe-tx-hashes provided. _ 10 batch-txs <safe-nonce> <safe-tx-hash> [ <safe-tx-hash> ... ] Remove proposed transaction Removes a proposed non-executed transaction with the owner's signature that proposed the transaction. _ 10 remove_proposed_transaction <safe_tx_hsh> Delegates Return delegates Returns a list of delegates for the Safe. A delegate can be used when you trust an address to post transactions to the tx-service on your behalf. If a transaction is not trusted (posted to the service and not signed by a delegate or an owner of the Safe), it will be stored in the service but not shown in Safe {Wallet}. _ 10 get_delegates Add delegate Adds a new delegate address for the owner of the Safe. _ 10 add_delegate <address> <label> <owner-address> Remove delegate Removes a delegate address from the Safe. _ 10 remove_delegate <address> <owner-address> ⚠️ Only use the following operation if you are sure about what you are doing, as they can result in all your funds getting lost. Drain account Sends all ether and ERC-20 funds to the provided account. _ 10 drain <address> Common commands for both modes Commands available in unattended mode Was this page helpful? Report issue",
    "title": "Commands specific to the tx-service mode – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [
      {
        "text": "Reference",
        "url": "/advanced/cli-reference"
      }
    ],
    "depth": 3,
    "section_titles": [
      "Commands specific to thetx-servicemode",
      "Return balance",
      "Transactions",
      "Return transaction history",
      "Execute pending transaction",
      "Sign transaction",
      "Sign message",
      "Batch transactions",
      "Remove proposed transaction",
      "Delegates",
      "Return delegates",
      "Add delegate",
      "Remove delegate",
      "Drain account"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v1#chunk-0",
    "url": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v1",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK API Kit Guides Migrate to v1 Migrate to v1 This guide references the major changes between safe-service-client and api-kit v1 to help those migrating an existing application. Note: Follow this guide before migrating to api-kit v2. After completing this guide, you can remove @safe-global/safe-service-client from your package.json . Adding the new dependency To add the API Kit to your project, run the following: _ 10 yarn add @safe-global/api-kit@1.3.1 Change your initialization like this: _ 15 // old _ 15 import SafeServiceClient from '@safe-global/safe-service-client' _ 15 _ 15 const safeService = new SafeServiceClient({ _ 15 txServiceUrl: 'https://your-transaction-service-url', _ 15 ethAdapter _ 15 }) _ 15 _ 15 // new _ 15 import SafeApiKit from '@safe-global/api-kit' _ 15 _ 15 const apiKit = new SafeApiKit({ _ 15 txServiceUrl: 'https://your-transaction-service-url', _ 15 ethAdapter _ 15 }) getSafeDelegates() The getSafeDelegates was updated to accept more filtering parameters. Now, it accepts an object with multiple properties instead of only the safeAddress parameter. _ 10 const delegateConfig: GetSafeDelegateProps = { _ 10 safeAddress, // Optional _ 10 delegateAddress, // Optional _ 10 delegatorAddress, // Optional _ 10 label, // Optional _ 10 limit, // Optional _ 10 offset // Optional _ 10 } _ 10 const delegates: SafeDelegateListResponse = await apiKit.getSafeDelegates(delegateConfig) addSafeDelegate() Parameter object properties were updated as follows: _ 18 // old _ 18 const delegateConfig: SafeDelegateConfig = { _ 18 safe, _ 18 delegate, _ 18 label, _ 18 signer _ 18 } _ 18 await safeService.addSafeDelegate(delegateConfig) _ 18 _ 18 // new _ 18 const delegateConfig: AddSafeDelegateProps = { _ 18 safeAddress, // Optional _ 18 delegateAddress, _ 18 delegatorAddress, _ 18 label, _ 18 signer _ 18 } _ 18 await apiKit.addSafeDelegate(delegateConfig) removeAllSafeDelegates() The method was deprecated and removed. removeSafeDelegate() Parameter object properties were updated as follows: _ 15 // old _ 15 const delegateConfig: SafeDelegateDeleteConfig = { _ 15 safe, _ 15 delegate, _ 15 signer _ 15 } _ 15 await safeService.removeSafeDelegate(delegateConfig) _ 15 _ 15 // new _ 15 const delegateConfig: DeleteSafeDelegateProps = { _ 15 delegateAddress, _ 15 delegatorAddress, _ 15 signer _ 15 } _ 15 await apiKit.removeSafeDelegate(delegateConfig) getBalances() The method was deprecated and removed. getUSDBalances() The method was deprecated and removed. getCollectibles() The method was deprecated and removed. Propose and Confirm Transactions Migrate to v2 Was this page helpful? Report issue",
    "title": "Migrate to v1 – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/propose-and-confirm-transactions",
    "breadcrumbs": [
      {
        "text": "API Kit",
        "url": "/sdk/api-kit"
      }
    ],
    "depth": 3,
    "section_titles": [
      "Migrate to v1",
      "Adding the new dependency",
      "getSafeDelegates()",
      "addSafeDelegate()",
      "removeAllSafeDelegates()",
      "removeSafeDelegate()",
      "getBalances()",
      "getUSDBalances()",
      "getCollectibles()"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit#chunk-0",
    "url": "https://docs.safe.global/sdk/relay-kit",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK Relay Kit Relay Kit The Relay Kit enables transaction relaying with Safe, and allows users to pay for the transaction fees from their Safe account using the blockchain native token, ERC-20 tokens, or to get their transactions sponsored. @safe-global/relay-kit The following guides show how to use the Relay Kit and integrate it into your project by using one of the packs: Integrate ERC-4337 Safe accounts Integrate Gelato Relay Resources Relay Kit on GitHub (opens in a new tab) Reference ERC-4337 Safe SDK Was this page helpful? Report issue",
    "title": "Relay Kit – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "Relay Kit",
      "@safe-global/relay-kit",
      "Resources"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-guards",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced Safe Guards Safe Guards ℹ️ Safe Guards are introduced with Safe contracts version 1.3.0 (opens in a new tab) . Safe Guards are used when there are restrictions on top of the n -out-of- m scheme. Safe Guards can make checks before and after a Safe transaction. The check before a transaction can programmatically check all the parameters of the respective transaction before execution. The check after a transaction is called at the end of the transaction execution and can be used to perform checks on the final state of the Safe. To read about different examples of Safe Guards, see the implementations from Zodiac (opens in a new tab) and Yearn (opens in a new tab) . ‼️ Important: Since a Safe Guard has full power to block Safe transaction execution, a broken Guard can cause a denial of service for a Safe. Make sure to audit the Guard code and pay attention to recovery mechanisms. Smart Account Modules Tutorial Smart Account Guard Tutorial Was this page helpful? Report issue",
    "title": "Safe Guards – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "Safe Guards"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/getguard#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/getguard",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Guards getGuard getGuard Returns the enabled Safe Guard or 0x0000000000000000000000000000000000000000 if no guards are enabled. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const guardAddress = await protocolKit.getGuard() Returns Promise<string> The enabled Safe Guard or 0x0000000000000000000000000000000000000000 if no guards are enabled. createEnableGuardTx createDisableFallbackHandlerTx Was this page helpful? Report issue",
    "title": "getGuard – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "getGuard",
      "Usage",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/createenableguardtx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/createenableguardtx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Guards createEnableGuardTx createEnableGuardTx Returns a Safe transaction to enable a Safe Guard. Usage example.ts setup.ts _ 18 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 18 import { protocolKit } from './setup.ts' _ 18 _ 18 const guardAddress = '0x...' _ 18 _ 18 const options: SafeTransactionOptionalProps = { _ 18 safeTxGas: '123', // Optional _ 18 baseGas: '123', // Optional _ 18 gasPrice: '123', // Optional _ 18 gasToken: '0x...', // Optional _ 18 refundReceiver: '0x...', // Optional _ 18 nonce: 123 // Optional _ 18 } _ 18 _ 18 const safeTransaction = await protocolKit.createEnableGuardTx( _ 18 guardAddress, _ 18 options // Optional _ 18 ) Parameters guardAddress Type : string The Safe Guard address to enable. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...' _ 10 ) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createEnableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to enable the Safe Guard. createDisableGuardTx getGuard Was this page helpful? Report issue",
    "title": "createEnableGuardTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "createEnableGuardTx",
      "Usage",
      "Parameters",
      "guardAddress",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-modules",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced Safe Modules Safe Modules Overview Safe Modules are smart contract extensions that enhance the functionality of Safe Smart Accounts by enabling additional features. They operate alongside Safe's core multi-signature mechanism, allowing automated actions or custom transaction logic. Multiple modules can be enabled simultaneously, offering highly customizable setups tailored to specific needs. These modules extend Safe contracts while keeping their logic separate from the core contracts. Although a basic Safe does not require any modules, they can be added or removed with confirmation from the required threshold of owners. Events are emitted whenever a module is added, removed, or when a module transaction succeeds or fails. Safe Modules offer several benefits: Automation : Enable recurring transactions, DeFi interactions, or scheduled payments without manual approvals. Enhanced Security : Impose restrictions such as whitelists, rate limits, or spending caps to control fund usage. Scalability : Support complex operations by delegating responsibilities to specialized modules. Flexibility : Safes can be tailored to unique workflows or integrated with broader frameworks like DAOs or DeFi protocols. By decoupling these features from the Safe Smart Account contract, modules allow developers to build and deploy new capabilities without compromising the Safe Smart Account's security guarantees. Safe Modules can include daily spending allowances, amounts that can be spent without the approval of other owners, recurring transactions modules, and standing orders performed on a recurring date. For example, paying your rent or social recovery modules may allow you to recover a Safe if you lose access to owner accounts. How Safe Modules Work Enabling a Module : A module is added to the Safe via the enableModule() function. The Safe maintains an internal registry of authorized modules. Transaction Execution : A user (can be a contract or an EOA) interacts with the Module by triggering a call to a module function. The Module validates the request, ensuring the user is authorized and the operation complies with the Module's rules. If valid, the Module calls execTransactionFromModule on the Safe which executes the transaction. How to create a Safe Module A great way to understand how Safe Modules work is by creating one. An excellent place to start is Safe Modding 101: Create your own Safe Module (opens in a new tab) . Examples Safe Modules (opens in a new tab) Zodiac-compliant modules (opens in a new tab) Pimlico (opens in a new tab) ‼️ Safe Modules can be a security risk since they can execute arbitrary transactions. Only add trusted and audited modules to a Safe. A malicious module can take over a Safe. Reference Safe Module Reference Concepts Smart Account Modules Tutorial Was this page helpful? Report issue",
    "title": "Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "Safe Modules",
      "Overview",
      "How Safe Modules Work",
      "How to create a Safe Module",
      "Examples",
      "Reference"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/getmodules#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/getmodules",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Modules getModules getModules Returns the list of addresses of all the enabled Safe Modules. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const moduleAddresses = await protocolKit.getModules() Returns Promise<string[]> The list of addresses of all the enabled Safe Modules. createEnableModuleTx isModuleEnabled Was this page helpful? Report issue",
    "title": "getModules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "getModules",
      "Usage",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/createenablemoduletx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/createenablemoduletx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Modules createEnableModuleTx createEnableModuleTx Returns a Safe transaction to enable a Safe Module. Usage example.ts setup.ts _ 18 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 18 import { protocolKit } from './setup.ts' _ 18 _ 18 const moduleAddress = '0x...' _ 18 _ 18 const options: SafeTransactionOptionalProps = { _ 18 safeTxGas: '123', // Optional _ 18 baseGas: '123', // Optional _ 18 gasPrice: '123', // Optional _ 18 gasToken: '0x...', // Optional _ 18 refundReceiver: '0x...', // Optional _ 18 nonce: 123 // Optional _ 18 } _ 18 _ 18 const safeTransaction = await protocolKit.createEnableModuleTx( _ 18 moduleAddress, _ 18 options // Optional _ 18 ) Parameters moduleAddress Type : string The Safe Module address to enable. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...' _ 10 ) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createEnableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to enable the Safe Module. createDisableModuleTx getModules Was this page helpful? Report issue",
    "title": "createEnableModuleTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "createEnableModuleTx",
      "Usage",
      "Parameters",
      "moduleAddress",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getthreshold#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getthreshold",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Configuration getThreshold getThreshold Returns the threshold of the connected Safe. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const threshold = await protocolKit.getThreshold() Returns Promise<number> The threshold of the connected Safe. getOwnersWhoApprovedTx isOwner Was this page helpful? Report issue",
    "title": "getThreshold – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "getThreshold",
      "Usage",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createchangethresholdtx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createchangethresholdtx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Configuration createChangeThresholdTx createChangeThresholdTx Returns a Safe transaction to change the threshold of the connected Safe. Usage example.ts setup.ts _ 15 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 15 import { protocolKit } from './setup.ts' _ 15 _ 15 const options: SafeTransactionOptionalProps = { _ 15 safeTxGas: '123', // Optional _ 15 baseGas: '123', // Optional _ 15 gasPrice: '123', // Optional _ 15 gasToken: '0x...', // Optional _ 15 refundReceiver: '0x...', // Optional _ 15 nonce: 123 // Optional _ 15 } _ 15 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 15 threshold: 3, _ 15 options // Optional _ 15 ) Parameters threshold (Optional) Type : number The new threshold of the Safe. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx({ _ 10 threshold: 3 _ 10 }) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 10 threshold: 3, _ 10 { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 10 threshold: 3, _ 10 { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 10 threshold: 3, _ 10 { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 10 threshold: 3, _ 10 { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 10 threshold: 3, _ 10 { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createChangeThresholdTx( _ 10 threshold: 3, _ 10 { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to update the threshold. createAddOwnerTx createRemoveOwnerTx Was this page helpful? Report issue",
    "title": "createChangeThresholdTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "createChangeThresholdTx",
      "Usage",
      "Parameters",
      "threshold(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap#chunk-0",
    "url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Home Action Guides AI agent swaps on Uniswap AI agent swaps on Uniswap You can find a working code example to run locally in our example repository (opens in a new tab) . Requirements A deployed Safe Smart Account The AI agent is a signer on the Safe This example assumes, that the threshold of the Safe Smart Account is one, so the AI agent can sign autonomously. If you require more signatures, you have to collect those signatures programmatically of with the Safe Wallet (opens in a new tab) . This guide assumes the Safe owns WETH. The example repository shows how to swap ETH to WETH. Swap on Uniswap Here is a quick guide to get you up and running: Setup the Safe Smart Account Your Safe Smart Account should be deployed. Now, initialize an instance with the Safe Protocol Kit : _ 10 import Safe from \"@safe-global/protocol-kit\"; _ 10 _ 10 const preExistingSafe = await Safe.init({ _ 10 provider: RPC_URL, _ 10 signer: AGENT_PRIVATE_KEY, _ 10 safeAddress: SAFE_ADDRESS, _ 10 }); Fetch Uniswap pool data First, you have to fetch the pool data from Uniswap. This data provides information about the liquidity at the current and at other prices. Uniswap has a unique Pricing Math (opens in a new tab) . _ 26 import { _ 26 Address, _ 26 createPublicClient, _ 26 createWalletClient, _ 26 defineChain, _ 26 encodeFunctionData, _ 26 http, _ 26 PublicClient, _ 26 } from \"viem\"; _ 26 _ 26 // Fetch slot0 data (current price, tick, etc.) _ 26 const slot0 = (await publicClient.readContract({ _ 26 address: poolAddress, _ 26 abi: POOL_ABI, _ 26 functionName: \"slot0\", _ 26 })) as any; _ 26 _ 26 // Fetch liquidity _ 26 const liquidity = (await publicClient.readContract({ _ 26 address: poolAddress, _ 26 abi: POOL_ABI, _ 26 functionName: \"liquidity\", _ 26 })) as any; _ 26 _ 26 const sqrtPriceX96 = BigInt(slot0[0]); _ 26 const tick = slot0[1]; Execute Swap Now, you can setup your Safe Smart Account and send a swap transaction to Uniswap: _ 104 import { _ 104 FeeAmount, _ 104 Pool, _ 104 Route, _ 104 SwapRouter, _ 104 CurrencyAmount, _ 104 TradeType, _ 104 Percent _ 104 } from \"@uniswap/v3-sdk\"; _ 104 import { Token, SwapOptions } from \"@uniswap/sdk-core\"; _ 104 import JSBI from \"jsbi\"; _ 104 import { OperationType, MetaTransactionData } from \"@safe-global/types-kit\"; _ 104 _ 104 // Set up viem clients and accounts _ 104 const account = privateKeyToAccount(AGENT_PRIVATE_KEY as `0x${string}`); _ 104 _ 104 const publicClient = createPublicClient({ _ 104 transport: http(RPC_URL!) _ 104 }); _ 104 const walletClient = createWalletClient({ _ 104 transport: http(RPC_URL!) _ 104 }); _ 104 _ 104 const chainId = (await publicClient.getChainId()); _ 104 _ 104 // Example Values for WETH/USDC Uniswap Pool on Sepolia: _ 104 const WETH_ADDRESS = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"; _ 104 const USDC_ADDRESS = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"; _ 104 const USDC_ETH_POOL_ADDRESS = \"0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640\"; _ 104 const SWAP_ROUTER_ADDRESS = \"0xE592427A0AEce92De3Edee1F18E0157C05861564\"; // Uniswap V3 Router _ 104 const INPUT_AMOUNT = \"100000000000\"; //",
    "title": "AI agent swaps on Uniswap – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "AI agent swaps on Uniswap",
      "Requirements",
      "Swap on Uniswap",
      "Setup the Safe Smart Account",
      "Fetch Uniswap pool data",
      "Execute Swap",
      "Next steps"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap#chunk-1",
    "url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "Amount of ETH to swap to USDC _ 104 const OUTOUT_AMOUNT = \"0\"; // 0 USDC _ 104 _ 104 // Define token details _ 104 const USDC = new Token(chainId, USDC_ADDRESS, 6, \"USDC\", \"USD Coin\"); _ 104 const WETH = new Token(chainId, WETH_ADDRESS, 18, \"WETH\", \"Wrapped Ether\"); _ 104 _ 104 const callDataApprove = encodeFunctionData({ _ 104 abi: WETH_ABI, _ 104 functionName: \"approve\", _ 104 args: [SWAP_ROUTER_ADDRESS, INPUT_AMOUNT], _ 104 }); _ 104 _ 104 const safeApproveTx: MetaTransactionData = { _ 104 to: WETH_ADDRESS, _ 104 value: \"0\", _ 104 data: callDataApprove, _ 104 operation: OperationType.Call, _ 104 }; _ 104 _ 104 const options: SwapOptions = { _ 104 slippageTolerance: new Percent(50, 10_000), // 50 bips, or 0.50% _ 104 deadline: Math.floor(Date.now() / 1000) + 60 * 20, // 20 minutes from the current Unix time _ 104 recipient: SAFE_ADDRESS, _ 104 }; _ 104 _ 104 const poolInfo = await fetchPoolData(publicClient, USDC_ETH_POOL_ADDRESS); _ 104 _ 104 // Create the pool object _ 104 const pool = new Pool( _ 104 WETH, _ 104 USDC, _ 104 FeeAmount.MEDIUM, _ 104 JSBI.BigInt(poolInfo.sqrtPriceX96.toString()), _ 104 JSBI.BigInt(poolInfo.liquidity.toString()), _ 104 poolInfo.tick _ 104 ); _ 104 _ 104 const swapRoute = new Route([pool], WETH, USDC); _ 104 _ 104 const uncheckedTrade = Trade.createUncheckedTrade({ _ 104 tradeType: TradeType.EXACT_INPUT, _ 104 route: swapRoute, _ 104 inputAmount: CurrencyAmount.fromRawAmount(WETH, _ 104 INPUT_AMOUNT _ 104 ), _ 104 outputAmount: CurrencyAmount.fromRawAmount(USDC, OUTOUT_AMOUNT), _ 104 }); _ 104 _ 104 const methodParameters = SwapRouter.swapCallParameters( _ 104 [uncheckedTrade], _ 104 options _ 104 ); _ 104 _ 104 const safeSwapTx: MetaTransactionData = { _ 104 to: SWAP_ROUTER_ADDRESS, _ 104 value: methodParameters.value, _ 104 data: methodParameters.calldata, _ 104 operation: OperationType.Call, _ 104 }; _ 104 _ 104 const safeTx = await preExistingSafe.createTransaction({ _ 104 transactions: [safeApproveTx, safeSwapTx], _ 104 onlyCalls: true, _ 104 }); _ 104 _ 104 // You might need to collect more signatures here, depending on the threshold _ 104 _ 104 const txResponse = await preExistingSafe.executeTransaction(safeTx); _ 104 await publicClient.waitForTransactionReceipt({ _ 104 hash: txResponse.hash as `0x${string}`, _ 104 }); _ 104 _ 104 console.log(`Deposit and approve transaction: [${txResponse.hash}]`); Now your AI agent executed a swap on Uniswap. Next steps You can find more information about Swaps on Uniswap in their docs about swaps (opens in a new tab) . If you have a technical question about Safe Smart Accounts, feel free to reach out on Stack Exchange (opens in a new tab) with the safe-core tag. AI agent swaps on CoW Swap Glossary Was this page helpful? Report issue",
    "title": "AI agent swaps on Uniswap – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/glossary",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "AI agent swaps on Uniswap",
      "Requirements",
      "Swap on Uniswap",
      "Setup the Safe Smart Account",
      "Fetch Uniswap pool data",
      "Execute Swap",
      "Next steps"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/config-service-configuration/add-user#chunk-0",
    "url": "https://docs.safe.global/config-service-configuration/add-user",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Config Service Reference Add users Add user Add a new Django user. Users are generally admins from your organization that will have partial or total access to the Config Service. After creation, you can access more options to edit this user . Usage You can edit an existing user by visiting this address: http://localhost:8000/cfg/admin/auth/user/{user index}/change/ , where {user index} is the index of the user you want to edit. Parameters Username A user name for identifying this user. Must be unique. Password-based authentication This section is used to set whether the user will use Django's built-in authentication system (opens in a new tab) ( Enabled ), or will use an external authentication system ( Disabled ). If you enable this option, you will need to set a password for the user. If you disable this option, you will have to implement your own authentication method (opens in a new tab) . Password Opens a section to set a password for the user. Confirm password A confirmation field for the password. Add or edit groups Edit users Was this page helpful? Report issue",
    "title": "Add user – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/config-service-configuration/add-or-edit-group",
    "breadcrumbs": [],
    "depth": 3,
    "section_titles": [
      "Add user",
      "Usage",
      "Parameters",
      "Username",
      "Password-based authentication",
      "Password",
      "Confirm password"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/constructor#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/constructor",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference constructor constructor Returns an instance of the API Kit. Usage _ 12 import SafeApiKit from '@safe-global/api-kit' _ 12 _ 12 const chainId = 1n _ 12 _ 12 const txServiceUrl = 'https://...' _ 12 _ 12 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 12 const apiKit = new SafeApiKit({ _ 12 chainId, _ 12 txServiceUrl, // Optional _ 12 apiKey: 'YOUR_API_KEY' // Mandatory if txServiceUrl is not specified _ 12 }) Returns SafeApiKit A new instance of the API Kit. Parameters chainId Type: bigint The chain ID. _ 10 const apiKit = new SafeApiKit({ _ 10 chainId: 1n, _ 10 apiKey: 'YOUR_API_KEY' _ 10 }) apiKey Type: string The API key. This parameter is mandatory when using default Safe provided services. It can be omitted if using a custom Transaction Service. Check how to get one . _ 10 const apiKit = new SafeApiKit({ _ 10 chainId: 1n, _ 10 apiKey: 'YOUR_API_KEY' _ 10 }) txServiceUrl (Optional) Type: string The URL of the Safe Transaction Service. This can be provided instead of apiKey to specify a custom Transaction Service endpoint, such as when running your own Safe Transaction Service instance. _ 10 const apiKit = new SafeApiKit({ _ 10 chainId: 1n, _ 10 txServiceUrl: 'https://...' _ 10 }) Overview getServiceInfo Was this page helpful? Report issue",
    "title": "constructor – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/overview",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "constructor",
      "Usage",
      "Returns",
      "Parameters",
      "chainId",
      "apiKey",
      "txServiceUrl(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/estimatesafetransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/estimatesafetransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference estimateSafeTransaction estimateSafeTransaction Estimates the safeTxGas for a given Safe multi-signature transaction. Usage example.ts setup.ts _ 16 import { SafeMultisigTransactionEstimate } from '@safe-global/api-kit' _ 16 import { apiKit } from './setup.ts' _ 16 _ 16 const safeAddress = '0x...' _ 16 _ 16 const safeTransaction: SafeMultisigTransactionEstimate = { _ 16 to: '0x...', _ 16 value: '0', _ 16 data: '0x', _ 16 operation: 0 // Optional _ 16 } _ 16 _ 16 const estimateTx = await apiKit.estimateSafeTransaction( _ 16 safeAddress, _ 16 safeTransaction _ 16 ) Returns Promise<SafeMultisigTransactionEstimateResponse> The safeTxGas for the given Safe transaction. Parameters safeAddress Type: string The Safe address. _ 10 const estimateTx = await apiKit.estimateSafeTransaction( _ 10 '0x...', _ 10 { _ 10 to: '0x...', _ 10 value: '0', _ 10 data: '0x' _ 10 } _ 10 ) safeTransaction.to Type: string The transaction recipient of the Safe transaction to estimate. _ 10 const estimateTx = await apiKit.estimateSafeTransaction( _ 10 '0x...', _ 10 { _ 10 to: '0x...', _ 10 value: '0', _ 10 data: '0x' _ 10 } _ 10 ) safeTransaction.value Type: string The value of the Safe transaction to estimate. _ 10 const estimateTx = await apiKit.estimateSafeTransaction( _ 10 '0x...', _ 10 { _ 10 to: '0x...', _ 10 value: '0', _ 10 data: '0x' _ 10 } _ 10 ) safeTransaction.data Type: string The data of the Safe transaction to estimate. _ 10 const estimateTx = await apiKit.estimateSafeTransaction( _ 10 '0x...', _ 10 { _ 10 to: '0x...', _ 10 value: '0', _ 10 data: '0x' _ 10 } _ 10 ) safeTransaction.operation (Optional) Type: OperationType The operation of the Safe transaction to estimate. _ 10 const estimateTx = await apiKit.estimateSafeTransaction( _ 10 '0x...', _ 10 { _ 10 to: '0x...', _ 10 value: '0', _ 10 data: '0x', _ 10 operation: 0 _ 10 } _ 10 ) getSafeCreationInfo proposeTransaction Was this page helpful? Report issue",
    "title": "estimateSafeTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/proposetransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "estimateSafeTransaction",
      "Usage",
      "Returns",
      "Parameters",
      "safeAddress",
      "safeTransaction.to",
      "safeTransaction.value",
      "safeTransaction.data",
      "safeTransaction.operation(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/getincomingtransactions#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/getincomingtransactions",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getIncomingTransactions getIncomingTransactions Returns the history of incoming transactions of a Safe account. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeAddress = '0x...' _ 10 const options = { _ 10 _from: '0x...', _ 10 limit: 10, _ 10 offset: 10 _ 10 } _ 10 _ 10 const incomingTxs = await apiKit.getIncomingTransactions(safeAddress, options) Returns Promise<TransferListResponse> The history of incoming transactions. Parameters safeAddress Type: string The Safe address. _ 10 const incomingTxs = await apiKit.getIncomingTransactions( _ 10 '0x...' _ 10 ) options.from (Optional) Type: string The transaction sender address. options.limit (Optional) Type: number The number of results to return per page. options.offset (Optional) Type: number The initial index from which to return the results. proposeTransaction getModuleTransactions Was this page helpful? Report issue",
    "title": "getIncomingTransactions – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/proposetransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "getIncomingTransactions",
      "Usage",
      "Returns",
      "Parameters",
      "safeAddress",
      "options.from(Optional)",
      "options.limit(Optional)",
      "options.offset(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/gettransactionconfirmations#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/gettransactionconfirmations",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getTransactionConfirmations getTransactionConfirmations Returns the list of confirmations for a given a Safe transaction. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeTxHash = '0x...' _ 10 _ 10 const confirmations = await apiKit.getTransactionConfirmations(safeTxHash) Returns Promise<SafeMultisigConfirmationListResponse> The list of confirmations. Parameters safeTxHash Type: string The hash of the Safe transaction. _ 10 const confirmations = await apiKit.getTransactionConfirmations( _ 10 '0x...' _ 10 ) getTransaction confirmTransaction Was this page helpful? Report issue",
    "title": "getTransactionConfirmations – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/confirmtransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "getTransactionConfirmations",
      "Usage",
      "Returns",
      "Parameters",
      "safeTxHash"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/getsafeinfo#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/getsafeinfo",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getSafeInfo getSafeInfo Returns the information and configuration of the provided Safe address. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeAddress = '0x...' _ 10 _ 10 const safeInfo = await apiKit.getSafeInfo(safeAddress) Returns Promise<SafeInfoResponse> The information and configuration of the provided Safe address. Parameters safeAddress Type: string The Safe address. _ 10 const safeInfo = await apiKit.getSafeInfo( _ 10 '0x...' _ 10 ) confirmTransaction getSafeDelegates Was this page helpful? Report issue",
    "title": "getSafeInfo – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/confirmtransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "getSafeInfo",
      "Usage",
      "Returns",
      "Parameters",
      "safeAddress"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createtransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createtransaction",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Protocol Kit Reference Transactions createTransaction createTransaction Returns a Safe transaction ready to be signed by the owners and executed. This method supports batch transactions by passing an array of MetaTransactionData objects with more than one element. Usage example.ts setup.ts _ 25 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 25 import { MetaTransactionData, OperationType } from '@safe-global/types-kit' _ 25 import { protocolKit } from './setup.ts' _ 25 _ 25 const transactions: MetaTransactionData[] = [{ _ 25 to: '0x...', _ 25 value: '123', _ 25 data: '0x', _ 25 operation: OperationType.Call // Optional _ 25 }] _ 25 _ 25 const options: SafeTransactionOptionalProps = { _ 25 safeTxGas: '123', // Optional _ 25 baseGas: '123', // Optional _ 25 gasPrice: '123', // Optional _ 25 gasToken: '0x...', // Optional _ 25 refundReceiver: '0x...', // Optional _ 25 nonce: 123 // Optional _ 25 } _ 25 _ 25 const safeTransaction = await protocolKit.createTransaction({ _ 25 transactions, _ 25 onlyCalls: true, // Optional _ 25 options // Optional _ 25 }) Parameters transactions.to Type: string The address of the recipient. _ 10 const safeTransaction = await protocolKit.createTransaction({ _ 10 transactions: [{ _ 10 to: '0x...', _ 10 value: '123', _ 10 data: '0x' _ 10 }] _ 10 }) transactions.value Type: string The amount of native tokens that are transferred. _ 10 const safeTransaction = await protocolKit.createTransaction({ _ 10 transactions: [{ _ 10 to: '0x...', _ 10 value: '123', _ 10 data: '0x' _ 10 }] _ 10 }) transactions.data Type: string The encoded transaction data. _ 10 const safeTransaction = await protocolKit.createTransaction({ _ 10 transactions: [{ _ 10 to: '0x...', _ 10 value: '123', _ 10 data: '0x' _ 10 }] _ 10 }) transactions.operation (Optional) Type: OperationType Default: 0 The operation of the Safe transaction. 0 for a Call and 1 for a DelegateCall . _ 10 const safeTransaction = await protocolKit.createTransaction({ _ 10 transactions: [{ _ 10 to: '0x...', _ 10 value: '123', _ 10 data: '0x', _ 10 operation: 0 _ 10 }] _ 10 }) onlyCalls (Optional) Type : boolean Default : false A boolean variable that forces the use of the MultiSendCallOnly (opens in a new tab) contract instead of the MultiSend (opens in a new tab) when sending a batch transaction. _ 10 const safeTransaction = await protocolKit.createTransaction( _ 10 '0x...', _ 10 onlyCalls: true _ 10 ) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createTransaction( _ 10 '0x...', _ 10 options: { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createTransaction( _ 10 '0x...', _ 10 options: { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createTransaction(",
    "title": "createTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/executetransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createTransaction",
      "Usage",
      "Parameters",
      "transactions.to",
      "transactions.value",
      "transactions.data",
      "transactions.operation(Optional)",
      "onlyCalls(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createtransaction#chunk-1",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createtransaction",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "_ 10 '0x...', _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createTransaction( _ 10 '0x...', _ 10 options: { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createTransaction( _ 10 '0x...', _ 10 options: { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createTransaction( _ 10 '0x...', _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction object ready to be signed. createRejectionTransaction executeTransaction Was this page helpful? Report issue",
    "title": "createTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/executetransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createTransaction",
      "Usage",
      "Parameters",
      "transactions.to",
      "transactions.value",
      "transactions.data",
      "transactions.operation(Optional)",
      "onlyCalls(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/gettransactionhash#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/gettransactionhash",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Transactions getTransactionHash getTransactionHash Returns the Safe transaction hash of a Safe transaction. Usage example.ts setup.ts _ 17 import { _ 17 MetaTransactionData, _ 17 OperationType _ 17 } from '@safe-global/types-kit' _ 17 import { protocolKit } from './setup.ts' _ 17 _ 17 const transactions: MetaTransactionData[] = [{ _ 17 to: '0x...', _ 17 value: '123', _ 17 data: '0x', _ 17 operation: OperationType.Call // Optional _ 17 }] _ 17 const safeTransaction = await protocolKit.createTransaction({ _ 17 transactions _ 17 }) _ 17 _ 17 const safeTransactionHash = await protocolKit.getTransactionHash(safeTransaction) Parameters safeTransaction Type : SafeTransaction (opens in a new tab) The Safe transaction. _ 10 const safeTransactionHash = await protocolKit.getTransactionHash( _ 10 safeTransaction _ 10 ) Returns Promise<string> The Safe transaction hash of the Safe transaction. executeTransaction isValidTransaction Was this page helpful? Report issue",
    "title": "getTransactionHash – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/executetransaction",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "getTransactionHash",
      "Usage",
      "Parameters",
      "safeTransaction",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-reference#chunk-0",
    "url": "https://docs.safe.global/advanced/cli-reference",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced Reference Reference The Safe CLI has two operation modes: blockchain : The default mode. Use the blockchain command to enable it. Transactions are sent to the blockchain. tx-service : Use the tx-service command to enable it. Transactions are sent to the Safe Transaction Service (if available on the network), and you can see them on Safe{Wallet}. At least one signer is needed to send transactions to the service. Transactions are not executed. It requires Safe{Core} API running on the network; also, set your API key using an environment variable export SAFE_TRANSACTION_SERVICE_API_KEY=YOUR_API_KEY . Common commands for both modes Commands specific to the tx-service mode Configuration Use custom contracts The Safe CLI comes with the official deterministic Safe Smart Account addresses deployed on multiple chains configured by default. You can edit the safe_cli/safe_addresses.py file if you want to use your own. Be careful when modifying these addresses, as the funds in a Safe can get stuck if an invalid address is used when updating to an invalid Safe Master Copy. Deploy a Recovery Safe Common commands for both modes Was this page helpful? Report issue",
    "title": "Reference – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/cli-reference/tx-service-commands",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "Reference",
      "Common commands for both modes",
      "Commands specific to the tx-service mode",
      "Configuration",
      "Use custom contracts"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-reference/common-commands#chunk-0",
    "url": "https://docs.safe.global/advanced/cli-reference/common-commands",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Advanced Reference Common commands for both modes Common commands for both modes Here's a reference for commands common to the blockchain and the tx-service modes. ℹ️ You must first load the sender's private key. When loading an owner, it will be set automatically. Safe Create new Safe You can create a new Safe by running the following command: _ 10 safe-creator <node_url> <private_key> --owners <checksummed_address_1> <checksummed_address_2> --threshold <uint> --salt-nonce <uint256> Load Safe To load a Safe, use the following command: _ 10 safe-cli <checksummed_safe_address> <ethereum_node_url> Then you should be on the prompt and see information about the Safe, like the owners, version, etc. The next step would be loading some owners for the Safe. At least threshold owners need to be loaded to do operations on the Safe, and at least one should have funds to send transactions. Update Safe Updates the Safe to the latest version (if you are on a known network like Mainnet). _ 10 update Transactions Send custom transactions Sends a custom transaction from the Safe account to a contract. If --delegate is set, a delegatecall will be triggered. _ 10 send_custom <address> <value-wei> <data-hex-str> [--delegate] [--safe-nonce <int>] Send ether Sends ether from the Safe to another account. _ 10 send_ether <address> <value-wei> [--safe-nonce <int>] Send ERC-20 tokens Sends an ERC-20 token from the Safe account to a different one. _ 10 send_erc20 <address> <token-address> <value-wei> [--safe-nonce <int>] Send ERC-721 tokens Sends an ERC-721 token from the Safe account to a different one. _ 10 send_erc721 <address> <token-address> <token-id> [--safe-nonce <int>] Approve Safe transaction hash Approves a safe-tx-hash for the provided sender address. _ 10 approve_hash <keccak-hexstr-hash> <sender-address> Owners Add new owner Adds a new owner address to the Safe. _ 10 add_owner <address> Load owners From private key Loading owners is unnecessary if you want to do read-only operations. To load owners: _ 10 > load_cli_owners <account_private_key> _ 10 Loaded account 0xab...cd with balance=123 ether _ 10 Set account 0xab..cd as default sender of txs You can also load owners from your environment variables before running the Safe CLI: _ 10 export MY_PRIVATE_KEY=YOUR_EOA_PRIVATE_KEY Run the Safe CLI, then: _ 10 > load_cli_owners MY_PRIVATE_KEY _ 10 Loaded account 0xab...cd with balance=123 ether _ 10 Set account 0xab..cd as default sender of txs To check the loaded owners: _ 10 > show_cli_owners To unload an owner: _ 10 > unload_cli_owners <ethereum_checksummed_address> From hardware wallets ℹ️ Before signing anything, ensure that the data on your hardware wallet device is the same as the Safe CLI data. If you want to use both Ledger and Trezor, you need to run the following command: _ 10 pip install \"safe-cli[ledger, trezor]\" Ledger The Ledger module is an optional feature of the Safe CLI to sign transactions with the help of ledgereth (opens in a new tab) library based on ledgerblue (opens in a new tab) . To enable, the Safe CLI must be installed as follows: _ 10 pip install \"safe-cli[ledger]\" When running on Linux, make sure the following rules have",
    "title": "Common commands for both modes – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/cli-reference/tx-service-commands",
    "breadcrumbs": [
      {
        "text": "Reference",
        "url": "/advanced/cli-reference"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Common commands for both modes",
      "Safe",
      "Create new Safe",
      "Load Safe",
      "Update Safe",
      "Transactions",
      "Send custom transactions",
      "Send ether",
      "Send ERC-20 tokens",
      "Send ERC-721 tokens",
      "Approve Safe transaction hash",
      "Owners",
      "Add new owner",
      "Load owners",
      "From private key",
      "From hardware wallets",
      "Ledger",
      "Trezor",
      "Remove owner",
      "Change threshold",
      "Modules",
      "Enable module",
      "Disable module",
      "Refresh Safe CLI",
      "Update fallback handler",
      "Update Safe Guard",
      "Update master copy",
      "Update to L2"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-reference/common-commands#chunk-1",
    "url": "https://docs.safe.global/advanced/cli-reference/common-commands",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "been added to /etc/udev/rules.d/ : _ 10 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2c97\", ATTRS{idProduct}==\"0000\", MODE=\"0660\", TAG+=\"uaccess\", TAG+=\"udev-acl\" OWNER=\"<UNIX username>\" _ 10 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2c97\", ATTRS{idProduct}==\"0001\", MODE=\"0660\", TAG+=\"uaccess\", TAG+=\"udev-acl\" OWNER=\"<UNIX username>\" _ 10 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2c97\", ATTRS{idProduct}==\"0004\", MODE=\"0660\", TAG+=\"uaccess\", TAG+=\"udev-acl\" OWNER=\"<UNIX username>\" Ledger commands load_ledger_cli_owners [--legacy-accounts] [--derivation-path <str>] : shows a list of the first five accounts ( --legacy-accounts search using legacy derivation) or loads an account from the provided derivation path. Trezor The Trezor module is an optional feature of the Safe CLI to sign transactions from the Trezor hardware wallet using the trezor (opens in a new tab) library. To enable, the Safe CLI must be installed as follows: _ 10 pip install \"safe-cli[trezor]\" Trezor commands load_trezor_cli_owners [--legacy-accounts] [--derivation-path <str>] : shows a list of the first five accounts ( --legacy-accounts search using legacy derivation) or loads an account from provided derivation path. Remove owner Removes an owner address from the Safe. _ 10 remove_owner <address> Change threshold Changes the threshold of the Safe. _ 10 change_threshold <integer> Modules Enable module Enable module address . _ 10 enable_module <address> Disable module Disable module address . _ 10 disable_module <address> Refresh Safe CLI If the information in the information bar is outdated or there's any problem, you can force the Safe CLI to update the information about the Safe. _ 10 refresh ⚠️ Only use the following operations if you are sure about what you are doing, as they can result in all your funds getting lost. Update fallback handler Updates the fallback handler to be address . Supported by Safes with version >= v1.1.0 . _ 10 change_fallback_handler <address> Update Safe Guard Updates the Safe Guard to be address . Supported by Safes with version >= v1.3.0 . _ 10 change_guard <address> Update master copy Updates the master copy to be address . It's used to update the Safe. _ 10 change_master_copy <address> Update to L2 ⚠️ A non-L2 Safe can only be migrated to L2 if the non-L2 Safe was not used before (nonce must be zero). Updates a v1.1.1 , v1.3.0 , or v1.4.1 non-L2 Safe to an L2 Safe supported by Safe {Wallet}. The migration contract address needs to be provided. It can be found here (opens in a new tab) . The nonce for the Safe must be 0, and supported versions are v1.1.1 , v1.3.0 , and v1.4.1 . _ 10 update_version_to_l2 <address> where address is the address of the migration contract. Reference Commands specific to the tx-service mode Was this page helpful? Report issue",
    "title": "Common commands for both modes – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/cli-reference/tx-service-commands",
    "breadcrumbs": [
      {
        "text": "Reference",
        "url": "/advanced/cli-reference"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Common commands for both modes",
      "Safe",
      "Create new Safe",
      "Load Safe",
      "Update Safe",
      "Transactions",
      "Send custom transactions",
      "Send ether",
      "Send ERC-20 tokens",
      "Send ERC-721 tokens",
      "Approve Safe transaction hash",
      "Owners",
      "Add new owner",
      "Load owners",
      "From private key",
      "From hardware wallets",
      "Ledger",
      "Trezor",
      "Remove owner",
      "Change threshold",
      "Modules",
      "Enable module",
      "Disable module",
      "Refresh Safe CLI",
      "Update fallback handler",
      "Update Safe Guard",
      "Update master copy",
      "Update to L2"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-reference/unattended-commands#chunk-0",
    "url": "https://docs.safe.global/advanced/cli-reference/unattended-commands",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Advanced Reference Commands available in unattended mode Commands available in unattended mode In addition to the use cases referenced in the sections Common commands for both modes and Commands specific to the tx-service mode it is possible to execute some commands without using the interactive prompt. This facilitates the use of safe-cli in generating scripts or automated processes. The commands available for direct execution without the use of the interactive prompt are: send-custom send-ether send-erc20 send-erc721 tx-builder These commands are executed in the same way as the interactive prompt commands in blockchain mode. Usage and common parameters _ 10 safe-cli command [OPTIONS] ARG1 ARG2 ARGN All commands available without using the interactive prompt share the following common arguments: --private-key : The list of private keys necessary for each operation. The --private-key option must be added as keys are often necessary. It is possible to specify the key value directly after the --private-key , or to pass the name of an environment variable containing the private key. --interactive / --non-interactive : Indicates if the execution of the command requires user interaction, such as a confirmation before executing a transaction. By default, it has the value --interactive , but it is possible to avoid any confirmation by using --non-interactive . This is useful for scripting and automation, where no user intervention is required. Transactions Send custom transactions Sends a custom transaction from the Safe account to a contract. If --delegate is set, a delegatecall will be triggered. _ 15 safe-cli send-custom [OPTIONS] SAFE_ADDRESS NODE_URL TO VALUE DATA _ 15 _ 15 ╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────────╮ _ 15 │ * safe_address CHECKSUMADDRESS The address of the Safe. [required] │ _ 15 │ * node_url TEXT Ethereum node url. [required] │ _ 15 │ * to CHECKSUMADDRESS The address of destination. [required] │ _ 15 │ * value INTEGER Value to send. [required] │ _ 15 │ * data HEXBYTES HexBytes data to send. [required] │ _ 15 ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ _ 15 ╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────╮ _ 15 │ --private-key TEXT List of private keys of signers. │ _ 15 │ --safe-nonce INTEGER Force nonce for tx_sender │ _ 15 │ --delegate --no-delegate Use DELEGATE_CALL. By default use CALL [default: no-delegate] │ _ 15 │ --interactive --non-interactive Enable/disable interactive mode. │ _ 15 ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ Send ether Sends ether from the Safe to another account. _ 13 safe-cli send-ether [OPTIONS] SAFE_ADDRESS NODE_URL TO VALUE _ 13 _ 13 ╭─ Arguments ────────────────────────────────────────────────────────────────────────╮ _ 13 │ * safe_address CHECKSUMADDRESS The address of the Safe. [required] | _ 13 │ * node_url TEXT Ethereum node url. [required] │ _ 13 │ * to CHECKSUMADDRESS The address of destination. [required] │ _ 13 │ * value INTEGER Amount of ether in wei to send. [required] │ _ 13 ╰────────────────────────────────────────────────────────────────────────────────────╯ _ 13 ╭─ Options ──────────────────────────────────────────────────────────────────────────╮ _ 13 │ --private-key TEXT List of private keys of signers. │ _ 13 │ --safe-nonce INTEGER Force nonce for tx_sender │ _ 13 │ --interactive --non-interactive Enable/disable interactive mode. │ _ 13 ╰────────────────────────────────────────────────────────────────────────────────────╯ Send ERC-20 tokens Sends",
    "title": "Commands available in unattended mode – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/cli-reference/tx-service-commands",
    "breadcrumbs": [
      {
        "text": "Reference",
        "url": "/advanced/cli-reference"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Commands available in unattended mode",
      "Usage and common parameters",
      "Transactions",
      "Send custom transactions",
      "Send ether",
      "Send ERC-20 tokens",
      "Send ERC-721 tokens",
      "Transaction builder"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-reference/unattended-commands#chunk-1",
    "url": "https://docs.safe.global/advanced/cli-reference/unattended-commands",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "an ERC-20 token from the Safe account to a different one. _ 14 safe-cli send-erc20 [OPTIONS] SAFE_ADDRESS NODE_URL TO TOKEN_ADDRESS AMOUNT _ 14 _ 14 ╭─ Arguments ────────────────────────────────────────────────────────────────────────────────╮ _ 14 │ * safe_address CHECKSUMADDRESS The address of the Safe. [required] | _ 14 │ * node_url TEXT Ethereum node url. [required] │ _ 14 │ * to CHECKSUMADDRESS The address of destination. [required] │ _ 14 │ * token_address CHECKSUMADDRESS Erc20 token address. [required] │ _ 14 │ * amount INTEGER Amount of erc20 tokens in wei to send. [required] │ _ 14 ╰────────────────────────────────────────────────────────────────────────────────────────────╯ _ 14 ╭─ Options ──────────────────────────────────────────────────────────────────────────────────╮ _ 14 │ --private-key TEXT List of private keys of signers. │ _ 14 │ --safe-nonce INTEGER Force nonce for tx_sender │ _ 14 │ --interactive --non-interactive Enable/disable interactive mode. │ _ 14 ╰────────────────────────────────────────────────────────────────────────────────────────────╯ Send ERC-721 tokens Sends an ERC-721 token from the Safe account to a different one. _ 14 safe-cli send-erc721 [OPTIONS] SAFE_ADDRESS NODE_URL TO TOKEN_ADDRESS TOKEN_ID _ 14 _ 14 ╭─ Arguments ───────────────────────────────────────────────────────────────────────╮ _ 14 │ * safe_address CHECKSUMADDRESS The address of the Safe. [required] | _ 14 │ * node_url TEXT Ethereum node url. [required] │ _ 14 │ * to CHECKSUMADDRESS The address of destination. [required] │ _ 14 │ * token_address CHECKSUMADDRESS Erc20 token address. [required] │ _ 14 │ * token_id INTEGER Erc721 token id. [required] │ _ 14 ╰───────────────────────────────────────────────────────────────────────────────────╯ _ 14 ╭─ Options ─────────────────────────────────────────────────────────────────────────╮ _ 14 │ --private-key TEXT List of private keys of signers. │ _ 14 │ --safe-nonce INTEGER Force nonce for tx_sender │ _ 14 │ --interactive --non-interactive Enable/disable interactive mode. │ _ 14 ╰───────────────────────────────────────────────────────────────────────────────────╯ Transaction builder Execute a transaction or transaction batch from a JSON file. The format of the file is the same as the one used from the Safe{Wallet} (opens in a new tab) website in the Transaction Builder application. This guide (opens in a new tab) explains how to use the tx-builder application. _ 11 safe-cli tx-builder [OPTIONS] SAFE_ADDRESS NODE_URL FILE_PATH _ 11 _ 11 ╭─ Arguments ────────────────────────────────────────────────────────────────────────╮ _ 11 │ * safe_address CHECKSUMADDRESS The address of the Safe. [required] │ _ 11 │ * node_url TEXT Ethereum node url. [required] │ _ 11 │ * file_path FILE File path with tx_builder data. [required] | _ 11 ╰────────────────────────────────────────────────────────────────────────────────────╯ _ 11 ╭─ Options ──────────────────────────────────────────────────────────────────────────╮ _ 11 │ --private-key TEXT List of private keys of signers. │ _ 11 │ --interactive --non-interactive Enable/disable interactive mode. │ _ 11 ╰────────────────────────────────────────────────────────────────────────────────────╯ Commands specific to the tx-service mode Was this page helpful? Report issue",
    "title": "Commands available in unattended mode – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/cli-reference/tx-service-commands",
    "breadcrumbs": [
      {
        "text": "Reference",
        "url": "/advanced/cli-reference"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Commands available in unattended mode",
      "Usage and common parameters",
      "Transactions",
      "Send custom transactions",
      "Send ether",
      "Send ERC-20 tokens",
      "Send ERC-721 tokens",
      "Transaction builder"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v2#chunk-0",
    "url": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v2",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK API Kit Guides Migrate to v2 Migrate to v2 This guide references the major changes between v1 and v2 to help those migrating an existing app. API Kit constructor It won't be necessary to specify a txServiceUrl in environments where Safe has a Transaction Service running. Providing the chain ID will be enough. If you want to use your custom service or the kit in a chain not supported by a Safe Transaction Service, you can add the txServiceUrl parameter. _ 21 // old: _ 21 import SafeApiKit from '@safe-global/api-kit' _ 21 _ 21 const apiKit = new SafeApiKit({ _ 21 txServiceUrl: 'https://your-transaction-service-url', _ 21 ethAdapter _ 21 }) _ 21 _ 21 // new: _ 21 import SafeApiKit from '@safe-global/api-kit' _ 21 _ 21 const chainId: bigint = 1n _ 21 const apiKit = new SafeApiKit({ _ 21 chainId _ 21 }) _ 21 _ 21 // or set a custom Transaction Service _ 21 const apiKit = new SafeApiKit({ _ 21 chainId, _ 21 txServiceUrl: 'https://your-transaction-service-url' _ 21 }) Use the route you prefer API Kit v1 forced any custom service to be hosted under the /api route of the URL specified in txServiceUrl . This isn't the case anymore; you can specify any preferred route or subdomain. Note that if you use a custom service running under /api , you will now need to migrate as follows: _ 13 // old: _ 13 const txServiceUrl = 'https://your-transaction-service-domain/' _ 13 const apiKit = new SafeApiKit({ _ 13 txServiceUrl, _ 13 ethAdapter _ 13 }) _ 13 // new: _ 13 const chainId: bigint = 1n _ 13 const txServiceUrl = 'https://your-transaction-service-domain/api' _ 13 const apiKit = new SafeApiKit({ _ 13 chainId, _ 13 txServiceUrl _ 13 }) Mastercopy to Singleton To avoid confusion between terms used as synonyms, we aligned all our code to use the word singleton . Rename type MasterCopyResponse to SafeSingletonResponse Rename method getServiceMasterCopiesInfo() to getServiceSingletonsInfo() Migrate to v1 Migrate to v3 Was this page helpful? Report issue",
    "title": "Migrate to v2 – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v1",
    "breadcrumbs": [
      {
        "text": "API Kit",
        "url": "/sdk/api-kit"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Migrate to v2",
      "API Kit constructor",
      "Use the route you prefer",
      "Mastercopy to Singleton"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk#chunk-0",
    "url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "chunk_index": 0,
    "total_chunks": 3,
    "text": "SDK Relay Kit Guides ERC-4337 Safe SDK Safe accounts with the Safe4337Module In this guide, you will learn how to create and execute multiple Safe transactions grouped in a batch from a Safe account that is not yet deployed and where the executor may or may not have funds to pay for the transaction fees. This can be achieved by supporting the ERC-4337 execution flow, which is supported by the Safe4337Module and exposed via the Relay Kit from the Safe{Core} SDK. Read the Safe4337Module documentation to understand its benefits and flows better. Pimlico (opens in a new tab) is used in this guide as the service provider, but any other provider compatible with the ERC-4337 can be used. ℹ️ We have added support for then Entrypoint v0.7 contract but we are not making it the default yet. If you are using Entrypoint v0.7, you need to set the safeModuleVersion to 0.3.0 when calling the Safe4337Pack.init method. This version of the Safe 4337 Module is the one compatible with the Entrypoint v0.7. Prerequisites Node.js and npm (opens in a new tab) . A Pimlico account (opens in a new tab) and an API key. Install dependencies _ 10 yarn add @safe-global/relay-kit Steps Imports Here are all the necessary imports for the script we implement in this guide. _ 10 import { Safe4337Pack } from '@safe-global/relay-kit' Create a signer Firstly, we need to get a signer, which will be the owner of a Safe account after it's deployed. In this example, we use a private key, but any way to get an EIP-1193 compatible signer can be used. _ 10 const SIGNER_ADDRESS = // ... _ 10 const SIGNER_PRIVATE_KEY = // ... _ 10 const RPC_URL = 'https://rpc.ankr.com/eth_sepolia' Initialize the Safe4337Pack The Safe4337Pack class is exported from the Relay Kit and implements the ERC-4337 to create, sign, and submit Safe user operations. To instantiate this class, the static init() method allows connecting existing Safe accounts (as long as they have the Safe4337Module enabled) or setting a custom configuration to deploy a new Safe account at the time where the first Safe transaction is submitted. New Safe account Existing Safe account When deploying a new Safe account, we need to pass the configuration of the Safe in the options property. In this case, we are configuring a Safe account that will have our signer as the only owner. Optionally, you can track your ERC-4337 Safe transactions on-chain by using the onchainAnalytics property. By default Safe4337Pack is using version 0.2.0 of the Safe 4337 Module that is only compatible with Entrypoint v0.6. If you need to use v0.7 then add the safeModulesVersion property to the options object with the '0.3.0' value. _ 12 const safe4337Pack = await Safe4337Pack.init({ _ 12 provider: RPC_URL, _ 12 signer: SIGNER_PRIVATE_KEY, _ 12 bundlerUrl: `https://api.pimlico.io/v2/11155111/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`, _ 12 // safeModulesVersion: '0.3.0', // Defaults to 0.2.0. If you are using the v0.7 of the EntryPoint set the value to '0.3.0' _ 12 options: { _ 12 owners: [SIGNER_ADDRESS], _ 12 threshold:",
    "title": "Safe accounts with the Safe4337Module – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit",
    "breadcrumbs": [
      {
        "text": "Relay Kit",
        "url": "/sdk/relay-kit"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Safe accounts with the Safe4337Module",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize theSafe4337Pack",
      "Create a user operation",
      "Sign the user operation",
      "Submit the user operation",
      "Check the transaction status",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk#chunk-1",
    "url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "chunk_index": 1,
    "total_chunks": 3,
    "text": "1 _ 12 }, _ 12 onchainAnalytics // Optional _ 12 // ... _ 12 }) By default, the transaction fees will be paid in the native token and extracted from the Safe account, so there must be enough funds in the Safe address. You can also use a paymaster to handle the fees. If you choose to use a paymaster, there are two other ways to initialize the Safe4337Pack . Using an ERC-20 Paymaster Using a verifying Paymaster (Sponsored) A paymaster will execute the transactions and get reimbursed from the Safe account, which must have enough funds in the Safe address in advance. Payment of transaction fees is made using an ERC-20 token specified with the paymasterTokenAddress property. If an ERC-20 token is used, the Safe must approve that token to the paymaster. If no balance is approved, it can be specified using the amountToApprove property. _ 10 const safe4337Pack = await Safe4337Pack.init({ _ 10 // ... _ 10 paymasterOptions: { _ 10 paymasterUrl: `https://api.pimlico.io/v2/11155111/rpc?apikey=${PIMLICO_API_KEY}`, _ 10 paymasterAddress: '0x...', _ 10 paymasterTokenAddress: '0x...', _ 10 amountToApprove // Optional _ 10 } _ 10 }) Create a user operation To create a Safe user operation, use the createTransaction() method, which takes the array of transactions to execute and returns a SafeOperation object. _ 10 // Define the transactions to execute _ 10 const transaction1 = { to, data, value } _ 10 const transaction2 = { to, data, value } _ 10 _ 10 // Build the transaction array _ 10 const transactions = [transaction1, transaction2] _ 10 _ 10 // Create the SafeOperation with all the transactions _ 10 const safeOperation = await safe4337Pack.createTransaction({ transactions }) The safeOperation object has the data and signatures properties, which contain all the information about the transaction batch and the signatures of the Safe owners, respectively. Sign the user operation Before sending the user operation to the bundler, it's required to sign the safeOperation object with the connected signer. The signSafeOperation() method, which receives a SafeOperation object, generates a signature that will be checked when the Safe4337Module validates the user operation. _ 10 const signedSafeOperation = await safe4337Pack.signSafeOperation(identifiedSafeOperation) Submit the user operation Once the safeOperation object is signed, we can call the executeTransaction() method to submit the user operation to the bundler. _ 10 const userOperationHash = await safe4337Pack.executeTransaction({ _ 10 executable: signedSafeOperation _ 10 }) This method returns the hash of the user operation. With it, we can monitor the transaction status using a block explorer or the bundler's API. Check the transaction status To check the transaction status, we can use the getTransactionReceipt() method, which returns the transaction receipt after it's executed. _ 10 let userOperationReceipt = null _ 10 _ 10 while (!userOperationReceipt) { _ 10 // Wait 2 seconds before checking the status again _ 10 await new Promise((resolve) => setTimeout(resolve, 2000)) _ 10 userOperationReceipt = await safe4337Pack.getUserOperationReceipt( _ 10 userOperationHash _ 10 ) _ 10 } In addition, we can use the getUserOperationByHash() method with the returned hash",
    "title": "Safe accounts with the Safe4337Module – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit",
    "breadcrumbs": [
      {
        "text": "Relay Kit",
        "url": "/sdk/relay-kit"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Safe accounts with the Safe4337Module",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize theSafe4337Pack",
      "Create a user operation",
      "Sign the user operation",
      "Submit the user operation",
      "Check the transaction status",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk#chunk-2",
    "url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "chunk_index": 2,
    "total_chunks": 3,
    "text": "to retrieve the user operation object we sent to the bundler. _ 10 const userOperationPayload = await safe4337Pack.getUserOperationByHash( _ 10 userOperationHash _ 10 ) Recap and further reading After following this guide, we are able to deploy new Safe accounts and create, sign, and execute Safe transactions in a batch without the executor needing to have funds to pay for the transaction fees. Learn more about the ERC-4337 standard and the Safe4337Module contract following these links: ERC-4337 website (opens in a new tab) EIP-4337 on Ethereum EIPs (opens in a new tab) Safe4337Module on GitHub (opens in a new tab) [Safe On-chain Identifiers on GitHub]( https://github.com/5afe/safe-onchain-identifiers (opens in a new tab) showcases where and how to add the identifier at the end of your Safe transactions data if you are not using the Relay Kit. Check also the specific code (opens in a new tab) where the identifier is concatenated to the callData . Relay Kit Gelato Relay Was this page helpful? Report issue",
    "title": "Safe accounts with the Safe4337Module – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit",
    "breadcrumbs": [
      {
        "text": "Relay Kit",
        "url": "/sdk/relay-kit"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Safe accounts with the Safe4337Module",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize theSafe4337Pack",
      "Create a user operation",
      "Sign the user operation",
      "Submit the user operation",
      "Check the transaction status",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit/guides/gelato-relay#chunk-0",
    "url": "https://docs.safe.global/sdk/relay-kit/guides/gelato-relay",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "SDK Relay Kit Guides Gelato Relay Integration with Gelato The Gelato relay (opens in a new tab) allows developers to execute gasless transactions. Prerequisites Node.js and npm (opens in a new tab) . Have a Safe account configured with threshold equal to 1, where only one signature is needed to execute transactions. To use Gelato 1Balance an API key (opens in a new tab) is required. Install dependencies _ 10 yarn add ethers @safe-global/relay-kit @safe-global/protocol-kit @safe-global/types-kit Relay Kit options Currently, the Relay Kit is only compatible with the Gelato relay (opens in a new tab) . The Gelato relay can be used in two ways: Gelato 1Balance (opens in a new tab) Gelato SyncFee (opens in a new tab) Gelato 1Balance Gelato 1Balance (opens in a new tab) allows you to execute transactions using a prepaid deposit. This can be used to sponsor transactions to other Safes or even to use a deposit on Polygon to pay the fees for a wallet on another chain. For the 1Balance quickstart tutorial, you will use the Gelato relayer to pay for the gas fees on BNB Chain using the Polygon USDC you have deposited into your Gelato 1Balance account. Setup Start with a 1/1 Safe on BNB Chain (opens in a new tab) . Deposit Polygon USDC into Gelato 1Balance (opens in a new tab) ( transaction 0xa5f38 (opens in a new tab) ). The Safe owner 0x6Dbd26Bca846BDa60A90890cfeF8fB47E7d0f22c (opens in a new tab) signs a transaction to send 0.0005 BNB and submits it to Gelato relay. Track the relay request (opens in a new tab) of Gelato Task ID 0x1bf7 (opens in a new tab) . Transaction 0x814d3 (opens in a new tab) is executed on the blockchain. Use a Safe as the Relay While using Gelato, you can specify that you only want the relay to allow transactions from specific smart contracts. If one of those smart contracts is a Safe smart contract, you will need to either verify the contract on a block explorer or get the ABI of the contract implementation (not the ABI of the smart contract address). This is because the Safe smart contracts use the Proxy Pattern (opens in a new tab) , so the implementation logic for your smart contract exists on a different address. Imports _ 10 import { ethers } from 'ethers' _ 10 import { GelatoRelayPack } from '@safe-global/relay-kit' _ 10 import Safe from '@safe-global/protocol-kit' _ 10 import { _ 10 MetaTransactionData, _ 10 MetaTransactionOptions _ 10 } from '@safe-global/types-kit' Initialize the transaction settings Modify the variables to customize to match your desired transaction settings. _ 10 // https://chainlist.org _ 10 const RPC_URL = 'https://endpoints.omniatech.io/v1/bsc/mainnet/public' _ 10 const OWNER_PRIVATE_KEY = process.env.OWNER_PRIVATE_KEY _ 10 const safeAddress = '0x...' // Safe from which the transaction will be sent _ 10 _ 10 // Any address can be used for destination. In this example, we use vitalik.eth _ 10 const destinationAddress = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045' _ 10 const withdrawAmount = ethers.parseUnits('0.005', 'ether').toString() Create a transaction _ 10",
    "title": "Integration with Gelato – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit",
    "breadcrumbs": [
      {
        "text": "Relay Kit",
        "url": "/sdk/relay-kit"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Integration with Gelato",
      "Prerequisites",
      "Install dependencies",
      "Relay Kit options",
      "Gelato 1Balance",
      "Setup",
      "Use a Safe as the Relay",
      "Imports",
      "Initialize the transaction settings",
      "Create a transaction",
      "Instantiate the Protocol Kit and Relay Kit",
      "Prepare the transaction",
      "Send the transaction to the relay",
      "Gelato SyncFee",
      "Imports",
      "Initialize the transaction settings",
      "Create a transaction",
      "Instantiate the Protocol Kit and Relay Kit",
      "Prepare the transaction",
      "Send the transaction to the relay"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit/guides/gelato-relay#chunk-1",
    "url": "https://docs.safe.global/sdk/relay-kit/guides/gelato-relay",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "// Create a transactions array with one transaction object _ 10 const transactions: MetaTransactionData[] = [{ _ 10 to: destinationAddress, _ 10 data: '0x', _ 10 value: withdrawAmount _ 10 }] _ 10 _ 10 const options: MetaTransactionOptions = { _ 10 isSponsored: true _ 10 } Instantiate the Protocol Kit and Relay Kit _ 10 const protocolKit = await Safe.init({ _ 10 provider: RPC_URL, _ 10 signer: OWNER_PRIVATE_KEY, _ 10 safeAddress _ 10 }) _ 10 _ 10 const relayKit = new GelatoRelayPack({ _ 10 apiKey: process.env.GELATO_RELAY_API_KEY!, _ 10 protocolKit _ 10 }) Prepare the transaction _ 10 const safeTransaction = await relayKit.createTransaction({ _ 10 transactions, _ 10 options _ 10 }) _ 10 _ 10 const signedSafeTransaction = await protocolKit.signTransaction(safeTransaction) Send the transaction to the relay _ 10 const response = await relayKit.executeTransaction({ _ 10 executable: signedSafeTransaction, _ 10 options _ 10 }) _ 10 _ 10 console.log(`Relay Transaction Task ID: https://relay.gelato.digital/tasks/status/${response.taskId}`) Gelato SyncFee Gelato SyncFee (opens in a new tab) allows you to execute a transaction and pay the gas fees directly with funds in your Safe, even if you don't have ETH or the native blockchain token. For the SyncFee quickstart tutorial, you will use the Gelato relayer to pay for the gas fees on the BNB Chain using the BNB you hold in your Safe. No need to have funds on your signer. Imports _ 10 import { ethers } from 'ethers' _ 10 import { GelatoRelayPack } from '@safe-global/relay-kit' _ 10 import Safe from '@safe-global/protocol-kit' _ 10 import { MetaTransactionData } from '@safe-global/types-kit' Initialize the transaction settings Modify the variables to customize to match your desired transaction settings. _ 10 // https://chainlist.org _ 10 const RPC_URL = 'https://endpoints.omniatech.io/v1/bsc/mainnet/public' _ 10 const OWNER_PRIVATE_KEY = process.env.OWNER_PRIVATE_KEY _ 10 const safeAddress = '0x...' // Safe from which the transaction will be sent _ 10 _ 10 // Any address can be used for destination. In this example, we use vitalik.eth _ 10 const destinationAddress = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045' _ 10 const withdrawAmount = ethers.parseUnits('0.005', 'ether').toString() Create a transaction _ 10 // Create a transactions array with one transaction object _ 10 const transactions: MetaTransactionData[] = [{ _ 10 to: destinationAddress, _ 10 data: '0x', _ 10 value: withdrawAmount _ 10 }] Instantiate the Protocol Kit and Relay Kit _ 10 const protocolKit = await Safe.init({ _ 10 provider: RPC_URL, _ 10 signer: OWNER_PRIVATE_KEY, _ 10 safeAddress _ 10 }) _ 10 _ 10 const relayKit = new GelatoRelayPack({ protocolKit }) Prepare the transaction _ 10 const safeTransaction = await relayKit.createTransaction({ transactions }) _ 10 _ 10 const signedSafeTransaction = await protocolKit.signTransaction(safeTransaction) Send the transaction to the relay _ 10 const response = await relayKit.executeTransaction({ _ 10 executable: signedSafeTransaction _ 10 }) _ 10 _ 10 console.log(`Relay Transaction Task ID: https://relay.gelato.digital/tasks/status/${response.taskId}`) ERC-4337 Safe SDK Migrate to v2 Was this page helpful? Report issue",
    "title": "Integration with Gelato – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit",
    "breadcrumbs": [
      {
        "text": "Relay Kit",
        "url": "/sdk/relay-kit"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Integration with Gelato",
      "Prerequisites",
      "Install dependencies",
      "Relay Kit options",
      "Gelato 1Balance",
      "Setup",
      "Use a Safe as the Relay",
      "Imports",
      "Initialize the transaction settings",
      "Create a transaction",
      "Instantiate the Protocol Kit and Relay Kit",
      "Prepare the transaction",
      "Send the transaction to the relay",
      "Gelato SyncFee",
      "Imports",
      "Initialize the transaction settings",
      "Create a transaction",
      "Instantiate the Protocol Kit and Relay Kit",
      "Prepare the transaction",
      "Send the transaction to the relay"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 0,
    "total_chunks": 10,
    "text": "Advanced Safe Modules Smart Account Modules Tutorial Building Applications with Safe Modules This tutorial demonstrates how to: Create a Safe Module Enable a module on a Safe account Execute transactions through the module You will build a TokenWithdrawModule that enables beneficiaries to withdraw ERC20 tokens from a Safe account using off-chain signatures from Safe owners. Prerequisites Experience with Solidity (opens in a new tab) and Hardhat (opens in a new tab) Node.js (opens in a new tab) and npm (opens in a new tab) installed Implementation Details The module gives a third party an allowance via a signature for the token that can freely be used by that third party. In the module this third party is represented as the \"beneficiary\" in the EIP-712 struct (mentioned in the PERMIT_TYPEHASH). To use this allowance the third party / \"beneficiary\" calls the tokenTransfer method and specifies which token to use and who should receive it. The Safe owners grant the permission for token transfer to the third party by signing the EIP-712 struct without requiring Safe owners to execute any on-chain transaction. Limitations Each beneficiary has a sequential nonce, requiring withdrawals to be processed in order The module is bound to a specific token and Safe address at deployment ⚠️ Important Notice: The smart contract code provided in this tutorial is intended solely for educational purposes and serves only as an illustrative example. This example code has not undergone any security audits or formal verification processes. Safe does not guarantee the reliability, security, or correctness of this example code. Before deploying any smart contract code in a production environment, developers must conduct a thorough security audit and ensure rigorous testing procedures have been performed. Project Setup Create a new project directory and initialize npm: _ 10 mkdir safe-module-tutorial && cd safe-module-tutorial _ 10 npm init -y You can choose all default values. Configure Dependencies Add overrides in package.json so that there are no peer dependency related issues. _ 10 { _ 10 // ... existing content ... _ 10 \"overrides\": { _ 10 \"@safe-global/safe-contracts\": { _ 10 \"ethers\": \"^6.13.5\" _ 10 } _ 10 } _ 10 } Install the required dependencies: _ 10 npm add -D hardhat @safe-global/safe-contracts @openzeppelin/contracts hardhat-dependency-compiler Initialize hardhat project _ 10 npx hardhat init Select Create a TypeScript project and leave the default values for the rest of the prompts. Now, try compiling the contracts to ensure everything is set up correctly. _ 10 npx hardhat compile Update hardhat.config.ts When compiling Safe contracts with solidity 0.8.x the bytecode size exceeds the limit of 24KB. To overcome this, set allowUnlimitedContractSize to true in the hardhat config. In practise with production networks, use the officially deployed Safe contracts. Also, add dependencyCompiler to import SafeProxyFactory contract. _ 19 import { HardhatUserConfig } from \"hardhat/config\"; _ 19 import \"@nomicfoundation/hardhat-toolbox\"; _ 19 import \"hardhat-dependency-compiler\"; _ 19 _ 19 const config: HardhatUserConfig = { _ 19 solidity: \"0.8.28\", _ 19 networks: { _ 19 hardhat: { _ 19 allowUnlimitedContractSize: true, // Required for",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-1",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 1,
    "total_chunks": 10,
    "text": "Safe contracts _ 19 }, _ 19 }, _ 19 dependencyCompiler: { _ 19 paths: [ _ 19 \"@safe-global/safe-contracts/contracts/proxies/SafeProxyFactory.sol\", _ 19 ], _ 19 }, _ 19 }; _ 19 _ 19 export default config; Create a new Solidity contract Delete the default contracts/Lock.sol and test file test/Lock.ts and create a new Solidity contract TokenWithdrawModule.sol in the contracts directory. Step 1. Create empty contract _ 11 // SPDX-License-Identifier: LGPL-3.0 _ 11 pragma solidity ^0.8.0; _ 11 // Imports will be added here _ 11 _ 11 contract TokenWithdrawModule { _ 11 // State variables will be added here _ 11 _ 11 // Constructor will be added here _ 11 _ 11 // Functions will be added here _ 11 } Explanation: SPDX License Identifier : Specifies the license type. pragma solidity ^0.8.0 : Defines the Solidity compiler version. contract TokenWithdrawModule : Declares the contract name. Step 2: Import required dependencies _ 10 import \"@safe-global/safe-contracts/contracts/common/Enum.sol\"; _ 10 import \"@safe-global/safe-contracts/contracts/Safe.sol\"; Explanation: Enum.sol : Provides Enum Operation which can have values like Call or DelegateCall . This will be used further in the contract when a module calls a Safe account where the module specifies the operation type. Safe.sol : Includes the Safe contract interface to interact with Safe accounts. Step 3: Define state variables Declare the necessary state variables for the contract. _ 10 bytes32 public immutable PERMIT_TYPEHASH = _ 10 keccak256( _ 10 \"TokenWithdrawModule(uint256 amount,address beneficiary,uint256 nonce,uint256 deadline)\" _ 10 ); _ 10 address public immutable safeAddress; _ 10 address public immutable tokenAddress; _ 10 mapping(address => uint256) public nonces; Explanation: PERMIT_TYPEHASH : Used to construct the signature hash for the token transfer. safeAddress : Stores the Safe contract address. tokenAddress : Stores the ERC20 token contract address. nonces : Tracks unique nonce to prevent replay attacks. Step 4: Create the Constructor Define a constructor to initialize the Safe and token contract addresses. _ 10 constructor(address _tokenAddress, address _safeAddress) { _ 10 tokenAddress = _tokenAddress; _ 10 safeAddress = _safeAddress; _ 10 } Initializes tokenAddress and safeAddress with provided values during deployment. Thus, in this module the token and Safe addresses are fixed. Step 5: Implement the getDomainSeparator function Add a helper function to compute the EIP-712 domain separator. _ 13 function getDomainSeparator() private view returns (bytes32) { _ 13 return keccak256( _ 13 abi.encode( _ 13 keccak256( _ 13 \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\" _ 13 ), _ 13 keccak256(bytes(\"TokenWithdrawModule\")), _ 13 keccak256(bytes(\"1\")), _ 13 block.chainid, _ 13 address(this) _ 13 ) _ 13 ); _ 13 } Explanation: Computes the EIP712Domain separator for the current chain and contract. Ensures compatibility with the EIP-712 standard for off-chain signing. Using a Domain separator ensures that the signature is valid for specific contracts in context and the chain. Thus, preventing replay attacks. Step 6: Implement the tokenTransfer function Add a function to handle token transfers from the Safe. _ 45 function tokenTransfer( _ 45 uint amount, _ 45 address receiver, _ 45 uint256 deadline, _ 45 bytes memory signatures _ 45",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-2",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 2,
    "total_chunks": 10,
    "text": ") public { _ 45 require(deadline >= block.timestamp, \"expired deadline\"); _ 45 _ 45 bytes32 signatureData = keccak256( _ 45 abi.encode( _ 45 PERMIT_TYPEHASH, _ 45 amount, _ 45 msg.sender, _ 45 nonces[msg.sender]++, _ 45 deadline _ 45 ) _ 45 ); _ 45 _ 45 bytes32 hash = keccak256( _ 45 abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), signatureData) _ 45 ); _ 45 _ 45 Safe(payable(safeAddress)).checkSignatures( _ 45 hash, _ 45 abi.encodePacked(signatureData), _ 45 signatures _ 45 ); _ 45 _ 45 bytes memory data = abi.encodeWithSignature( _ 45 \"transfer(address,uint256)\", _ 45 receiver, _ 45 amount _ 45 ); _ 45 _ 45 // Calling `execTransactionFromModule` with the transaction data to execute the token transfer through the Safe account. _ 45 require( _ 45 Safe(payable(safeAddress)).execTransactionFromModule( _ 45 tokenAddress, _ 45 0, _ 45 data, _ 45 Enum.Operation.Call _ 45 ), _ 45 \"Could not execute token transfer\" _ 45 ); _ 45 } Explanation: Parameter Validation : Ensure the deadline is valid. Construct signatureData with the provided details and PERMIT_TYPEHASH . Hash Calculation : Compute the hash using the EIP712 format to ensure signature consistency. Signature Verification : Call checkSignatures on the Safe to verify the signatures provided match the owners of the Safe. Transaction Execution : A module can use execTransactionFromModule or execTransactionFromModuleReturnData function to execute transactions through a Safe account on which the module is enabled. Encode the transfer call using abi.encodeWithSignature . Use execTransactionFromModule to execute the token transfer via the Safe. Ensure execution succeeds, otherwise revert. Final contract code Here is the complete code for reference with comments: _ 104 // SPDX-License-Identifier: LGPL-3.0 _ 104 pragma solidity ^0.8.0; _ 104 import \"@safe-global/safe-contracts/contracts/common/Enum.sol\"; _ 104 import \"@safe-global/safe-contracts/contracts/Safe.sol\"; _ 104 _ 104 /** _ 104 * @title TokenWithdrawModule _ 104 * @dev This contract implements a Safe module that enables a user with a valid signature to _ 104 * transfer ERC20 tokens from a Safe contract to a specified receiver. _ 104 */ _ 104 contract TokenWithdrawModule { _ 104 bytes32 public immutable PERMIT_TYPEHASH = _ 104 keccak256( _ 104 \"TokenWithdrawModule(uint256 amount,address beneficiary,uint256 nonce,uint256 deadline)\" _ 104 ); _ 104 address public immutable safeAddress; _ 104 address public immutable tokenAddress; _ 104 mapping(address => uint256) public nonces; _ 104 _ 104 /** _ 104 * @dev Constructor function for the contract _ 104 * @param _tokenAddress address of the ERC20 token contract _ 104 * @param _safeAddress address of the Safe contract _ 104 */ _ 104 constructor(address _tokenAddress, address _safeAddress) { _ 104 tokenAddress = _tokenAddress; _ 104 safeAddress = _safeAddress; _ 104 } _ 104 _ 104 /** _ 104 * @dev Generates the EIP-712 domain separator for the contract. _ 104 * _ 104 * @return The EIP-712 domain separator. _ 104 */ _ 104 function getDomainSeparator() private view returns (bytes32) { _ 104 return _ 104 keccak256( _ 104 abi.encode( _ 104 keccak256( _ 104 \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\" _ 104 ), _ 104 keccak256(bytes(\"TokenWithdrawModule\")), _ 104 keccak256(bytes(\"1\")), _ 104 block.chainid, _ 104 address(this) _",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-3",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 3,
    "total_chunks": 10,
    "text": "104 ) _ 104 ); _ 104 } _ 104 _ 104 /** _ 104 * @dev Transfers the specified amount of tokens to a receiver address. The msg.sender must hold a valid signature. _ 104 * The msg.sender address must be used as the `beneficiary` parameter in the EIP-712 structured data for _ 104 * signature generation. However, msg.sender can specify a different `receiver` address to receive the tokens _ 104 * when withdrawing the tokens. _ 104 * @param amount amount of tokens to be transferred _ 104 * @param receiver address to which the tokens will be transferred _ 104 * @param deadline deadline for the validity of the signature _ 104 * @param signatures signatures of the Safe owner(s) _ 104 */ _ 104 function tokenTransfer( _ 104 uint amount, _ 104 address receiver, _ 104 uint256 deadline, _ 104 bytes memory signatures _ 104 ) public { _ 104 require(deadline >= block.timestamp, \"expired deadline\"); _ 104 _ 104 bytes32 signatureData = keccak256( _ 104 abi.encode( _ 104 PERMIT_TYPEHASH, _ 104 amount, _ 104 msg.sender, _ 104 nonces[msg.sender]++, _ 104 deadline _ 104 ) _ 104 ); _ 104 _ 104 bytes32 hash = keccak256( _ 104 abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), signatureData) _ 104 ); _ 104 _ 104 Safe(payable(safeAddress)).checkSignatures( _ 104 hash, _ 104 abi.encodePacked(signatureData), _ 104 signatures _ 104 ); _ 104 _ 104 bytes memory data = abi.encodeWithSignature( _ 104 \"transfer(address,uint256)\", _ 104 receiver, _ 104 amount _ 104 ); _ 104 _ 104 require( _ 104 Safe(payable(safeAddress)).execTransactionFromModule( _ 104 tokenAddress, _ 104 0, _ 104 data, _ 104 Enum.Operation.Call _ 104 ), _ 104 \"Could not execute token transfer\" _ 104 ); _ 104 } _ 104 } Create TestToken.sol contract Create a new file in the contracts directory named TestToken.sol and add the following code: _ 16 // SPDX-License-Identifier: LGPL-3.0 _ 16 pragma solidity ^0.8.0; _ 16 _ 16 import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; _ 16 import \"@openzeppelin/contracts/access/Ownable.sol\"; _ 16 _ 16 contract TestToken is ERC20, Ownable { _ 16 constructor( _ 16 string memory _name, _ 16 string memory _symbol _ 16 ) ERC20(_name, _symbol) Ownable(msg.sender){} _ 16 _ 16 function mint(address to, uint256 amount) public onlyOwner { _ 16 _mint(to, amount); _ 16 } _ 16 } Testing the contract Step 1: Create test/utils/utils.ts file Create a new file named utils.ts in the test/utils directory and include the code below. _ 76 import { ethers } from \"hardhat\"; _ 76 import { Signer, AddressLike, BigNumberish, ZeroAddress } from \"ethers\"; _ 76 import { Safe } from \"../../typechain-types\"; _ 76 _ 76 /** _ 76 * Executes a transaction on the Safe contract. _ 76 * @param wallets - The signers of the transaction. _ 76 * @param safe - The Safe contract instance. _ 76 * @param to - The address to send the transaction to. _ 76 * @param value - The value to send with the transaction. _ 76 * @param data - The data to send with the transaction. _ 76",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-4",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 4,
    "total_chunks": 10,
    "text": "* @param operation - The operation type (0 for call, 1 for delegate call). _ 76 */ _ 76 const execTransaction = async function ( _ 76 wallets: Signer[], _ 76 safe: Safe, _ 76 to: AddressLike, _ 76 value: BigNumberish, _ 76 data: string, _ 76 operation: number, _ 76 ): Promise<void> { _ 76 // Get the current nonce of the Safe contract _ 76 const nonce = await safe.nonce(); _ 76 _ 76 // Get the transaction hash for the Safe transaction _ 76 const transactionHash = await safe.getTransactionHash( _ 76 to, _ 76 value, _ 76 data, _ 76 operation, _ 76 0, _ 76 0, _ 76 0, _ 76 ZeroAddress, _ 76 ZeroAddress, _ 76 nonce _ 76 ); _ 76 _ 76 let signatureBytes = \"0x\"; _ 76 const bytesDataHash = ethers.getBytes(transactionHash); _ 76 _ 76 // Get the addresses of the signers _ 76 const addresses = await Promise.all(wallets.map(wallet => wallet.getAddress())); _ 76 // Sort the signers by their addresses _ 76 const sorted = wallets.sort((a, b) => { _ 76 const addressA = addresses[wallets.indexOf(a)]; _ 76 const addressB = addresses[wallets.indexOf(b)]; _ 76 return addressA.localeCompare(addressB, \"en\", { sensitivity: \"base\" }); _ 76 }); _ 76 _ 76 // Sign the transaction hash with each signer _ 76 for (let i = 0; i < sorted.length; i++) { _ 76 const flatSig = (await sorted[i].signMessage(bytesDataHash)) _ 76 .replace(/1b$/, \"1f\") _ 76 .replace(/1c$/, \"20\"); _ 76 signatureBytes += flatSig.slice(2); _ 76 } _ 76 _ 76 // Execute the transaction on the Safe contract _ 76 await safe.execTransaction( _ 76 to, _ 76 value, _ 76 data, _ 76 operation, _ 76 0, _ 76 0, _ 76 0, _ 76 ZeroAddress, _ 76 ZeroAddress, _ 76 signatureBytes _ 76 ); _ 76 }; _ 76 _ 76 export { _ 76 execTransaction, _ 76 }; Explanation: This file contains utility function to execute transaction through the Safe account. Step 2: Start with a boilerplate test file Create a new file named TokenWithdrawModule.test.ts and include the following basic structure that will be filled in later steps (ignore the warnings about unused imports): _ 30 import { ethers } from \"hardhat\"; _ 30 import { expect } from \"chai\"; _ 30 import { Signer, TypedDataDomain, ZeroAddress } from \"ethers\"; _ 30 import { Safe, TestToken, TokenWithdrawModule } from \"../typechain-types\"; _ 30 import { execTransaction } from \"./utils/utils\"; _ 30 _ 30 describe(\"TokenWithdrawModule Tests\", function () { _ 30 // Define variables _ 30 let deployer: Signer; _ 30 let alice: Signer; _ 30 let bob: Signer; _ 30 let charlie: Signer; _ 30 let masterCopy: any; _ 30 let token: TestToken; _ 30 let safe: Safe; _ 30 let safeAddress: string; _ 30 let chainId: bigint; _ 30 _ 30 // Before hook to setup the contracts _ 30 before(async () => { _ 30 }); _ 30 _ 30 // Enable the module in the Safe _ 30 const enableModule = async () =>",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-5",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 5,
    "total_chunks": 10,
    "text": "{ _ 30 } _ 30 _ 30 // Add your test cases here _ 30 it(\"Should successfully transfer tokens to bob\", async function () { _ 30 }); _ 30 }); Step 3: Setup contracts and variables in before hook _ 55 // Setup signers and deploy contracts before running tests _ 55 before(async () => { _ 55 [deployer, alice, bob, charlie] = await ethers.getSigners(); _ 55 _ 55 chainId = (await ethers.provider.getNetwork()).chainId; _ 55 const safeFactory = await ethers.getContractFactory(\"Safe\", deployer); _ 55 masterCopy = await safeFactory.deploy(); _ 55 _ 55 // Deploy a new token contract _ 55 token = await ( _ 55 await ethers.getContractFactory(\"TestToken\", deployer) _ 55 ).deploy(\"test\", \"T\"); _ 55 _ 55 // Deploy a new SafeProxyFactory contract _ 55 const proxyFactory = await ( _ 55 await ethers.getContractFactory(\"SafeProxyFactory\", deployer) _ 55 ).deploy(); _ 55 _ 55 // Setup the Safe, Step 1, generate transaction data _ 55 const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [ _ 55 [await alice.getAddress()], _ 55 1, _ 55 ZeroAddress, _ 55 \"0x\", _ 55 ZeroAddress, _ 55 ZeroAddress, _ 55 0, _ 55 ZeroAddress, _ 55 ]); _ 55 _ 55 // Read the safe address by executing the static call to createProxyWithNonce function _ 55 safeAddress = await proxyFactory.createProxyWithNonce.staticCall( _ 55 await masterCopy.getAddress(), _ 55 safeData, _ 55 0n _ 55 ); _ 55 _ 55 if (safeAddress === ZeroAddress) { _ 55 throw new Error(\"Safe address not found\"); _ 55 } _ 55 _ 55 // Setup the Safe, Step 2, execute the transaction _ 55 await proxyFactory.createProxyWithNonce( _ 55 await masterCopy.getAddress(), _ 55 safeData, _ 55 0n _ 55 ); _ 55 _ 55 safe = await ethers.getContractAt(\"Safe\", safeAddress); _ 55 _ 55 // Mint tokens to the safe address _ 55 await token _ 55 .connect(deployer) _ 55 .mint(safeAddress, BigInt(10) ** BigInt(18) * BigInt(100000)); _ 55 }); This step sets up the test environment by deploying and configuring the necessary contracts. Please note that: Alice is the only owner of the Safe and a threshold of 1 is set. Thus, only Alice's signature is required to execute transactions. We can receive the Safe address before deploying the Safe. Step 4: Deploy and enable module in enableModule function _ 25 // A Safe Module is a smart contract that is allowed to execute transactions on behalf of a Safe Smart Account. _ 25 // This function deploys the TokenWithdrawModule contract and enables it in the Safe. _ 25 const enableModule = async (): Promise<{ _ 25 tokenWithdrawModule: TokenWithdrawModule; _ 25 }> => { _ 25 // Deploy the TokenWithdrawModule contract and pass the token and safe address as arguments _ 25 const tokenWithdrawModule = await ( _ 25 await ethers.getContractFactory(\"TokenWithdrawModule\", deployer) _ 25 ).deploy(token.target, safeAddress); _ 25 _ 25 // Enable the module in the safe, Step 1, generate transaction data _ 25 const enableModuleData = masterCopy.interface.encodeFunctionData( _ 25 \"enableModule\", _ 25 [tokenWithdrawModule.target] _ 25 ); _ 25 _ 25 // Enable the module in the safe,",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-6",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 6,
    "total_chunks": 10,
    "text": "Step 2, execute the transaction _ 25 await execTransaction([alice], safe, safe.target, 0, enableModuleData, 0); _ 25 _ 25 // Verify that the module is enabled _ 25 expect(await safe.isModuleEnabled.staticCall(tokenWithdrawModule.target)).to _ 25 .be.true; _ 25 _ 25 return { tokenWithdrawModule }; _ 25 }; This step deploys the TokenWithdrawModule contract and enables it in the Safe. Please note that: Alice as the owner of the Safe is required to enable the module. The module is enabled by calling the enableModule function on the Safe contract. The enableModule function is called with the address of the newly deployed module. ⚠️ Security Note: Only trusted and audited code should be enabled as a module, since modules have full access to the Safe's assets. A malicious module could drain all funds. Step 5: Add test case _ 71 _ 71 // Test case to verify token transfer to bob _ 71 it(\"Should successfully transfer tokens to bob\", async function () { _ 71 // Enable the module in the Safe _ 71 const { tokenWithdrawModule } = await enableModule(); _ 71 _ 71 const amount = 10000000000000000000n; // 10 * 10^18 _ 71 const deadline = 100000000000000n; _ 71 const nonce = await tokenWithdrawModule.nonces(await bob.getAddress()); _ 71 _ 71 // Our module expects a EIP-712 typed signature, so we need to define the EIP-712 domain, ... _ 71 const domain: TypedDataDomain = { _ 71 name: \"TokenWithdrawModule\", _ 71 version: \"1\", _ 71 chainId: chainId, _ 71 verifyingContract: await tokenWithdrawModule.getAddress(), _ 71 }; _ 71 _ 71 // ... and EIP-712 types ... _ 71 const types = { _ 71 TokenWithdrawModule: [ _ 71 { name: \"amount\", type: \"uint256\" }, _ 71 { name: \"beneficiary\", type: \"address\" }, _ 71 { name: \"nonce\", type: \"uint256\" }, _ 71 { name: \"deadline\", type: \"uint256\" }, _ 71 ], _ 71 }; _ 71 _ 71 // ... and EIP-712 values ... _ 71 const value = { _ 71 amount: amount, _ 71 beneficiary: await bob.getAddress(), _ 71 nonce: nonce, _ 71 deadline: deadline, _ 71 }; _ 71 _ 71 // ... and finally hash the data using EIP-712 _ 71 const digest = ethers.TypedDataEncoder.hash(domain, types, value); _ 71 const bytesDataHash = ethers.getBytes(digest); _ 71 let signatureBytes = \"0x\"; _ 71 _ 71 // Alice signs the digest _ 71 const flatSig = (await alice.signMessage(bytesDataHash)) _ 71 .replace(/1b$/, \"1f\") _ 71 .replace(/1c$/, \"20\"); _ 71 signatureBytes += flatSig.slice(2); _ 71 _ 71 // We want to make sure that an invalid signer cannot call the module even with a valid signature _ 71 // We test this before the valid transaction, because it would fail because of an invalid nonce otherwise _ 71 await expect( _ 71 tokenWithdrawModule _ 71 .connect(charlie) _ 71 .tokenTransfer( _ 71 amount, _ 71 await charlie.getAddress(), _ 71 deadline, _ 71 signatureBytes _ 71 ) _ 71 ).to.be.revertedWith(\"GS026\"); _ 71 _ 71 // Now we use the signature to transfer via our module _ 71 await tokenWithdrawModule _",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-7",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 7,
    "total_chunks": 10,
    "text": "71 .connect(bob) _ 71 .tokenTransfer(amount, await bob.getAddress(), deadline, signatureBytes); _ 71 _ 71 // Verify the token balance of bob (should be 10000000000000000000) _ 71 const balanceBob = await token.balanceOf.staticCall(await bob.getAddress()); _ 71 expect(balanceBob).to.be.equal(amount); _ 71 _ 71 // All done. _ 71 }); This step tests the token transfer functionality of the module. Note that: The module can execute transactions on behalf of the Safe by calling the execTransactionFromModule function. We added an security check to the module that checks if the signers of a Safe signed the typed EIP-712 data. A module without this check could be called by any address. Final test code Here is the complete code for reference: _ 176 // Import necessary libraries and types _ 176 import { ethers } from \"hardhat\"; _ 176 import { expect } from \"chai\"; _ 176 import { Signer, TypedDataDomain, ZeroAddress } from \"ethers\"; _ 176 import { _ 176 Safe, _ 176 TestToken, _ 176 TokenWithdrawModule, _ 176 } from \"../typechain-types\"; _ 176 import { execTransaction } from \"./utils/utils\"; _ 176 _ 176 describe(\"TokenWithdrawModule Tests\", function () { _ 176 // Define variables _ 176 let deployer: Signer; _ 176 let alice: Signer; _ 176 let bob: Signer; _ 176 let charlie: Signer; _ 176 let masterCopy: any; _ 176 let token: TestToken; _ 176 let safe: Safe; _ 176 let safeAddress: string; _ 176 let chainId: bigint; _ 176 _ 176 // Setup signers and deploy contracts before running tests _ 176 before(async () => { _ 176 [deployer, alice, bob, charlie] = await ethers.getSigners(); _ 176 _ 176 chainId = (await ethers.provider.getNetwork()).chainId; _ 176 const safeFactory = await ethers.getContractFactory(\"Safe\", deployer); _ 176 masterCopy = await safeFactory.deploy(); _ 176 _ 176 // Deploy a new token contract _ 176 token = await ( _ 176 await ethers.getContractFactory(\"TestToken\", deployer) _ 176 ).deploy(\"test\", \"T\"); _ 176 _ 176 // Deploy a new SafeProxyFactory contract _ 176 const proxyFactory = await ( _ 176 await ethers.getContractFactory(\"SafeProxyFactory\", deployer) _ 176 ).deploy(); _ 176 _ 176 // Setup the Safe, Step 1, generate transaction data _ 176 const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [ _ 176 [await alice.getAddress()], _ 176 1, _ 176 ZeroAddress, _ 176 \"0x\", _ 176 ZeroAddress, _ 176 ZeroAddress, _ 176 0, _ 176 ZeroAddress, _ 176 ]); _ 176 _ 176 // Read the safe address by executing the static call to createProxyWithNonce function _ 176 safeAddress = await proxyFactory.createProxyWithNonce.staticCall( _ 176 await masterCopy.getAddress(), _ 176 safeData, _ 176 0n _ 176 ); _ 176 _ 176 if (safeAddress === ZeroAddress) { _ 176 throw new Error(\"Safe address not found\"); _ 176 } _ 176 _ 176 // Setup the Safe, Step 2, execute the transaction _ 176 await proxyFactory.createProxyWithNonce( _ 176 await masterCopy.getAddress(), _ 176 safeData, _ 176 0n _ 176 ); _ 176 _ 176 safe = await ethers.getContractAt(\"Safe\", safeAddress); _ 176 _ 176 // Mint tokens to the safe address _ 176 await token _ 176 .connect(deployer) _ 176 .mint(safeAddress, BigInt(10) ** BigInt(18) *",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-8",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 8,
    "total_chunks": 10,
    "text": "BigInt(100000)); _ 176 }); _ 176 _ 176 // A Safe Module is a smart contract that is allowed to execute transactions on behalf of a Safe Smart Account. _ 176 // This function deploys the TokenWithdrawModule contract and enables it in the Safe. _ 176 const enableModule = async (): Promise<{ _ 176 tokenWithdrawModule: TokenWithdrawModule; _ 176 }> => { _ 176 // Deploy the TokenWithdrawModule contract and pass the token and safe address as arguments _ 176 const tokenWithdrawModule = await ( _ 176 await ethers.getContractFactory(\"TokenWithdrawModule\", deployer) _ 176 ).deploy(token.target, safeAddress); _ 176 _ 176 // Enable the module in the safe, Step 1, generate transaction data _ 176 const enableModuleData = masterCopy.interface.encodeFunctionData( _ 176 \"enableModule\", _ 176 [tokenWithdrawModule.target] _ 176 ); _ 176 _ 176 // Enable the module in the safe, Step 2, execute the transaction _ 176 await execTransaction([alice], safe, safe.target, 0, enableModuleData, 0); _ 176 _ 176 // Verify that the module is enabled _ 176 expect(await safe.isModuleEnabled.staticCall(tokenWithdrawModule.target)).to _ 176 .be.true; _ 176 _ 176 return { tokenWithdrawModule }; _ 176 }; _ 176 _ 176 // Test case to verify token transfer to bob _ 176 it(\"Should successfully transfer tokens to bob\", async function () { _ 176 // Enable the module in the Safe _ 176 const { tokenWithdrawModule } = await enableModule(); _ 176 _ 176 const amount = 10000000000000000000n; // 10 * 10^18 _ 176 const deadline = 100000000000000n; _ 176 const nonce = await tokenWithdrawModule.nonces(await bob.getAddress()); _ 176 _ 176 // Our module expects a EIP-712 typed signature, so we need to define the EIP-712 domain, ... _ 176 const domain: TypedDataDomain = { _ 176 name: \"TokenWithdrawModule\", _ 176 version: \"1\", _ 176 chainId: chainId, _ 176 verifyingContract: await tokenWithdrawModule.getAddress(), _ 176 }; _ 176 _ 176 // ... and EIP-712 types ... _ 176 const types = { _ 176 TokenWithdrawModule: [ _ 176 { name: \"amount\", type: \"uint256\" }, _ 176 { name: \"beneficiary\", type: \"address\" }, _ 176 { name: \"nonce\", type: \"uint256\" }, _ 176 { name: \"deadline\", type: \"uint256\" }, _ 176 ], _ 176 }; _ 176 _ 176 // ... and EIP-712 values ... _ 176 const value = { _ 176 amount: amount, _ 176 beneficiary: await bob.getAddress(), _ 176 nonce: nonce, _ 176 deadline: deadline, _ 176 }; _ 176 _ 176 // ... and finally hash the data using EIP-712 _ 176 const digest = ethers.TypedDataEncoder.hash(domain, types, value); _ 176 const bytesDataHash = ethers.getBytes(digest); _ 176 let signatureBytes = \"0x\"; _ 176 _ 176 // Alice signs the digest _ 176 const flatSig = (await alice.signMessage(bytesDataHash)) _ 176 .replace(/1b$/, \"1f\") _ 176 .replace(/1c$/, \"20\"); _ 176 signatureBytes += flatSig.slice(2); _ 176 _ 176 // We want to make sure that an invalid signer cannot call the module even with a valid signature _ 176 // We test this before the valid transaction, because it would fail because of an invalid nonce otherwise _ 176 await expect( _ 176",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial#chunk-9",
    "url": "https://docs.safe.global/advanced/smart-account-modules/smart-account-modules-tutorial",
    "chunk_index": 9,
    "total_chunks": 10,
    "text": "tokenWithdrawModule _ 176 .connect(charlie) _ 176 .tokenTransfer( _ 176 amount, _ 176 await charlie.getAddress(), _ 176 deadline, _ 176 signatureBytes _ 176 ) _ 176 ).to.be.revertedWith(\"GS026\"); _ 176 _ 176 // Now we use the signature to transfer via our module _ 176 await tokenWithdrawModule _ 176 .connect(bob) _ 176 .tokenTransfer(amount, await bob.getAddress(), deadline, signatureBytes); _ 176 _ 176 // Verify the token balance of bob (should be 10000000000000000000) _ 176 const balanceBob = await token.balanceOf.staticCall(await bob.getAddress()); _ 176 expect(balanceBob).to.be.equal(amount); _ 176 _ 176 // All done. _ 176 }); _ 176 }); Run the tests _ 10 npx hardhat test Congratulations! You have successfully created, enabled and tested a Safe Module. Do more with Safe and Safe Modules Did you encounter any difficulties? Let us know by opening an issue (opens in a new tab) or asking a question on Stack Exchange (opens in a new tab) with the safe-core tag. Safe Modules Safe Guards Was this page helpful? Report issue",
    "title": "Building Applications with Safe Modules – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Modules",
        "url": "/advanced/smart-account-modules"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building Applications with Safe Modules",
      "Prerequisites",
      "Implementation Details",
      "Limitations",
      "Project Setup",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Update hardhat.config.ts",
      "Create a new Solidity contract",
      "Step 1. Create empty contract",
      "Step 2: Import required dependencies",
      "Step 3: Define state variables",
      "Step 4: Create the Constructor",
      "Step 5: Implement thegetDomainSeparatorfunction",
      "Step 6: Implement thetokenTransferfunction",
      "Final contract code",
      "Create TestToken.sol contract",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Deploy and enable module inenableModulefunction",
      "Step 5: Add test case",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Safe Modules"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "chunk_index": 0,
    "total_chunks": 6,
    "text": "Advanced Safe Guards Smart Account Guard Tutorial Building a Guard for Safe Smart Account This tutorial demonstrates how to build a custom Guard contract that adds security restrictions to a Safe Smart Account. You'll learn how to: Create a Safe Guard that prevents delegate calls Enable the Guard on a Safe Smart Account Write comprehensive tests for the Guard You'll build a NoDelegatecallGuard that blocks delegatecall operations through the Safe account. While this is a simple example, the same principles can be used to build more complex Guards for your specific security needs. A Safe account supports two types of transactions: Safe Transaction : Executed through the Safe owners with required signatures Module Transaction : Executed through an enabled Safe Module This tutorial focuses on Safe Transactions, as Guards only apply to those. Understanding Safe Guards Before we dive into the code, let's understand what Guards do: Guards are contracts that can inspect and validate transactions before and after they are executed by a Safe They implement a standard interface with two key functions: checkTransaction : Called before execution to validate the transaction checkAfterExecution : Called after execution for post-transaction checks Guards can block transactions by reverting if validation fails ⚠️ Important Notice: The smart contract code provided in this tutorial is intended solely for educational purposes and serves only as an illustrative example. This example code has not undergone any security audits or formal verification processes. Safe does not guarantee the reliability, security, or correctness of this example code. Before deploying any smart contract code in a production environment, developers must conduct a thorough security audit and ensure rigorous testing procedures have been performed. ⚠️ Only enable Guards from trusted and audited code. A malicious Guard could block all transactions and make your Safe unusable. Prerequisites Before starting this tutorial, make sure you have: Experience with Solidity (opens in a new tab) and Hardhat (opens in a new tab) Node.js (opens in a new tab) and npm (opens in a new tab) installed Basic understanding of Smart Account concepts Project Setup Initialize Project Create a new project directory and initialize npm: _ 10 mkdir safe-guard-tutorial && cd safe-guard-tutorial _ 10 npm init -y Configure Dependencies Add overrides in package.json so that there are no peer dependency related issues. _ 10 { _ 10 // ... existing content ... _ 10 \"overrides\": { _ 10 \"@safe-global/safe-contracts\": { _ 10 \"ethers\": \"^6.13.5\" _ 10 } _ 10 } _ 10 } Install the required dependencies: _ 10 npm add -D hardhat @safe-global/safe-contracts hardhat-dependency-compiler Initialize hardhat project _ 10 npx hardhat init Select Create a TypeScript project and leave the default values for the rest of the prompts. Now, try compiling the contracts to ensure everything is set up correctly. _ 10 npx hardhat compile When compiling Safe contracts with solidity 0.8.x the bytecode size exceeds the limit of 24KB. To overcome this, set allowUnlimitedContractSize to true in the hardhat config. In practise with production networks, use the officially deployed Safe contracts.",
    "title": "Building a Guard for Safe Smart Account – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Guards",
        "url": "/advanced/smart-account-guards"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building a Guard for Safe Smart Account",
      "Understanding Safe Guards",
      "Prerequisites",
      "Project Setup",
      "Initialize Project",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Create a new Solidity contract",
      "Step 1. Create NoDelegatecallGuard contract",
      "Step 2: ImplementcheckTransactionfunction",
      "Step 3: ImplementcheckAfterExecutionfunction",
      "Final contract code",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Add test cases",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Guard"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial#chunk-1",
    "url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "chunk_index": 1,
    "total_chunks": 6,
    "text": "Also, add dependencyCompiler to import SafeProxyFactory and Safe contracts. Update your hardhat.config.ts : _ 20 import { HardhatUserConfig } from \"hardhat/config\"; _ 20 import \"@nomicfoundation/hardhat-toolbox\"; _ 20 import \"hardhat-dependency-compiler\"; _ 20 _ 20 const config: HardhatUserConfig = { _ 20 solidity: \"0.8.28\", _ 20 networks: { _ 20 hardhat: { _ 20 allowUnlimitedContractSize: true, // Required for Safe contracts _ 20 }, _ 20 }, _ 20 dependencyCompiler: { _ 20 paths: [ _ 20 \"@safe-global/safe-contracts/contracts/proxies/SafeProxyFactory.sol\", _ 20 \"@safe-global/safe-contracts/contracts/Safe.sol\", _ 20 ], _ 20 }, _ 20 }; _ 20 _ 20 export default config; Create a new Solidity contract Delete the default contracts/Lock.sol and test file test/Lock.ts and create a new Solidity contract NoDelegatecallGuard.sol in the contracts directory. Step 1. Create NoDelegatecallGuard contract _ 10 // SPDX-License-Identifier: LGPL-3.0 _ 10 pragma solidity ^0.8.0; _ 10 import { BaseGuard } from \"@safe-global/safe-contracts/contracts/base/GuardManager.sol\"; _ 10 import { Enum } from \"@safe-global/safe-contracts/contracts/common/Enum.sol\"; _ 10 _ 10 contract NoDelegatecallGuard is BaseGuard { _ 10 error DelegatecallNotAllowed(); _ 10 _ 10 // Functions will be added here _ 10 } Explanation: BaseGuard.sol : BaseGuard is an abstract contract that implements ERC-165 and inherits the Guard interface with two functions: checkTransaction : This function is called before Safe transaction is executed. checkAfterExecution : This function is called after Safe transaction is executed. Enum.sol : Provides Enum Operation which can have values like Call or DelegateCall . DelegatecallNotAllowed is a custom error type that will be used to revert the transaction if delegatecall is detected. Step 2: Implement checkTransaction function _ 17 function checkTransaction( _ 17 address /*to*/, _ 17 uint256 /*value*/, _ 17 bytes memory /*data*/, _ 17 Enum.Operation operation, _ 17 uint256 /*safeTxGas*/, _ 17 uint256 /*baseGas*/, _ 17 uint256 /*gasPrice*/, _ 17 address /*gasToken*/, _ 17 address payable /*refundReceiver*/, _ 17 bytes memory /*signatures*/, _ 17 address /*msgSender*/ _ 17 ) external { _ 17 if(operation == Enum.Operation.DelegateCall) { _ 17 revert DelegatecallNotAllowed(); _ 17 } _ 17 } Explanation: The checkTransaction function checks if the operation type is DelegateCall . If it is, the function reverts with a custom error DelegatecallNotAllowed . Step 3: Implement checkAfterExecution function _ 10 function checkAfterExecution(bytes32 txHash, bool success) external { _ 10 } Explanation: The checkAfterExecution function is empty as we do not need to perform any action after the transaction is executed. Final contract code _ 32 // SPDX-License-Identifier: UNLICENSED _ 32 pragma solidity ^0.8.28; _ 32 _ 32 import { BaseGuard } from \"@safe-global/safe-contracts/contracts/base/GuardManager.sol\"; _ 32 import { Enum } from \"@safe-global/safe-contracts/contracts/common/Enum.sol\"; _ 32 _ 32 contract NoDelegatecallGuard is BaseGuard { _ 32 _ 32 error DelegatecallNotAllowed(); _ 32 _ 32 function checkTransaction( _ 32 address /*to*/, _ 32 uint256 /*value*/, _ 32 bytes memory /*data*/, _ 32 Enum.Operation operation, _ 32 uint256 /*safeTxGas*/, _ 32 uint256 /*baseGas*/, _ 32 uint256 /*gasPrice*/, _ 32 address /*gasToken*/, _ 32 address payable /*refundReceiver*/, _ 32 bytes memory /*signatures*/, _ 32 address /*msgSender*/ _ 32 ) external { _ 32 if(operation == Enum.Operation.DelegateCall) { _ 32 revert",
    "title": "Building a Guard for Safe Smart Account – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Guards",
        "url": "/advanced/smart-account-guards"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building a Guard for Safe Smart Account",
      "Understanding Safe Guards",
      "Prerequisites",
      "Project Setup",
      "Initialize Project",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Create a new Solidity contract",
      "Step 1. Create NoDelegatecallGuard contract",
      "Step 2: ImplementcheckTransactionfunction",
      "Step 3: ImplementcheckAfterExecutionfunction",
      "Final contract code",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Add test cases",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Guard"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial#chunk-2",
    "url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "chunk_index": 2,
    "total_chunks": 6,
    "text": "DelegatecallNotAllowed(); _ 32 } _ 32 } _ 32 _ 32 function checkAfterExecution(bytes32 txHash, bool success) external { _ 32 _ 32 } _ 32 } Testing the contract Step 1: Create test/utils/utils.ts file Create a new file named utils.ts in the test/utils directory and include the code below. _ 76 import { ethers } from \"hardhat\"; _ 76 import { Signer, AddressLike, BigNumberish, ZeroAddress } from \"ethers\"; _ 76 import { Safe } from \"../../typechain-types\"; _ 76 _ 76 /** _ 76 * Executes a transaction on the Safe contract. _ 76 * @param wallets - The signers of the transaction. _ 76 * @param safe - The Safe contract instance. _ 76 * @param to - The address to send the transaction to. _ 76 * @param value - The value to send with the transaction. _ 76 * @param data - The data to send with the transaction. _ 76 * @param operation - The operation type (0 for call, 1 for delegate call). _ 76 */ _ 76 const execTransaction = async function ( _ 76 wallets: Signer[], _ 76 safe: Safe, _ 76 to: AddressLike, _ 76 value: BigNumberish, _ 76 data: string, _ 76 operation: number, _ 76 ): Promise<void> { _ 76 // Get the current nonce of the Safe contract _ 76 const nonce = await safe.nonce(); _ 76 _ 76 // Get the transaction hash for the Safe transaction _ 76 const transactionHash = await safe.getTransactionHash( _ 76 to, _ 76 value, _ 76 data, _ 76 operation, _ 76 0, _ 76 0, _ 76 0, _ 76 ZeroAddress, _ 76 ZeroAddress, _ 76 nonce _ 76 ); _ 76 _ 76 let signatureBytes = \"0x\"; _ 76 const bytesDataHash = ethers.getBytes(transactionHash); _ 76 _ 76 // Get the addresses of the signers _ 76 const addresses = await Promise.all(wallets.map(wallet => wallet.getAddress())); _ 76 // Sort the signers by their addresses _ 76 const sorted = wallets.sort((a, b) => { _ 76 const addressA = addresses[wallets.indexOf(a)]; _ 76 const addressB = addresses[wallets.indexOf(b)]; _ 76 return addressA.localeCompare(addressB, \"en\", { sensitivity: \"base\" }); _ 76 }); _ 76 _ 76 // Sign the transaction hash with each signer _ 76 for (let i = 0; i < sorted.length; i++) { _ 76 const flatSig = (await sorted[i].signMessage(bytesDataHash)) _ 76 .replace(/1b$/, \"1f\") _ 76 .replace(/1c$/, \"20\"); _ 76 signatureBytes += flatSig.slice(2); _ 76 } _ 76 _ 76 // Execute the transaction on the Safe contract _ 76 await safe.execTransaction( _ 76 to, _ 76 value, _ 76 data, _ 76 operation, _ 76 0, _ 76 0, _ 76 0, _ 76 ZeroAddress, _ 76 ZeroAddress, _ 76 signatureBytes _ 76 ); _ 76 }; _ 76 _ 76 export { _ 76 execTransaction, _ 76 }; Explanation: This file contains utility function to execute transaction through the Safe account. Step 2: Start with a boilerplate test file Create a new file named NoDelegatecallGuard.test.ts and include the following basic structure that will",
    "title": "Building a Guard for Safe Smart Account – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Guards",
        "url": "/advanced/smart-account-guards"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building a Guard for Safe Smart Account",
      "Understanding Safe Guards",
      "Prerequisites",
      "Project Setup",
      "Initialize Project",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Create a new Solidity contract",
      "Step 1. Create NoDelegatecallGuard contract",
      "Step 2: ImplementcheckTransactionfunction",
      "Step 3: ImplementcheckAfterExecutionfunction",
      "Final contract code",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Add test cases",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Guard"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial#chunk-3",
    "url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "chunk_index": 3,
    "total_chunks": 6,
    "text": "be filled in later steps (ignore the warnings about unused imports): _ 26 import { ethers } from \"hardhat\"; _ 26 import { expect } from \"chai\"; _ 26 import { Signer, ZeroAddress } from \"ethers\"; _ 26 import { Safe, Safe__factory, SafeProxyFactory } from \"../typechain-types\"; _ 26 import { execTransaction } from \"./utils/utils\"; _ 26 import { NoDelegatecallGuard } from \"../typechain-types/contracts/NoDelegatecallGuard\"; _ 26 _ 26 describe(\"NoDelegatecallGuard\", async function () { _ 26 let deployer: Signer; _ 26 let alice: Signer; _ 26 let masterCopy: Safe; _ 26 let proxyFactory: SafeProxyFactory; _ 26 let safeFactory: Safe__factory; _ 26 let safe: Safe; _ 26 let exampleGuard: NoDelegatecallGuard; _ 26 const threshold = 1; _ 26 _ 26 beforeEach(async () => {}); _ 26 _ 26 // Add your test cases here _ 26 it(\"Should not allow delegatecall\", async function () {}); _ 26 _ 26 it(\"Should allow call\", async function () {}); _ 26 _ 26 it(\"Should allow to replace the guard\", async function () {}); _ 26 }); Step 3: Setup contracts and variables in before hook _ 58 // Setup signers and deploy contracts before running tests _ 58 beforeEach(async () => { _ 58 [deployer, alice] = await ethers.getSigners(); _ 58 _ 58 safeFactory = await ethers.getContractFactory(\"Safe\", deployer); _ 58 masterCopy = await safeFactory.deploy(); _ 58 _ 58 proxyFactory = await ( _ 58 await ethers.getContractFactory(\"SafeProxyFactory\", deployer) _ 58 ).deploy(); _ 58 _ 58 const ownerAddresses = [await alice.getAddress()]; _ 58 _ 58 const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [ _ 58 ownerAddresses, _ 58 threshold, _ 58 ZeroAddress, _ 58 \"0x\", _ 58 ZeroAddress, _ 58 ZeroAddress, _ 58 0, _ 58 ZeroAddress, _ 58 ]); _ 58 _ 58 // Read the safe address by executing the static call to createProxyWithNonce function _ 58 const safeAddress = await proxyFactory.createProxyWithNonce.staticCall( _ 58 await masterCopy.getAddress(), _ 58 safeData, _ 58 0n _ 58 ); _ 58 _ 58 // Create the proxy with nonce _ 58 await proxyFactory.createProxyWithNonce( _ 58 await masterCopy.getAddress(), _ 58 safeData, _ 58 0n _ 58 ); _ 58 _ 58 if (safeAddress === ZeroAddress) { _ 58 throw new Error(\"Safe address not found\"); _ 58 } _ 58 _ 58 // Deploy the NoDelegatecallGuard contract _ 58 exampleGuard = await ( _ 58 await ethers.getContractFactory(\"NoDelegatecallGuard\", deployer) _ 58 ).deploy(); _ 58 _ 58 safe = await ethers.getContractAt(\"Safe\", safeAddress); _ 58 _ 58 // Set the guard in the safe _ 58 const setGuardData = masterCopy.interface.encodeFunctionData( _ 58 \"setGuard\", _ 58 [exampleGuard.target] _ 58 ); _ 58 _ 58 // Execute the transaction to set the Guard _ 58 await execTransaction([alice], safe, safe.target, 0, setGuardData, 0); _ 58 }); This step sets up the test environment by deploying and configuring the necessary contracts. Please note that: Alice is the only owner of the Safe and a threshold of 1 is set. Thus, only Alice's signature is required to execute transactions. Alice as the owner of the Safe is required to set the guard. The guard is",
    "title": "Building a Guard for Safe Smart Account – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Guards",
        "url": "/advanced/smart-account-guards"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building a Guard for Safe Smart Account",
      "Understanding Safe Guards",
      "Prerequisites",
      "Project Setup",
      "Initialize Project",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Create a new Solidity contract",
      "Step 1. Create NoDelegatecallGuard contract",
      "Step 2: ImplementcheckTransactionfunction",
      "Step 3: ImplementcheckAfterExecutionfunction",
      "Final contract code",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Add test cases",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Guard"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial#chunk-4",
    "url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "chunk_index": 4,
    "total_chunks": 6,
    "text": "enabled by calling the setGuard function on the Safe contract. ⚠️ Security Note: Only trusted and audited code should be enabled as a guard, since guard can block transactions. A malicious guard make Safe unusable by blocking all transactions. Step 4: Add test cases _ 31 it(\"Should not allow delegatecall\", async function () { _ 31 const wallets = [alice]; _ 31 _ 31 await expect( _ 31 execTransaction(wallets, safe, ZeroAddress, 0, \"0x\", 1) _ 31 ).to.be.revertedWithCustomError(exampleGuard, \"DelegatecallNotAllowed\"); _ 31 }); _ 31 _ 31 it(\"Should allow call\", async function () { _ 31 const wallets = [alice]; _ 31 _ 31 expect(await execTransaction(wallets, safe, ZeroAddress, 0, \"0x\", 0)); _ 31 }); _ 31 _ 31 it(\"Should allow to replace the guard\", async function () { _ 31 const wallets = [alice]; _ 31 _ 31 const setGuardData = masterCopy.interface.encodeFunctionData(\"setGuard\", [ _ 31 ZeroAddress, _ 31 ]); _ 31 expect( _ 31 await execTransaction( _ 31 wallets, _ 31 safe, _ 31 await safe.getAddress(), _ 31 0, _ 31 setGuardData, _ 31 0 _ 31 ) _ 31 ); _ 31 }); Final test code _ 107 import { ethers } from \"hardhat\"; _ 107 import { expect } from \"chai\"; _ 107 import { Signer, ZeroAddress } from \"ethers\"; _ 107 import { Safe, Safe__factory, SafeProxyFactory } from \"../typechain-types\"; _ 107 import { execTransaction } from \"./utils/utils\"; _ 107 import { NoDelegatecallGuard } from \"../typechain-types/contracts/NoDelegatecallGuard\"; _ 107 _ 107 describe(\"NoDelegatecallGuard\", async function () { _ 107 let deployer: Signer; _ 107 let alice: Signer; _ 107 let masterCopy: Safe; _ 107 let proxyFactory: SafeProxyFactory; _ 107 let safeFactory: Safe__factory; _ 107 let safe: Safe; _ 107 let exampleGuard: NoDelegatecallGuard; _ 107 const threshold = 1; _ 107 _ 107 // Setup signers and deploy contracts before running tests _ 107 beforeEach(async () => { _ 107 [deployer, alice] = await ethers.getSigners(); _ 107 _ 107 safeFactory = await ethers.getContractFactory(\"Safe\", deployer); _ 107 masterCopy = await safeFactory.deploy(); _ 107 _ 107 proxyFactory = await ( _ 107 await ethers.getContractFactory(\"SafeProxyFactory\", deployer) _ 107 ).deploy(); _ 107 _ 107 const ownerAddresses = [await alice.getAddress()]; _ 107 _ 107 const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [ _ 107 ownerAddresses, _ 107 threshold, _ 107 ZeroAddress, _ 107 \"0x\", _ 107 ZeroAddress, _ 107 ZeroAddress, _ 107 0, _ 107 ZeroAddress, _ 107 ]); _ 107 _ 107 // Read the safe address by executing the static call to createProxyWithNonce function _ 107 const safeAddress = await proxyFactory.createProxyWithNonce.staticCall( _ 107 await masterCopy.getAddress(), _ 107 safeData, _ 107 0n _ 107 ); _ 107 _ 107 // Create the proxy with nonce _ 107 await proxyFactory.createProxyWithNonce( _ 107 await masterCopy.getAddress(), _ 107 safeData, _ 107 0n _ 107 ); _ 107 _ 107 if (safeAddress === ZeroAddress) { _ 107 throw new Error(\"Safe address not found\"); _ 107 } _ 107 _ 107 // Deploy the NoDelegatecallGuard contract _ 107 exampleGuard = await ( _ 107 await ethers.getContractFactory(\"NoDelegatecallGuard\", deployer) _ 107 ).deploy(); _ 107 _ 107 safe",
    "title": "Building a Guard for Safe Smart Account – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Guards",
        "url": "/advanced/smart-account-guards"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building a Guard for Safe Smart Account",
      "Understanding Safe Guards",
      "Prerequisites",
      "Project Setup",
      "Initialize Project",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Create a new Solidity contract",
      "Step 1. Create NoDelegatecallGuard contract",
      "Step 2: ImplementcheckTransactionfunction",
      "Step 3: ImplementcheckAfterExecutionfunction",
      "Final contract code",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Add test cases",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Guard"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial#chunk-5",
    "url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "chunk_index": 5,
    "total_chunks": 6,
    "text": "= await ethers.getContractAt(\"Safe\", safeAddress); _ 107 _ 107 // Set the guard in the safe _ 107 const setGuardData = masterCopy.interface.encodeFunctionData(\"setGuard\", [ _ 107 exampleGuard.target, _ 107 ]); _ 107 _ 107 // Execute the transaction to set the Guard _ 107 await execTransaction([alice], safe, safe.target, 0, setGuardData, 0); _ 107 }); _ 107 _ 107 it(\"Should not allow delegatecall\", async function () { _ 107 const wallets = [alice]; _ 107 _ 107 await expect( _ 107 execTransaction(wallets, safe, ZeroAddress, 0, \"0x\", 1) _ 107 ).to.be.revertedWithCustomError(exampleGuard, \"DelegatecallNotAllowed\"); _ 107 }); _ 107 _ 107 it(\"Should allow call\", async function () { _ 107 const wallets = [alice]; _ 107 _ 107 expect(await execTransaction(wallets, safe, ZeroAddress, 0, \"0x\", 0)); _ 107 }); _ 107 _ 107 it(\"Should allow to replace the guard\", async function () { _ 107 const wallets = [alice]; _ 107 _ 107 const setGuardData = masterCopy.interface.encodeFunctionData(\"setGuard\", [ _ 107 ZeroAddress, _ 107 ]); _ 107 expect( _ 107 await execTransaction( _ 107 wallets, _ 107 safe, _ 107 await safe.getAddress(), _ 107 0, _ 107 setGuardData, _ 107 0 _ 107 ) _ 107 ); _ 107 }); _ 107 }); Run the tests _ 10 npx hardhat test Congratulations! You have successfully created, enabled and tested a Safe Guard. Do more with Safe and Guard Did you encounter any difficulties? Let us know by opening an issue (opens in a new tab) or asking a question on Stack Exchange (opens in a new tab) with the safe-core tag. Safe Guards Safe Fallback Handler Was this page helpful? Report issue",
    "title": "Building a Guard for Safe Smart Account – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards",
    "breadcrumbs": [
      {
        "text": "Safe Guards",
        "url": "/advanced/smart-account-guards"
      }
    ],
    "depth": 4,
    "section_titles": [
      "Building a Guard for Safe Smart Account",
      "Understanding Safe Guards",
      "Prerequisites",
      "Project Setup",
      "Initialize Project",
      "Configure Dependencies",
      "Initialize hardhat project",
      "Create a new Solidity contract",
      "Step 1. Create NoDelegatecallGuard contract",
      "Step 2: ImplementcheckTransactionfunction",
      "Step 3: ImplementcheckAfterExecutionfunction",
      "Final contract code",
      "Testing the contract",
      "Step 1: Create test/utils/utils.ts file",
      "Step 2: Start with a boilerplate test file",
      "Step 3: Setup contracts and variables in before hook",
      "Step 4: Add test cases",
      "Final test code",
      "Run the tests",
      "Do more with Safe and Guard"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/fallback-handler/createdisablefallbackhandlertx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/fallback-handler/createdisablefallbackhandlertx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Fallback Handler createDisableFallbackHandlerTx createDisableFallbackHandlerTx Returns a Safe transaction to disable the fallback handler. Usage example.ts setup.ts _ 15 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 15 import { protocolKit } from './setup.ts' _ 15 _ 15 const options: SafeTransactionOptionalProps = { _ 15 safeTxGas: '123', // Optional _ 15 baseGas: '123', // Optional _ 15 gasPrice: '123', // Optional _ 15 gasToken: '0x...', // Optional _ 15 refundReceiver: '0x...', // Optional _ 15 nonce: 123 // Optional _ 15 } _ 15 _ 15 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx( _ 15 options // Optional _ 15 ) Parameters safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx({ _ 10 safeTxGas: '123' _ 10 }) baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx({ _ 10 baseGas: '123' _ 10 }) gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx({ _ 10 gasPrice: '123' _ 10 }) gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx({ _ 10 gasToken: '0x...' _ 10 }) refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx({ _ 10 refundReceiver: '0x...' _ 10 }) nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createDisableFallbackHandlerTx({ _ 10 nonce: 123 _ 10 }) Returns Promise<SafeTransaction> The Safe transaction to disable the fallback handler. getGuard createEnableFallbackHandlerTx Was this page helpful? Report issue",
    "title": "createDisableFallbackHandlerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/getguard",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createDisableFallbackHandlerTx",
      "Usage",
      "Parameters",
      "safeTxGas(Optional)",
      "baseGas(Optional)",
      "gasPrice(Optional)",
      "gasToken(Optional)",
      "refundReceiver(Optional)",
      "nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/createdisableguardtx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/createdisableguardtx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Guards createDisableGuardTx createDisableGuardTx Returns a Safe transaction to disable the Safe Guard. Usage example.ts setup.ts _ 18 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 18 import { protocolKit } from './setup.ts' _ 18 _ 18 const guardAddress = '0x...' _ 18 _ 18 const options: SafeTransactionOptionalProps = { _ 18 safeTxGas: '123', // Optional _ 18 baseGas: '123', // Optional _ 18 gasPrice: '123', // Optional _ 18 gasToken: '0x...', // Optional _ 18 refundReceiver: '0x...', // Optional _ 18 nonce: 123 // Optional _ 18 } _ 18 _ 18 const safeTransaction = await protocolKit.createDisableGuardTx( _ 18 guardAddress, _ 18 options // Optional _ 18 ) Parameters guardAddress Type : string The Safe Guard contract address to disable. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...' _ 10 ) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createDisableGuardTx( _ 10 '0x...', _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to disable the Safe Guard. isModuleEnabled createEnableGuardTx Was this page helpful? Report issue",
    "title": "createDisableGuardTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-guards/createenableguardtx",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createDisableGuardTx",
      "Usage",
      "Parameters",
      "guardAddress",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-smart-account/modules/enableModule#chunk-0",
    "url": "https://docs.safe.global/reference-smart-account/modules/enableModule",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Smart Account Reference Modules enableModule enableModule Enables a new Safe Module in a Safe account. ⚠️ This action can only be done via a Safe transaction. Usage example.sol _ 10 interface ISafe { _ 10 function enableModule(address module) external; _ 10 } _ 10 _ 10 contract Example { _ 10 function example() ... { _ 10 (ISafe safe).enableModule(0x...); _ 10 } _ 10 } Parameters module Type: address Safe Module to be enabled. _ 10 (ISafe safe).enableModule( _ 10 0x... _ 10 ); Events EnabledModule _ 10 event EnabledModule(address module); Emitted when a module is enabled for the Safe. simulateAndRevert disableModule Was this page helpful? Report issue",
    "title": "enableModule – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-modules",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "enableModule",
      "Usage",
      "Parameters",
      "module",
      "Events",
      "EnabledModule"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-concepts#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-concepts",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Advanced Concepts Concepts Owners Each Safe account maintains its own list of owners in the storage in the form of Ethereum addresses. Owners can be added or removed by other owners. Threshold Safe Smart Account maintains a threshold , the minimum number of owners required to confirm a transaction before it gets executed. The threshold of owners required to confirm a transaction is also stored in the storage. Owners of a Safe account can change the threshold value as well. A Safe account can have any number of owners, and the threshold value can be set between one and the total number of owners. Signature verification Safe Smart Account, being a contract account, does not have a private key to sign transactions, and EVM cannot verify incoming transactions to a contract account. Hence, a contract account has to do the authentication and authorization in its code. When a transaction is submitted to a Safe account, it is first verified by the Safe account to ensure that the transaction is valid. If the required number of owners has signed the transaction, the transaction is allowed to be executed. If the required number of owners has not signed the transaction, the transaction reverts to the signature validation step. A Safe Smart Account verifies if each signer is an owner of the Safe account and verifies the signature based on the signature type. To learn more about the signature types supported by Safe and encoding, refer to the Signatures page. Transaction flow Transactions through a Safe Smart Account can be primarily divided into two types: Safe Transaction Safe Smart Account contract provides execTransaction function to submit and execute a Safe transaction which is signed by the owners of the Safe Smart Account. To execute a transaction with the Safe Smart Account, the execTransaction method needs to be called with the following parameters: to : The recipient address of the transaction. value : The amount of Ether (in wei) to send with the transaction. data : The data payload of the transaction, typically used to call a function on the recipient contract. operation : Safe Smart Account supports CALL and DELEGATECALL. safeTxGas : Gas that should be used for the Safe transaction. baseGas : This is the amount of gas independent of the specific Safe transactions, but used for general things such as signature checks and the base transaction fee. SafeTxGas and baseGas combined are comparable to the gas limit of a regular transaction. gasPrice : Same like for a regular Ethereum transaction. Setting the gas price to 0 means that no refund is paid out. gasToken : For regular Ethereum transactions, gas is always paid in Ether. A Safe Smart Account enables users to pay in ERC20 tokens or Ether. The desired token is specified here. If 0x0 , then Ether is used. Gas costs are calculated by (baseGas + txGas) * gasPrice . refundReceiver : The refund does not necessarily have to go to the account submitting the transaction but can be",
    "title": "Smart Account Concepts – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-modules",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "Concepts",
      "Owners",
      "Threshold",
      "Signature verification",
      "Transaction flow",
      "Safe Transaction",
      "Module Transaction",
      "Safe Modules",
      "Safe Guards",
      "Signatures"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-concepts#chunk-1",
    "url": "https://docs.safe.global/advanced/smart-account-concepts",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "paid out to any account specified here. If set to 0 , tx.origin will be used. signatures : All parameters are used to generate a transaction hash and signed by the owners of the Safe Smart Account. A list of hex encoded signatures is expected ( execTransaction expects that the signatures are sorted by owner address. This is required to easily validate no confirmation duplicates exist). Module Transaction Safe Smart Account contract provides execTransactionFromModule and execTransactionFromModuleReturnData functions to accept transactions from modules. A module can be any Ethereum address and can bypass signature verification logic to execute transactions through a Safe Smart Account. to : The recipient address of the transaction. value : The amount of Ether (in wei) to send with the transaction. data : The data payload of the transaction, typically used to call a function on the recipient contract. operation : The type of operation to execute, either CALL or DELEGATECALL. Here are some core components of a Safe Smart Account that you will learn about: Safe Modules Safe Modules are smart contracts that extend Safe's functionality with added custom features while the module logic remains separate from Safe's core contracts. More information is available in the Safe Modules page. Safe Guards Safe Guards make checks before and after a Safe transaction. More information is available in the Safe Guards page. Signatures Safe Smart Account support alternative signature schemes such as EIP-1271 (opens in a new tab) and EIP-712 (opens in a new tab) and relaying by making the confirmation/verification logic independent of msg.sender . Read more about the signature schemes (opens in a new tab) supported by Safe. Overview Safe Modules Was this page helpful? Report issue",
    "title": "Smart Account Concepts – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-modules",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "Concepts",
      "Owners",
      "Threshold",
      "Signature verification",
      "Transaction flow",
      "Safe Transaction",
      "Module Transaction",
      "Safe Modules",
      "Safe Guards",
      "Signatures"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/ismoduleenabled#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/ismoduleenabled",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Modules isModuleEnabled isModuleEnabled Checks if a given Safe Module is enabled in the connected Safe. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const moduleAddress = '0x...' _ 10 _ 10 const isEnabled = await protocolKit.isModuleEnabled(moduleAddress) Parameters moduleAddress Type : string The Safe Module address to check. _ 10 const isEnabled = await protocolKit.isModuleEnabled( _ 10 '0x...' _ 10 ) Returns Promise<boolean> The boolean value that indicates if the module is enabled in the connected Safe. getModules createDisableGuardTx Was this page helpful? Report issue",
    "title": "isModuleEnabled – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/getmodules",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "isModuleEnabled",
      "Usage",
      "Parameters",
      "moduleAddress",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Modules createDisableModuleTx createDisableModuleTx Returns a Safe transaction to disable a Safe Module. Usage example.ts setup.ts _ 18 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 18 import { protocolKit } from './setup.ts' _ 18 _ 18 const moduleAddress = '0x...' _ 18 _ 18 const options: SafeTransactionOptionalProps = { _ 18 safeTxGas: '123', // Optional _ 18 baseGas: '123', // Optional _ 18 gasPrice: '123', // Optional _ 18 gasToken: '0x...', // Optional _ 18 refundReceiver: '0x...', // Optional _ 18 nonce: 123 // Optional _ 18 } _ 18 _ 18 const safeTransaction = await protocolKit.createDisableModuleTx( _ 18 moduleAddress, _ 18 options // Optional _ 18 ) Parameters moduleAddress Type : string The Safe Module address to disable. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...' _ 10 ) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createDisableModuleTx( _ 10 '0x...', _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to disable the Safe Module. signMessage createEnableModuleTx Was this page helpful? Report issue",
    "title": "createDisableModuleTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/createenablemoduletx",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createDisableModuleTx",
      "Usage",
      "Parameters",
      "moduleAddress",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getownerswhoapprovedtx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getownerswhoapprovedtx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Configuration getOwnersWhoApprovedTx getOwnersWhoApprovedTx Returns a list of owners who approved a given Safe transaction. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const safeTransactionHash = '0x...' _ 10 _ 10 const ownerAddresses = await protocolKit.getOwnersWhoApprovedTx( _ 10 safeTransactionHash _ 10 ) Parameters safeTransactionHash Type : string The Safe transaction hash of a Safe transaction. _ 10 const ownerAddresses = await protocolKit.getOwnersWhoApprovedTx( _ 10 '0x...' _ 10 ) Returns Promise<string[]> The list of owners who approved a given Safe transaction. getOwners getThreshold Was this page helpful? Report issue",
    "title": "getOwnersWhoApprovedTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getthreshold",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "getOwnersWhoApprovedTx",
      "Usage",
      "Parameters",
      "safeTransactionHash",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/isowner#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/isowner",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Configuration isOwner isOwner Checks if a given address is an owner of the connected Safe. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const address = '0x...' _ 10 _ 10 const isOwner = await protocolKit.isOwner(address) Parameters address Type : string The address to check. _ 10 const isOwner = await protocolKit.isOwner( _ 10 '0x...' _ 10 ) Returns Promise<string> The boolean value that indicates if the address is an owner of the Safe. getThreshold copyTransaction Was this page helpful? Report issue",
    "title": "isOwner – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getthreshold",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "isOwner",
      "Usage",
      "Parameters",
      "address",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createaddownertx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createaddownertx",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Protocol Kit Reference Safe Configuration createAddOwnerTx createAddOwnerTx Returns a Safe transaction to add an owner to the connected Safe and optionally change the threshold. Usage example.ts passkeys-example.ts setup.ts _ 24 import { _ 24 AddOwnerTxParams, _ 24 SafeTransactionOptionalProps _ 24 } from '@safe-global/protocol-kit' _ 24 import { protocolKit } from './setup.ts' _ 24 _ 24 const params: AddOwnerTxParams = { _ 24 ownerAddress: '0x...' _ 24 threshold: 123 // Optional _ 24 } _ 24 _ 24 const options: SafeTransactionOptionalProps = { _ 24 safeTxGas: '123', // Optional _ 24 baseGas: '123', // Optional _ 24 gasPrice: '123', // Optional _ 24 gasToken: '0x...', // Optional _ 24 refundReceiver: '0x...', // Optional _ 24 nonce: 123 // Optional _ 24 } _ 24 _ 24 const safeTransaction = await protocolKit.createAddOwnerTx( _ 24 params, _ 24 options // Optional _ 24 ) Parameters params.ownerAddress Type : string The address of the owner to add to the Safe. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx({ _ 10 ownerAddress: '0x...' _ 10 }) params.passkey Type : PasskeyArgType The passkey associated with the owner to add to the Safe. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx({ _ 10 passkey _ 10 }) params.threshold (Optional) Type : number The new threshold of the Safe. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx({ _ 10 ownerAddress: '0x...', _ 10 threshold: 2 _ 10 }) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createAddOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _",
    "title": "createAddOwnerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createchangethresholdtx",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createAddOwnerTx",
      "Usage",
      "Parameters",
      "params.ownerAddress",
      "params.passkey",
      "params.threshold(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createaddownertx#chunk-1",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createaddownertx",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to add an owner. getSafeAddressFromDeploymentTx createChangeThresholdTx Was this page helpful? Report issue",
    "title": "createAddOwnerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createchangethresholdtx",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createAddOwnerTx",
      "Usage",
      "Parameters",
      "params.ownerAddress",
      "params.passkey",
      "params.threshold(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createremoveownertx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createremoveownertx",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Protocol Kit Reference Safe Configuration createRemoveOwnerTx createRemoveOwnerTx Returns a Safe transaction to remove an owner of the connected Safe and optionally change the threshold. Usage example.ts passkeys-example.ts setup.ts _ 24 import { _ 24 RemoveOwnerTxParams, _ 24 SafeTransactionOptionalProps _ 24 } from '@safe-global/protocol-kit' _ 24 import { protocolKit } from './setup.ts' _ 24 _ 24 const params: RemoveOwnerTxParams = { _ 24 ownerAddress: '0x...' _ 24 threshold: 123 // Optional _ 24 } _ 24 _ 24 const options: SafeTransactionOptionalProps = { _ 24 safeTxGas: '123', // Optional _ 24 baseGas: '123', // Optional _ 24 gasPrice: '123', // Optional _ 24 gasToken: '0x...', // Optional _ 24 refundReceiver: '0x...', // Optional _ 24 nonce: 123 // Optional _ 24 } _ 24 _ 24 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 24 params, _ 24 options // Optional _ 24 ) Parameters params.ownerAddress Type : string The address of the owner to remove to the Safe. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx({ _ 10 ownerAddress: '0x...' _ 10 }) params.passkey Type : PasskeyArgType The passkey associated with the owner to remove to the Safe. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx({ _ 10 passkey _ 10 }) params.threshold (Optional) Type : number The new threshold of the Safe. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx({ _ 10 ownerAddress: '0x...', _ 10 threshold: 1 _ 10 }) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createRemoveOwnerTx( _ 10 { _ 10 ownerAddress: '0x...' _ 10 }, _ 10 { _",
    "title": "createRemoveOwnerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createchangethresholdtx",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createRemoveOwnerTx",
      "Usage",
      "Parameters",
      "params.ownerAddress",
      "params.passkey",
      "params.threshold(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createremoveownertx#chunk-1",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createremoveownertx",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to remove an owner. createChangeThresholdTx createSwapOwnerTx Was this page helpful? Report issue",
    "title": "createRemoveOwnerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createchangethresholdtx",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "createRemoveOwnerTx",
      "Usage",
      "Parameters",
      "params.ownerAddress",
      "params.passkey",
      "params.threshold(Optional)",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit#chunk-0",
    "url": "https://docs.safe.global/sdk/protocol-kit",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK Protocol Kit Protocol Kit The Protocol Kit enables developers to interact with Safe Smart Accounts (opens in a new tab) using a TypeScript interface. This kit can be used to create new Safe smart accounts, update the configuration of existing Safes, propose and execute transactions, among other features. @safe-global/protocol-kit The following guides show how to use the Protocol Kit and integrate it into your project: Safe deployment Multichain Safe deployment Execute transactions Transactions signatures Message signatures Resources Protocol Kit on GitHub (opens in a new tab) Reference Safe deployment Was this page helpful? Report issue",
    "title": "Protocol Kit – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "Protocol Kit",
      "@safe-global/protocol-kit",
      "Resources"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-with-cow-swap#chunk-0",
    "url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-with-cow-swap",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Home Action Guides AI agent swaps on CoW Swap AI agent swaps on CoW Swap CoW swap ensures best prices and fastest execution and minimizes MEV. You can find a working code example to run locally in our AI agent with Safe Smart Account CoW Swap example repository (opens in a new tab) . Here is a quick guide to get you up and running: Requirements A deployed Safe Smart Account The AI agent is a signer on the Safe This example assumes, that the threshold of the Safe Smart Account is one, so the AI agent can sign autonomously. If you require more signatures, you have to collect those signatures programmatically of with the Safe Wallet (opens in a new tab) . Let your AI agent send an intent Setup the Safe Smart Account Your Safe Smart Account should be deployed. Now, initialize an instance with the Protocol Kit : _ 10 import Safe from \"@safe-global/protocol-kit\"; _ 10 _ 10 const preExistingSafe = await Safe.init({ _ 10 provider: RPC_URL, _ 10 signer: AGENT_PRIVATE_KEY, _ 10 safeAddress: SAFE_ADDRESS, _ 10 }); Send swap intent Now, you can use the CoW Swap SDK to assemble a transaction that you can sign and execute with your Safe Smart Account. The swap will then be executed. Please be aware that the CoW Swap's SDK uses Ethers, while Safe's SDK use viem. You will see some warnings in the logs, but the code works nonetheless. In this example, we buy COW and pay with WETH. _ 78 import { _ 78 SwapAdvancedSettings, _ 78 TradeParameters, _ 78 TradingSdk, _ 78 SupportedChainId, _ 78 OrderKind, _ 78 SigningScheme, _ 78 } from \"@cowprotocol/cow-sdk\"; _ 78 import { VoidSigner } from \"@ethersproject/abstract-signer\"; _ 78 import { JsonRpcProvider } from \"@ethersproject/providers\"; _ 78 _ 78 const traderParams = { _ 78 chainId: SupportedChainId.SEPOLIA, _ 78 signer: new VoidSigner( _ 78 smartContractWalletAddress: SAFE_ADDRESS, _ 78 new JsonRpcProvider(\"https://sepolia.gateway.tenderly.co\") _ 78 ), _ 78 appCode: \"awesome-app\", _ 78 }; _ 78 _ 78 const cowSdk = new TradingSdk(traderParams, { logs: false }); _ 78 _ 78 const parameters: TradeParameters = { _ 78 kind: OrderKind.SELL, _ 78 sellToken: WETH_ADDRESS, _ 78 sellTokenDecimals: 18, _ 78 buyToken: COW_ADDRESS, _ 78 buyTokenDecimals: 18, _ 78 amount: INPUT_AMOUNT, _ 78 }; _ 78 _ 78 const advancedParameters: SwapAdvancedSettings = { _ 78 quoteRequest: { _ 78 // Specify the signing scheme _ 78 signingScheme: SigningScheme.PRESIGN, _ 78 }, _ 78 }; _ 78 _ 78 const orderId = await cowSdk.postSwapOrder(parameters, advancedParameters); _ 78 _ 78 console.log(`Order ID: [${orderId}]`); _ 78 _ 78 const preSignTransaction = await cowSdk.getPreSignTransaction({ _ 78 orderId, _ 78 account: smartContractWalletAddress, _ 78 }); _ 78 _ 78 const customChain = defineChain({ _ 78 ...sepolia, _ 78 name: \"custom chain\", _ 78 transport: http(RPC_URL), _ 78 }); _ 78 _ 78 const publicClient = createPublicClient({ _ 78 chain: customChain, _ 78 transport: http(RPC_URL), _ 78 }); _ 78 _ 78 const safePreSignTx: MetaTransactionData = { _ 78 to: preSignTransaction.to, _",
    "title": "AI agent swaps on CoW Swap – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "AI agent swaps on CoW Swap",
      "Requirements",
      "Let your AI agent send an intent",
      "Setup the Safe Smart Account",
      "Send swap intent",
      "Next steps"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-with-cow-swap#chunk-1",
    "url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-with-cow-swap",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "78 value: preSignTransaction.value, _ 78 data: preSignTransaction.data, _ 78 operation: OperationType.Call, _ 78 }; _ 78 _ 78 const safeTx = await preExistingSafe.createTransaction({ _ 78 transactions: [safePreSignTx], _ 78 onlyCalls: true, _ 78 }); _ 78 _ 78 // You might need to collect more signatures here _ 78 _ 78 const txResponse = await preExistingSafe.executeTransaction(safeTx); _ 78 console.log(`Sent tx hash: [${txResponse.hash}]`); _ 78 console.log(\"Waiting for the tx to be mined\"); _ 78 await publicClient.waitForTransactionReceipt({ _ 78 hash: txResponse.hash as `0x${string}`, _ 78 }); Next steps Now, where your AI agent can execute trades autonomously, you are free to use this power as you like. You can find more specific information in the CoW Swap Trading SDK docs (opens in a new tab) . If you have a technical question about Safe Smart Accounts, feel free to reach out on Stack Exchange (opens in a new tab) with the safe-core tag. Introduction AI agent swaps on Uniswap Was this page helpful? Report issue",
    "title": "AI agent swaps on CoW Swap – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-on-uniswap",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "AI agent swaps on CoW Swap",
      "Requirements",
      "Let your AI agent send an intent",
      "Setup the Safe Smart Account",
      "Send swap intent",
      "Next steps"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/config-service-configuration/edit-user#chunk-0",
    "url": "https://docs.safe.global/config-service-configuration/edit-user",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Config Service Reference Edit users Edit user Edit an existing Django user. Usage You can add a new user by visiting this address: http://localhost:8000/cfg/admin/auth/user/add/ Parameters Username A user name for identifying this user. Must be unique. Password Opens a section to set a password for the user. You can set a new password or leave it blank to keep the current one. Personal info You can set the user's first name, last name, and email. Permissions You can use the checkboxes to activate/deactivate the user; allow this user to access this Django website ( Staff ); give this user all permissions ( Superuser ). Permissions to be added to the user. You can either add the user to a group, or assign permissions directly. Important dates You can edit important information about logging times and creation date. Add users Add or edit chains Was this page helpful? Report issue",
    "title": "Edit user – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/config-service-configuration/add-user",
    "breadcrumbs": [],
    "depth": 4,
    "section_titles": [
      "Edit user",
      "Usage",
      "Parameters",
      "Username",
      "Password",
      "Personal info",
      "Permissions",
      "Important dates"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/getserviceinfo#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/getserviceinfo",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getServiceInfo getServiceInfo Returns the information and configuration of the service. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const serviceInfo = await apiKit.getServiceInfo() Returns Promise<SafeServiceInfoResponse> The information and configuration of the service. constructor getServiceSingletonsInfo Was this page helpful? Report issue",
    "title": "getServiceInfo – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/constructor",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getServiceInfo",
      "Usage",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/getsafecreationinfo#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/getsafecreationinfo",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getSafeCreationInfo getSafeCreationInfo Returns the creation information of a Safe. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeAddress = '0x...' _ 10 _ 10 const safeCreationInfo = await apiKit.getSafeCreationInfo( _ 10 safeAddress _ 10 ) Returns Promise<SafeCreationInfoResponse> The creation information of a Safe account. Parameters safeAddress Type: string The Safe address. _ 10 const safeCreationInfo = await apiKit.getSafeCreationInfo( _ 10 '0x...' _ 10 ) removeSafeDelegate estimateSafeTransaction Was this page helpful? Report issue",
    "title": "getSafeCreationInfo – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/estimatesafetransaction",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getSafeCreationInfo",
      "Usage",
      "Returns",
      "Parameters",
      "safeAddress"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/getmoduletransactions#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/getmoduletransactions",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getModuleTransactions getModuleTransactions Returns the history of module transactions of a Safe account. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeAddress = '0x...' _ 10 const options = { _ 10 module: '0x...', _ 10 limit: 10, _ 10 offset: 10 _ 10 } _ 10 _ 10 const moduleTxs = await apiKit.getModuleTransactions(safeAddress, options) Returns Promise<SafeModuleTransactionListResponse> The history of Safe transactions triggered by a module. Parameters safeAddress Type: string The Safe address. _ 10 const moduleTxs = await apiKit.getModuleTransactions( _ 10 '0x...' _ 10 ) options.module (Optional) Type: string The module to get the transactions from. options.limit (Optional) Type: number The number of results to return per page. options.offset (Optional) Type: number The initial index from which to return the results. getIncomingTransactions getMultisigTransactions Was this page helpful? Report issue",
    "title": "getModuleTransactions – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/getincomingtransactions",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getModuleTransactions",
      "Usage",
      "Returns",
      "Parameters",
      "safeAddress",
      "options.module(Optional)",
      "options.limit(Optional)",
      "options.offset(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/gettransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/gettransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getTransaction getTransaction Returns all the information of a Safe transaction. Usage example.ts setup.ts _ 10 import { apiKit } from './setup.ts' _ 10 _ 10 const safeTxHash = '0x...' _ 10 _ 10 const tx = await apiKit.getTransaction(safeTxHash) Returns Promise<SafeMultisigTransactionResponse> The information of a Safe transaction. Parameters safeTxHash Type: string The hash of the Safe transaction. _ 10 const tx = await apiKit.getTransaction( _ 10 '0x...' _ 10 ) getSafesByModule getTransactionConfirmations Was this page helpful? Report issue",
    "title": "getTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/gettransactionconfirmations",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getTransaction",
      "Usage",
      "Returns",
      "Parameters",
      "safeTxHash"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-api-kit/getsafedelegates#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-api-kit/getsafedelegates",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "API Kit Reference getSafeDelegates getSafeDelegates Returns the list of delegates for a given Safe address. Usage example.ts setup.ts _ 13 import { GetSafeDelegateProps } from '@safe-global/api-kit' _ 13 import { apiKit } from './setup.ts' _ 13 _ 13 const config: GetSafeDelegateProps = { _ 13 safeAddress: '0x...', // Optional _ 13 delegateAddress: '0x...', // Optional _ 13 delegatorAddress: '0x...', // Optional _ 13 label: 'abc', // Optional _ 13 limit: '10', // Optional _ 13 offset: '50' // Optional _ 13 } _ 13 _ 13 const delegates = await apiKit.getSafeDelegates(config) Returns Promise<SafeDelegateListResponse> The list of delegates. Parameters config.safeAddress (Optional) Type: string The Safe address. _ 10 const delegates = await apiKit.getSafeDelegates({ _ 10 safeAddress: '0x...' _ 10 }) config.delegateAddress (Optional) Type: string The delegate address. _ 10 const delegates = await apiKit.getSafeDelegates({ _ 10 delegateAddress: '0x...' _ 10 }) config.delegatorAddress (Optional) Type: string The delegator address. _ 10 const delegates = await apiKit.getSafeDelegates({ _ 10 delegatorAddress: '0x...' _ 10 }) config.label (Optional) Type: string The custom label. _ 10 const delegates = await apiKit.getSafeDelegates({ _ 10 label: 'abc' _ 10 }) config.limit (Optional) Type: string The number of results returned per page. _ 10 const delegates = await apiKit.getSafeDelegates({ _ 10 limit: '10' _ 10 }) config.offset (Optional) Type: string The initial index from which to return the results. _ 10 const delegates = await apiKit.getSafeDelegates({ _ 10 offset: '50' _ 10 }) getSafeInfo addSafeDelegate Was this page helpful? Report issue",
    "title": "getSafeDelegates – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-api-kit/getsafeinfo",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getSafeDelegates",
      "Usage",
      "Returns",
      "Parameters",
      "config.safeAddress(Optional)",
      "config.delegateAddress(Optional)",
      "config.delegatorAddress(Optional)",
      "config.label(Optional)",
      "config.limit(Optional)",
      "config.offset(Optional)"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createrejectiontransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createrejectiontransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Transactions createRejectionTransaction createRejectionTransaction Returns a Safe transaction ready to be signed by the owners of the connected Safe that invalidates the pending Safe transactions with a specific nonce. Usage example.ts setup.ts _ 10 import { _ 10 MetaTransactionData, _ 10 OperationType _ 10 } from '@safe-global/types-kit' _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const nonce = 123 _ 10 _ 10 const rejectionTransaction = await protocolKit.createRejectionTransaction(nonce) Parameters nonce Type : number The nonce of the transaction that will be rejected. _ 10 const rejectionTransaction = await protocolKit.createRejectionTransaction( _ 10 123 _ 10 ) Returns Promise<SafeTransaction> The Safe transaction that invalidates the pending Safe transaction. copyTransaction createTransaction Was this page helpful? Report issue",
    "title": "createRejectionTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/createtransaction",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "createRejectionTransaction",
      "Usage",
      "Parameters",
      "nonce",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/isvalidtransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/isvalidtransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Transactions isValidTransaction isValidTransaction Checks if a Safe transaction can be executed successfully with no errors. Usage example.ts setup.ts _ 30 import { _ 30 MetaTransactionData, _ 30 OperationType, _ 30 TransactionOptions _ 30 } from '@safe-global/types-kit' _ 30 import { protocolKit } from './setup.ts' _ 30 _ 30 const transactions: MetaTransactionData[] = [{ _ 30 to: '0x...', _ 30 value: '123', _ 30 data: '0x', _ 30 operation: OperationType.Call // Optional _ 30 }] _ 30 const safeTransaction = await protocolKit.createTransaction({ _ 30 transactions _ 30 }) _ 30 _ 30 const options: TransactionOptions = { _ 30 from: '0x...', // Optional _ 30 gasLimit: '123', // Optional _ 30 gasPrice: '123', // Optional _ 30 maxFeePerGas: '123', // Optional _ 30 maxPriorityFeePerGas: '123', // Optional _ 30 nonce: 123 // Optional _ 30 } _ 30 _ 30 const isValidTx = await protocolKit.isValidTransaction( _ 30 safeTransaction, _ 30 options // Optional _ 30 ) Parameters safeTransaction Type : SafeTransaction (opens in a new tab) The Safe transaction. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction _ 10 ) options.from (Optional) Type : string The address of the transaction sender. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 from: '0x...' _ 10 } _ 10 ) options.gasLimit (Optional) Type : number | string | bigint The maximum amount of gas the transaction can use. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 gasLimit: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : number | string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.maxFeePerGas (Optional) Type : number | string The maximum fee per gas the sender is willing to pay. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 maxFeePerGas: '123' _ 10 } _ 10 ) options.maxPriorityFeePerGas (Optional) Type : number | string The maximum priority fee per gas the sender is willing to pay. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 maxPriorityFeePerGas: '123' _ 10 } _ 10 ) options.nonce (Optional) Type : number The nonce of the transaction. _ 10 const isValidTx = await protocolKit.isValidTransaction( _ 10 safeTransaction, _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<boolean> The boolean value that indicates if the transaction is valid. getTransactionHash approveTransactionHash Was this page helpful? Report issue",
    "title": "isValidTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/gettransactionhash",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "isValidTransaction",
      "Usage",
      "Parameters",
      "safeTransaction",
      "options.from(Optional)",
      "options.gasLimit(Optional)",
      "options.gasPrice(Optional)",
      "options.maxFeePerGas(Optional)",
      "options.maxPriorityFeePerGas(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/cli-guides/recovery-safe-deployment#chunk-0",
    "url": "https://docs.safe.global/advanced/cli-guides/recovery-safe-deployment",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced Guides Deploy a Recovery Safe Deploy a Recovery Safe This guide will walk you through recreating a Safe with the same address on the desired network if you send funds to your Safe address in an incorrect chain. ℹ️ It's not always possible to recover a Safe, learn more here (opens in a new tab) . Recreate Safe 1.3.0 or 1.1.1 To recreate a Safe (version 1.3.0 or 1.1.1), you'll need the following essential data: The Singleton address The ProxyFactory address The FallbackHandler address The Owners addresses with which Safe was created The SaltNonce value The Threshold value RPC node provider for the target chain. The private-key of the deployer address The necessary addresses can be collected from safe-deployments (opens in a new tab) and the salt nonce from the Safe creation transaction in a block explorer. ⚠️ Ensure that the Singleton , ProxyFactory , and FallbackHandler are deployed in the target chain in the same addresses as the origin chain. To recreate the Safe, it is necessary to execute the safe-creator as follows: _ 10 safe-creator --owners <owners-addresses> --safe-contract <singleton-address> _ 10 --callback-handler <fallback-handler-address> --proxy-factory <proxy-factory-address> _ 10 --threshold <threshold-value> --salt-nonce <salt-nonce-value> <url-rpc-node> <deployer-private-key> The Safe should have been successfully recreated with the same address on the target chain. If not, double-check the data collected from the transaction and ensure that all the necessary contracts are deployed in the chain. Migrate a Safe from non-L2 to L2 Our services cannot index if you've recreated a Safe from an L1 network (like mainnet) on an L2 network. That's because for L1, we use trace-based indexing, and for L2 events indexing, L1 Safe singleton does not emit events. To address this, you'll need to update it to the L2 singleton with the command update_version_to_l2 or consider transferring the funds to a new Safe on L2 that you control with the drain command. For detailed instructions on running these commands, please refer to the common commands section for more information. Demos Reference Was this page helpful? Report issue",
    "title": "Deploy a Recovery Safe – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/cli-reference",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Deploy a Recovery Safe",
      "Recreate Safe 1.3.0 or 1.1.1",
      "Migrate a Safe from non-L2 to L2"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v3#chunk-0",
    "url": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v3",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK API Kit Guides Migrate to v3 Migrate to v3 This guide references the major changes between v2 and v3 to help those migrating an existing app. Changed method signature We extracted safeAddress and renamed xxxProps types to xxxOptions types in the following method getSafeOperationsByAddress(props: GetSafeOperationListProps) is now getSafeOperationsBySafeAddress(safeAddress, options: GetSafeOperationListOptions) Renamed types We renamed the xxxProps types to xxxOptions in the following methods: addMessage(safeAddress: string, addMessageProps: AddMessageProps) is now addMessage(safeAddress: string, addMessageOptions: AddMessageOptions) getMessages(safeAddress: string, props: GetSafeMessageListProps) is now getMessages(safeAddress: string, options: GetSafeMessageListOptions) Migrate to v2 Migrate to v4 Was this page helpful? Report issue",
    "title": "Migrate to v3 – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/api-kit/guides/migrate-to-v2",
    "breadcrumbs": [
      {
        "text": "API Kit",
        "url": "/sdk/api-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Migrate to v3",
      "Changed method signature",
      "Renamed types"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/erc-4337/guides/safe-sdk#chunk-0",
    "url": "https://docs.safe.global/advanced/erc-4337/guides/safe-sdk",
    "chunk_index": 0,
    "total_chunks": 3,
    "text": "Advanced ERC-4337 Guides ERC-4337 Safe SDK Safe accounts with the Safe4337Module In this guide, you will learn how to create and execute multiple Safe transactions grouped in a batch from a Safe account that is not yet deployed and where the executor may or may not have funds to pay for the transaction fees. This can be achieved by supporting the ERC-4337 execution flow, which is supported by the Safe4337Module and exposed via the Relay Kit from the Safe{Core} SDK. Read the Safe4337Module documentation to understand its benefits and flows better. Pimlico (opens in a new tab) is used in this guide as the service provider, but any other provider compatible with the ERC-4337 can be used. ℹ️ We have added support for then Entrypoint v0.7 contract but we are not making it the default yet. If you are using Entrypoint v0.7, you need to set the safeModuleVersion to 0.3.0 when calling the Safe4337Pack.init method. This version of the Safe 4337 Module is the one compatible with the Entrypoint v0.7. Prerequisites Node.js and npm (opens in a new tab) . A Pimlico account (opens in a new tab) and an API key. Install dependencies _ 10 yarn add @safe-global/relay-kit Steps Imports Here are all the necessary imports for the script we implement in this guide. _ 10 import { Safe4337Pack } from '@safe-global/relay-kit' Create a signer Firstly, we need to get a signer, which will be the owner of a Safe account after it's deployed. In this example, we use a private key, but any way to get an EIP-1193 compatible signer can be used. _ 10 const SIGNER_ADDRESS = // ... _ 10 const SIGNER_PRIVATE_KEY = // ... _ 10 const RPC_URL = 'https://rpc.ankr.com/eth_sepolia' Initialize the Safe4337Pack The Safe4337Pack class is exported from the Relay Kit and implements the ERC-4337 to create, sign, and submit Safe user operations. To instantiate this class, the static init() method allows connecting existing Safe accounts (as long as they have the Safe4337Module enabled) or setting a custom configuration to deploy a new Safe account at the time where the first Safe transaction is submitted. New Safe account Existing Safe account When deploying a new Safe account, we need to pass the configuration of the Safe in the options property. In this case, we are configuring a Safe account that will have our signer as the only owner. Optionally, you can track your ERC-4337 Safe transactions on-chain by using the onchainAnalytics property. By default Safe4337Pack is using version 0.2.0 of the Safe 4337 Module that is only compatible with Entrypoint v0.6. If you need to use v0.7 then add the safeModulesVersion property to the options object with the '0.3.0' value. _ 12 const safe4337Pack = await Safe4337Pack.init({ _ 12 provider: RPC_URL, _ 12 signer: SIGNER_PRIVATE_KEY, _ 12 bundlerUrl: `https://api.pimlico.io/v2/11155111/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`, _ 12 // safeModulesVersion: '0.3.0', // Defaults to 0.2.0. If you are using the v0.7 of the EntryPoint set the value to '0.3.0' _ 12 options: { _ 12 owners: [SIGNER_ADDRESS], _ 12 threshold: 1",
    "title": "Safe Sdk – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Safe accounts with the Safe4337Module",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize theSafe4337Pack",
      "Create a user operation",
      "Sign the user operation",
      "Submit the user operation",
      "Check the transaction status",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/erc-4337/guides/safe-sdk#chunk-1",
    "url": "https://docs.safe.global/advanced/erc-4337/guides/safe-sdk",
    "chunk_index": 1,
    "total_chunks": 3,
    "text": "_ 12 }, _ 12 onchainAnalytics // Optional _ 12 // ... _ 12 }) By default, the transaction fees will be paid in the native token and extracted from the Safe account, so there must be enough funds in the Safe address. You can also use a paymaster to handle the fees. If you choose to use a paymaster, there are two other ways to initialize the Safe4337Pack . Using an ERC-20 Paymaster Using a verifying Paymaster (Sponsored) A paymaster will execute the transactions and get reimbursed from the Safe account, which must have enough funds in the Safe address in advance. Payment of transaction fees is made using an ERC-20 token specified with the paymasterTokenAddress property. If an ERC-20 token is used, the Safe must approve that token to the paymaster. If no balance is approved, it can be specified using the amountToApprove property. _ 10 const safe4337Pack = await Safe4337Pack.init({ _ 10 // ... _ 10 paymasterOptions: { _ 10 paymasterUrl: `https://api.pimlico.io/v2/11155111/rpc?apikey=${PIMLICO_API_KEY}`, _ 10 paymasterAddress: '0x...', _ 10 paymasterTokenAddress: '0x...', _ 10 amountToApprove // Optional _ 10 } _ 10 }) Create a user operation To create a Safe user operation, use the createTransaction() method, which takes the array of transactions to execute and returns a SafeOperation object. _ 10 // Define the transactions to execute _ 10 const transaction1 = { to, data, value } _ 10 const transaction2 = { to, data, value } _ 10 _ 10 // Build the transaction array _ 10 const transactions = [transaction1, transaction2] _ 10 _ 10 // Create the SafeOperation with all the transactions _ 10 const safeOperation = await safe4337Pack.createTransaction({ transactions }) The safeOperation object has the data and signatures properties, which contain all the information about the transaction batch and the signatures of the Safe owners, respectively. Sign the user operation Before sending the user operation to the bundler, it's required to sign the safeOperation object with the connected signer. The signSafeOperation() method, which receives a SafeOperation object, generates a signature that will be checked when the Safe4337Module validates the user operation. _ 10 const signedSafeOperation = await safe4337Pack.signSafeOperation(identifiedSafeOperation) Submit the user operation Once the safeOperation object is signed, we can call the executeTransaction() method to submit the user operation to the bundler. _ 10 const userOperationHash = await safe4337Pack.executeTransaction({ _ 10 executable: signedSafeOperation _ 10 }) This method returns the hash of the user operation. With it, we can monitor the transaction status using a block explorer or the bundler's API. Check the transaction status To check the transaction status, we can use the getTransactionReceipt() method, which returns the transaction receipt after it's executed. _ 10 let userOperationReceipt = null _ 10 _ 10 while (!userOperationReceipt) { _ 10 // Wait 2 seconds before checking the status again _ 10 await new Promise((resolve) => setTimeout(resolve, 2000)) _ 10 userOperationReceipt = await safe4337Pack.getUserOperationReceipt( _ 10 userOperationHash _ 10 ) _ 10 } In addition, we can use the getUserOperationByHash() method with the returned hash to",
    "title": "Safe Sdk – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Safe accounts with the Safe4337Module",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize theSafe4337Pack",
      "Create a user operation",
      "Sign the user operation",
      "Submit the user operation",
      "Check the transaction status",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/erc-4337/guides/safe-sdk#chunk-2",
    "url": "https://docs.safe.global/advanced/erc-4337/guides/safe-sdk",
    "chunk_index": 2,
    "total_chunks": 3,
    "text": "retrieve the user operation object we sent to the bundler. _ 10 const userOperationPayload = await safe4337Pack.getUserOperationByHash( _ 10 userOperationHash _ 10 ) Recap and further reading After following this guide, we are able to deploy new Safe accounts and create, sign, and execute Safe transactions in a batch without the executor needing to have funds to pay for the transaction fees. Learn more about the ERC-4337 standard and the Safe4337Module contract following these links: ERC-4337 website (opens in a new tab) EIP-4337 on Ethereum EIPs (opens in a new tab) Safe4337Module on GitHub (opens in a new tab) [Safe On-chain Identifiers on GitHub]( https://github.com/5afe/safe-onchain-identifiers (opens in a new tab) showcases where and how to add the identifier at the end of your Safe transactions data if you are not using the Relay Kit. Check also the specific code (opens in a new tab) where the identifier is concatenated to the callData . Supported Networks Permissionless.js Quickstart Was this page helpful? Report issue",
    "title": "Safe Sdk – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Safe accounts with the Safe4337Module",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize theSafe4337Pack",
      "Create a user operation",
      "Sign the user operation",
      "Submit the user operation",
      "Check the transaction status",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/onchain-tracking#chunk-0",
    "url": "https://docs.safe.global/sdk/onchain-tracking",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "SDK On-chain Tracking On-chain Tracking We aim to understand better and recognise our key contributors who are driving the adoption of smart accounts within our ecosystem. Implementing a Safe on-chain identifier enables tracking of complex data, such as whether a Safe transaction is executed via our SDK or another, whether it originates from a platform like a Safe App or widget (for example, the CoW Swap widget in our Safe interface), the tool version, the project, and more. By submitting your on-chain identifier through the form provided at the end of this page, you will help us accurately attribute activity and allow us to return value to our Ecosystem Partners in the future. ℹ️ On-chain tracking is supported starting from Protocol Kit v5.2.0 and Relay Kit v3.4.0 . On-chain identifier format The identifiers used to track Safe deployments and transactions are 50 bytes in length and follow the format below: 5afe 00 6363643438383836663461336661366162653539 646561 393238 653366 Check the last 50 bytes of the data field in this example transaction (opens in a new tab) to see how the identifier appears after the transaction is executed. Prefix hash Type: 2 bytes Example: 5afe Static prefix to identify the Safe on-chain identifier. Version hash Type: 1 byte Example: 00 Version number of the Safe on-chain identifier format. Project hash Type: 20 bytes Example: 6363643438383836663461336661366162653539 Truncated hash of the project's name (for example, \"Gnosis\", \"CoW Swap\"). Platform hash Type: 3 bytes Example: 646561 Truncated hash of the platform's name (for example, \"Web\", \"Mobile\", \"Safe App\", \"Widget\"). Tool hash Type: 3 bytes Example: 393238 Truncated hash of the tool's name (for example, \"protocol-kit\", \"relay-kit\", or any custom tool built by projects). Tool version hash Type: 3 bytes Example: 653366 Truncated hash of the tool's version (for example, \"1.0.0\", \"1.0.1\"). Steps The on-chain identifier allows tracking the deployment of Safe accounts, the execution of Safe transactions, and the execution of Safe user operations: Generate an on-chain identifier Feel free to skip this section if you use the Protocol Kit or Relay Kit from the Safe{Core} SDK, as this is handled internally. To create an on-chain identifier with the format described above, you need to implement a function that receives the project , platform , tool , and toolVersion used; and returns the correct identifier after hashing, truncating, and concatenating all these parameters. _ 20 function generateOnChainIdentifier({ _ 20 project, _ 20 platform = 'Web', _ 20 tool, _ 20 toolVersion _ 20 }: OnChainIdentifierParamsType): string { _ 20 const identifierPrefix = '5afe' // Safe identifier prefix _ 20 const identifierVersion = '00' // First version _ 20 const projectHash = generateHash(project, 20) // Take the last 20 bytes _ 20 const platformHash = generateHash(platform, 3) // Take the last 3 bytes _ 20 const toolHash = generateHash(tool, 3) // Take the last 3 bytes _ 20 const toolVersionHash = generateHash(toolVersion, 3) // Take the last 3 bytes _ 20 _ 20 return `${identifierPrefix}${identifierVersion}${projectHash}${platformHash}${toolHash}${toolVersionHash}` _ 20 } _ 20 _ 20 function generateHash(input: string, size: number):",
    "title": "On-chain Tracking – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "On-chain Tracking",
      "On-chain identifier format",
      "Prefix hash",
      "Version hash",
      "Project hash",
      "Platform hash",
      "Tool hash",
      "Tool version hash",
      "Steps",
      "Generate an on-chain identifier",
      "Track Safe deployments",
      "Track Safe transactions",
      "Get the on-chain identifier",
      "Submission Form"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/onchain-tracking#chunk-1",
    "url": "https://docs.safe.global/sdk/onchain-tracking",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "string { _ 20 const fullHash = keccak256(toHex(input)) _ 20 return toHex(fullHash.slice(-size)).replace('0x', '') // Take the last X bytes _ 20 } This identifier will be added to all your Safe transactions and become searchable on-chain. Track Safe deployments Safe deployments can be tracked by concatenating the on-chain identifier at the end of the deployment transaction data . This way Safe deployment transactions will include the identifier. If you use the Protocol Kit or the Relay Kit to deploy a Safe, adding the onchainAnalytics property to the initialization method will automatically handle this. If you use a custom implementation, remember to manually add the on-chain identifier at the end of the deployment transaction data . Protocol Kit Relay Kit _ 13 import Safe, { OnchainAnalyticsProps } from '@safe-global/protocol-kit' _ 13 _ 13 const onchainAnalytics: OnchainAnalyticsProps = { _ 13 project: 'YOUR_PROJECT_NAME' // Required. Always use the same value for your project. _ 13 platform: 'CURRENT_PLATFORM' // Optional _ 13 } _ 13 _ 13 const protocolKit = await Safe.init({ _ 13 // ... _ 13 onchainAnalytics _ 13 }) _ 13 _ 13 // Execute the deployment Track Safe transactions Safe transactions can be tracked by concatenating the on-chain identifier at the end of the transaction data or user operation callData properties. This way Safe transactions will include the identifier. If you use the Protocol Kit or the Relay Kit to execute the Safe transactions, adding the onchainAnalytics property to the initialization method will automatically handle this. If you use a custom implementation, remember to manually add the on-chain identifier at the end of the transaction data / callData . Protocol Kit Relay Kit _ 13 import Safe, { OnchainAnalyticsProps } from '@safe-global/protocol-kit' _ 13 _ 13 const onchainAnalytics: OnchainAnalyticsProps = { _ 13 project: 'YOUR_PROJECT_NAME' _ 13 platform: 'CURRENT_PLATFORM' // Optional _ 13 } _ 13 _ 13 const protocolKit = await Safe.init({ _ 13 // ... _ 13 onchainAnalytics _ 13 }) _ 13 _ 13 // Execute the transaction Get the on-chain identifier If you use the Protocol Kit or the Relay Kit, call the getOnchainIdentifier method from an initialized instance of the Protocol Kit to get the current Safe on-chain identifier. _ 10 const onchainIdentifier = protocolKit.getOnchainIdentifier() Submission Form You can fill out the form by clicking this link (opens in a new tab) or using the form below: Loading… Web3Auth Onramp Was this page helpful? Report issue",
    "title": "On-chain Tracking – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit/guides/4337-safe-sdk",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "On-chain Tracking",
      "On-chain identifier format",
      "Prefix hash",
      "Version hash",
      "Project hash",
      "Platform hash",
      "Tool hash",
      "Tool version hash",
      "Steps",
      "Generate an on-chain identifier",
      "Track Safe deployments",
      "Track Safe transactions",
      "Get the on-chain identifier",
      "Submission Form"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/relay-kit/guides/migrate-to-v2#chunk-0",
    "url": "https://docs.safe.global/sdk/relay-kit/guides/migrate-to-v2",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "SDK Relay Kit Guides Migrate to v2 Migrate to v2 This guide references the major changes between v1 and v2 to help those migrating an existing app. GelatoRelayPack The GelatoRelayPack constructor now includes a mandatory protocolKit parameter. It's required for any new pack extending the RelayKitBasePack . _ 10 constructor({ apiKey, protocolKit }: GelatoOptions) We removed the protocolKit parameter from the createTransactionWithHandlePayment() , createTransactionWithTransfer() , and executeRelayTransaction() methods in the GelatoRelayPack as now it's included in the constructor. Removed the export interface RelayPack type as we now use an abstract class. Gelato Relay Migrate to v3 Was this page helpful? Report issue",
    "title": "Migrate to v2 – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/relay-kit/guides/gelato-relay",
    "breadcrumbs": [
      {
        "text": "Relay Kit",
        "url": "/sdk/relay-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Migrate to v2",
      "GelatoRelayPack"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-fallback-handler#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-fallback-handler",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Advanced Safe Fallback Handler Safe Fallback Handler ‼️ Using a Safe Fallback Handler can introduce security risks, as it enables execution of arbitrary external functions within the Safe Smart Account. Only integrate fallback handlers from trusted sources that have undergone thorough security audits. The Safe Fallback Handler enables extending the functionality of a Safe Smart Account without modifying its core contract code. It addresses Ethereum's 24KB contract size limitation by delegating additional logic to external smart contracts. Fallback Handlers clearly separate modular logic from the core Safe implementation. A basic Safe Smart Account does not require any fallback handler by default. The addition or removal of fallback handler must be confirmed by a predefined threshold of Safe owners. To maintain transparency and security, an event is emitted whenever the fallback handler is updated. How it works If configured, the fallback handler contract is invoked whenever the function signature in the provided calldata does not match any existing function in the core Singleton contract. When forwarding a call to a fallback handler, the Safe Smart Account appends the original caller's address to the calldata. This allows the fallback handler to identify who initiated the request. Examples Below are several practical examples of fallback handlers that extend the functionality of Safe Smart Accounts. Each handler demonstrates specific capabilities and integration scenarios, highlighting how fallback handlers can be effectively utilized in various use cases. TokenCallbackHandler Source code: TokenCallbackHandler (opens in a new tab) Manages callbacks from supported token standards, allowing Safe accounts to directly receive tokens. Supports the following token interfaces: ERC1155TokenReceiver ERC777TokensRecipient ERC721TokenReceiver CompatibilityFallbackHandler Source code: CompatibilityFallbackHandler (opens in a new tab) Extends TokenCallbackHandler functionality. Implements ERC-1271 via the isValidSignature method, enabling secure on-chain signature verification. Provides a simulate function, which executes a static delegatecall to a target contract and intentionally reverts afterward to avoid unintended state changes. Includes additional utility functions: getMessageHash : Generates message hashes specific to the calling Safe instance. encodeMessageDataForSafe : Encodes messages using the Smart Account's domain separator and a predefined message type hash. getMessageHashForSafe : Combines message encoding and hashing into a final message hash. getModules : Retrieves a paginated list (first 10 entries) of modules associated with the Safe. ExtensibleFallbackHandler Source code: ExtensibleFallbackHandler (opens in a new tab) The ExtensibleFallbackHandler enables assigning individual fallback handlers to specific function signatures, allowing for more granular control over fallback behavior. Safe4337Module as Fallback Handler Source code: Safe4337Module (opens in a new tab) This fallback handler implements the validateUserOp function defined by ERC-4337, enabling Safe Smart Accounts to be used as ERC-4337 compatible smart contract wallets. Smart Account Guard Tutorial Smart Account Fallback Handler Tutorial Was this page helpful? Report issue",
    "title": "Safe Fallback Handler – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-guards/smart-account-guard-tutorial",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Safe Fallback Handler",
      "How it works",
      "Examples",
      "TokenCallbackHandler",
      "CompatibilityFallbackHandler",
      "ExtensibleFallbackHandler",
      "Safe4337Module as Fallback Handler"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Fallback Handler createEnableFallbackHandlerTx createEnableFallbackHandlerTx Returns a Safe transaction to enable the fallback handler. Usage example.ts setup.ts _ 18 import { SafeTransactionOptionalProps } from '@safe-global/protocol-kit' _ 18 import { protocolKit } from './setup.ts' _ 18 _ 18 const fallbackHandlerAddress = '0x...' _ 18 _ 18 const options: SafeTransactionOptionalProps = { _ 18 safeTxGas: '123', // Optional _ 18 baseGas: '123', // Optional _ 18 gasPrice: '123', // Optional _ 18 gasToken: '0x...', // Optional _ 18 refundReceiver: '0x...', // Optional _ 18 nonce: 123 // Optional _ 18 } _ 18 _ 18 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 18 fallbackHandlerAddress, _ 18 options // Optional _ 18 ) Parameters fallbackHandlerAddress Type : string The fallback handler address to enable. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...' _ 10 ) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...', _ 10 options: { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...', _ 10 options: { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...', _ 10 options: { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...', _ 10 options: { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...', _ 10 options: { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional) Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createEnableFallbackHandlerTx( _ 10 '0x...', _ 10 options: { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to enable the fallback handler. createDisableFallbackHandlerTx createPasskeySigner Was this page helpful? Report issue",
    "title": "createEnableFallbackHandlerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/fallback-handler/createdisablefallbackhandlertx",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "createEnableFallbackHandlerTx",
      "Usage",
      "Parameters",
      "fallbackHandlerAddress",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-smart-account/transactions/simulateAndRevert#chunk-0",
    "url": "https://docs.safe.global/reference-smart-account/transactions/simulateAndRevert",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Smart Account Reference Transactions simulateAndRevert simulateAndRevert Performs a delegatecall on a targetContract in the context of self . Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to abi.encode(bool(success), bytes(response)) . Specifically, the returndata after a call to this method will be: success:bool || response.length:uint256 || response:bytes . Usage example.sol _ 12 interface ISafe { _ 12 function simulateAndRevert( _ 12 address targetContract, _ 12 bytes calldata payload _ 12 ) external; _ 12 } _ 12 _ 12 contract Example { _ 12 function example() ... { _ 12 (ISafe safe).simulateAndRevert(0x..., \"0x...\"); _ 12 } _ 12 } Parameters targetContract Type: address Address of the contract containing the code to execute. _ 10 (ISafe safe).simulateAndRevert( _ 10 0x..., _ 10 \"0x...\" _ 10 ); calldataPayload Type: bytes Payload to be executed. _ 10 (ISafe safe).simulateAndRevert( _ 10 0x..., _ 10 \"0x...\" _ 10 ); getTransactionHash enableModule Was this page helpful? Report issue",
    "title": "simulateAndRevert – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-smart-account/modules/enableModule",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "simulateAndRevert",
      "Usage",
      "Parameters",
      "targetContract",
      "calldataPayload"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-smart-account/modules/disableModule#chunk-0",
    "url": "https://docs.safe.global/reference-smart-account/modules/disableModule",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Smart Account Reference Modules disableModule disableModule Disables the module module for the Safe. ⚠️ This action can only be done via a Safe transaction. Usage example.sol _ 10 interface ISafe { _ 10 function disableModule(address prevModule, address module) external; _ 10 } _ 10 _ 10 contract Example { _ 10 function example() ... { _ 10 (ISafe safe).disableModule(0x..., 0x...); _ 10 } _ 10 } Parameters prevModule Type: address Previous module in the modules linked list. _ 10 (ISafe safe).disableModule( _ 10 0x..., _ 10 0x... _ 10 ); module Type: address Module to be removed. _ 10 (ISafe safe).disableModule( _ 10 0x..., _ 10 0x... _ 10 ); Events DisabledModule _ 10 event DisabledModule(address module); Emitted when a module is disabled for the Safe. enableModule execTransactionFromModule Was this page helpful? Report issue",
    "title": "disableModule – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-smart-account/modules/enableModule",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "disableModule",
      "Usage",
      "Parameters",
      "prevModule",
      "module",
      "Events",
      "DisabledModule"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-signatures#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-signatures",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Advanced Signatures Signatures The Safe supports different types of signatures. All signatures are combined into a single bytes and transmitted to the contract when a transaction should be executed. Encoding Each signature has a constant length of 65 bytes. If more data is necessary it can be appended to the end of concatenated constant data of all signatures. The position is encoded into the constant length data. Constant part per signature: {(max) 64-bytes signature data}{1-byte signature type} All the signatures are sorted by the signer address and concatenated. ECDSA signature 31 > signature type > 26 To be able to have the ECDSA signature without the need of additional data we use the signature type byte to encode v . Constant part: {32-bytes r}{32-bytes s}{1-byte v} r , s and v are the required parts of the ECDSA signature to recover the signer. eth_sign signature signature type > 30 To be able to use eth_sign we need to take the parameters r , s and v from calling eth_sign and set v = v + 4 Constant part: {32-bytes r}{32-bytes s}{1-byte v} r , s and v are the required parts of the ECDSA signature to recover the signer. v will be subtracted by 4 to calculate the signature. Contract signature (EIP-1271) signature type == 0 Constant part: {32-bytes signature verifier}{32-bytes data position}{1-byte signature type} Signature verifier - Padded address of the contract that implements the EIP-1271 interface to verify the signature Data position - Position of the start of the signature data (offset relative to the beginning of the signature data) Signature type - 0 Dynamic part (solidity bytes): {32-bytes signature length}{bytes signature data} Signature data - Signature bytes that are verified by the signature verifier The method signMessage can be used to mark a message as signed on-chain. Pre-validated signatures signature type == 1 Constant Part: {32-bytes hash validator}{32-bytes ignored}{1-byte signature type} Hash validator - Padded address of the account that pre-validated the hash that should be validated. The Safe keeps track of all hashes that have been pre-validated. This is done with a mapping address to mapping of bytes32 to boolean where it's possible to set a hash as validated by a certain address (hash validator). To add an entry to this mapping use approveHash . Also if the validator is the sender of transaction that executed the Safe transaction it's not required to use approveHash to add an entry to the mapping. (This can be seen in the Team Edition tests (opens in a new tab) ) Signature type - 1 Examples Assuming that three signatures are required to confirm a transaction where one signer uses an EOA to generate a ECDSA signature, another a contract signature and the last a pre-validated signature: We assume that the following addresses generate the following signatures: {/* */} 0x3 (EOA address) -> bde0b9f486b1960454e326375d0b1680243e031fd4fb3f070d9a3ef9871ccfd5 (r) + 7d1a653cffb6321f889169f08e548684e005f2b0c3a6c06fba4c4a68f5e00624 (s) + 1c (v) 0x1 (EIP-1271 validator contract address) -> 0000000000000000000000000000000000000000000000000000000000000001 (address) + 00000000000000000000000000000000000000000000000000000000000000c3 (dynamic position) + 00 (signature type) The contract takes",
    "title": "Signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-concepts",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Signatures",
      "Encoding",
      "ECDSA signature",
      "eth_signsignature",
      "Contract signature (EIP-1271)",
      "Pre-validated signatures",
      "Examples"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-signatures#chunk-1",
    "url": "https://docs.safe.global/advanced/smart-account-signatures",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "the following bytes (dynamic part) for verification 00000000000000000000000000000000000000000000000000000000deadbeef 0x2 (Validator address) -> 0000000000000000000000000000000000000000000000000000000000000002 (address) + 0000000000000000000000000000000000000000000000000000000000000000 (padding - not used) + 01 (signature type) {/* */} The constant parts need to be sorted so that the recovered signers are sorted ascending (natural order) by address (not checksummed). The signatures bytes used for execTransaction would therefore be the following: _ 10 \"0x\" + _ 10 \"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c300\" + // encoded EIP-1271 signature _ 10 \"0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001\" + // encoded pre-validated signature _ 10 \"bde0b9f486b1960454e326375d0b1680243e031fd4fb3f070d9a3ef9871ccfd57d1a653cffb6321f889169f08e548684e005f2b0c3a6c06fba4c4a68f5e006241c\" + // encoded ECDSA signature _ 10 \"0000000000000000000000000000000000000000000000000000000000000004deadbeef\" // length of bytes + data of bytes Migration Multi-Chain Deployment Was this page helpful? Report issue",
    "title": "Signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-concepts",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Signatures",
      "Encoding",
      "ECDSA signature",
      "eth_signsignature",
      "Contract signature (EIP-1271)",
      "Pre-validated signatures",
      "Examples"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-overview#chunk-0",
    "url": "https://docs.safe.global/advanced/smart-account-overview",
    "chunk_index": 0,
    "total_chunks": 3,
    "text": "Advanced Overview How do Safe Smart Accounts work? EOAs EOAs , for short, are Ethereum accounts that use traditional key pairs. That is, they consist of a single private key that can be used to make transactions and sign messages. If you gain access to that private key, you gain complete control of the account. This means that your private key is a single point of failure between you and your funds being lost. Smart Accounts The other type of Ethereum account is a Smart Account , also sometimes called Smart Contract Account. Like EOAs, smart contract accounts each have a unique public Ethereum address, and it is impossible to tell them apart from EOAs by looking at an Ethereum address. Smart contract accounts, too, can receive funds and make transactions like EOAs but cannot initiate them. Generally, the key difference is that no single private key is used to verify transactions. Instead, the smart contract code defines the logic behind how the account completes transactions. Smart contracts are programs that run on the Ethereum blockchain and execute when specific conditions are met. Their functionality within contract accounts means that such accounts, in contrast to EOAs, can, for example, implement access rights that specify by whom, how, and under which conditions transactions can be executed, as well as more complex logic. Difference between EOAs and Contract Accounts Safe Smart Account Safe Smart Account is a Smart Account with multi-signature functionality at its core. It is secure and flexible, and it can be used to manage funds and execute transactions on the Ethereum blockchain. The vision for Safe Smart Accounts is to become the standard core used in all smart contract-based wallets. It also aims to make the benefits of Account Abstraction accessible to users and developers. The architectural design of Safe Smart Account keeps the following principles in mind. Secure default Uses a multi-signature logic where a threshold of owners must confirm a transaction before execution to provide a secure default without trusting any additional contract—for example, a module, guard, or fallback handler (explained below). Maximum flexibility Supports modules that execute transactions using alternative access patterns (instead of multi-signature). It also supports the delegatecall function, which introduces complex execution logic by loading instructions from other contracts and executing via a Safe Smart Account. Features High Security Safe's multi-signature functionality allows you to define a list of owner accounts and a threshold number of accounts required to confirm a transaction. Once the threshold of owner accounts have confirmed a transaction, the Safe transaction can be executed. Owners can be EOAs, other smart contract accounts, or even a passkey. Advanced execution logic It is possible to use different Safe Library contracts to perform complex transactions. A prevalent example is batched transactions , where multiple simple Ethereum transactions are combined and executed at once. That means instead of having to sign several transactions sequentially, a user just needs to sign one batched transaction. Advanced access management You can add Safe Modules to your",
    "title": "How do Safe Smart Accounts work? – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-concepts",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "How do Safe Smart Accounts work?",
      "EOAs",
      "Smart Accounts",
      "Difference between EOAs and Contract Accounts",
      "Safe Smart Account",
      "Features",
      "High Security",
      "Advanced execution logic",
      "Advanced access management",
      "Token callback support",
      "Sponsored transactions",
      "Architecture",
      "Safe Singleton Factory",
      "Safe Proxy Factory",
      "Safe",
      "Owner Management",
      "Module Management",
      "Executor",
      "Fallback Manager",
      "Guard Management",
      "SafeProxy"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-overview#chunk-1",
    "url": "https://docs.safe.global/advanced/smart-account-overview",
    "chunk_index": 1,
    "total_chunks": 3,
    "text": "Safe, which facilitates more fine-grained access management. For instance, defining a module that can only be used to recover access to a Safe under specific circumstances is possible. Another example is allowance modules that allow owners of a Safe to grant limited execution permission, such as a daily limit to external accounts. Token callback support Many new tokens require wallet contracts to implement callbacks. Token standards like ERC-721 and ERC-1155 allow contracts to immediately react to receiving tokens through these and make it even possible to reject the transfer altogether. Sponsored transactions Another core functionality of the Safe is token payment . Generally, Ethereum transactions require ETH to pay transaction fees (\"gas\"). With the Safe, users can pay transaction fees in several supported ERC20 tokens. This is realized via a transaction relay service that accepts those tokens and submits the transactions to the blockchain, paying the gas fee in ETH. With the same functionality, Ether-less transactions can be implemented, where a 3rd party pays transaction fees on behalf of a Safe via the same relay service. Architecture Safe Singleton Factory The Safe Singleton Factory is a contract that deploys all the Safe Smart Account related contracts. This contract helps to deploy Safe Smart Account contracts at the same address across different networks and eventually also helps to deploy Safe proxies at the same address across different networks. For more information, refer to the Safe Singleton Factory (opens in a new tab) repository. Safe Proxy Factory The Safe proxy factory contract provides a simple way to create a new proxy contract pointing to a singleton and executing a setup function in the newly deployed proxy all in one transaction. Safe This is a singleton contract deployed only once and used by Safe Proxy to delegate calls. It is the main contract that holds the logic for signature verification, executing transactions, managing owners, modules, and the fallback handler. As a singleton contract, it cannot be used directly as a Safe account but only through a Safe Proxy contract. The two types of Safe Smart Accounts are: Safe SafeL2: The version emits additional events and is to be used for L2 chains that don't support tracing. Hint: For legacy reasons they are referred as Safe. A Safe contract itself is composed of different contracts. The diagram below shows the main components of a Safe contract. Owner Management One core feature of a Safe account is that it can be operated by multiple accounts, known as owners. OwnerManager.sol allows you to add, remove, and replace owners. Furthermore, a threshold number of owners required to confirm a transaction for it to be executed can be specified and modified. You can retrieve the list of owners. Events are emitted every time an owner is added or removed and whenever the threshold changes. Module Management Modules add additional functionalities to the Safe accounts. They are smart contracts that implement Safe's functionality while separating module logic from Safe's core contract. Depending on the use case, modules could, for",
    "title": "How do Safe Smart Accounts work? – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-concepts",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "How do Safe Smart Accounts work?",
      "EOAs",
      "Smart Accounts",
      "Difference between EOAs and Contract Accounts",
      "Safe Smart Account",
      "Features",
      "High Security",
      "Advanced execution logic",
      "Advanced access management",
      "Token callback support",
      "Sponsored transactions",
      "Architecture",
      "Safe Singleton Factory",
      "Safe Proxy Factory",
      "Safe",
      "Owner Management",
      "Module Management",
      "Executor",
      "Fallback Manager",
      "Guard Management",
      "SafeProxy"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/advanced/smart-account-overview#chunk-2",
    "url": "https://docs.safe.global/advanced/smart-account-overview",
    "chunk_index": 2,
    "total_chunks": 3,
    "text": "instance, allow the execution of transactions without requiring all confirmations. A basic Safe does not require any modules. Adding and removing a module requires confirmation from the required threshold of owners. Modules are very security-critical, so they need to be as secure as all other Safe contracts. Some of the available modules are: Allowance Module (opens in a new tab) Recovery Module (opens in a new tab) 4337 Module (opens in a new tab) Passkey Module (opens in a new tab) Executor This contract contains the logic to execute call or delegatecall to external address. Fallback Manager Ethereum fallback functions are executed when a called function signature does not match any defined function. Specific use cases require those fallback functions to contain some logic. EVM limits the size of a Smart contract to 24KB. The Fallback Manager contract allows you to extend the functionality of the Safe contract by adding additional logic to the fallback function and overcoming the contract size limit. Guard Management Guards are used to check if a transaction should be executed or rejected based on the logic defined in the guard. A Guard Manager contract allows you to add, remove, and replace guards. Guards are security critical as a malicious guard could prevent transactions from being executed and block access to funds stored in the Safe. Events are emitted whenever a guard is updated. SafeProxy A Safe Proxy is a contract that delegates all calls to the Safe Singleton. Deploying a Proxy reduces the cost of creating a Safe account, as the proxy contract's byte code size is less than that of the actual Safe contract code. ← Go Home Concepts Was this page helpful? Report issue",
    "title": "How do Safe Smart Accounts work? – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/advanced/smart-account-concepts",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "How do Safe Smart Accounts work?",
      "EOAs",
      "Smart Accounts",
      "Difference between EOAs and Contract Accounts",
      "Safe Smart Account",
      "Features",
      "High Security",
      "Advanced execution logic",
      "Advanced access management",
      "Token callback support",
      "Sponsored transactions",
      "Architecture",
      "Safe Singleton Factory",
      "Safe Proxy Factory",
      "Safe",
      "Owner Management",
      "Module Management",
      "Executor",
      "Fallback Manager",
      "Guard Management",
      "SafeProxy"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/messages/signmessage#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/messages/signmessage",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Messages signMessage signMessage Signs a Safe message with the connected signer. Usage example.ts setup.ts _ 16 import { SigningMethod } from '@safe-global/protocol-kit' _ 16 import { EIP712TypedData } from '@safe-global/types-kit' _ 16 import { protocolKit } from './setup.ts' _ 16 _ 16 const rawMessage: string | EIP712TypedData = 'Example message' _ 16 const message = protocolKit.createMessage(rawMessage) _ 16 _ 16 const signingMethod = SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 16 _ 16 const preimageSafeAddress = '0x...' _ 16 _ 16 const signedMessage = await protocolKit.signMessage( _ 16 message, _ 16 signingMethod, // Optional _ 16 preimageSafeAddress // Optional _ 16 ) Parameters message Type : string The message to be signed. _ 10 const signedMessage = await protocolKit.signMessage( _ 10 '0x...' _ 10 ) signingMethod (Optional) Type : SigningMethodType (opens in a new tab) Default : SigningMethod.ETH_SIGN_TYPED_DATA_V4 The signature type. You can use multiple signing methods, such as: ETH_SIGN ( eth_sign ): Regular hash signature. ETH_SIGN_TYPED_DATA_V4 ( eth_signTypedData_v4 ): Typed data signature v4 . ETH_SIGN_TYPED_DATA_V3 ( eth_signTypedData_v3 ): Typed data signature v3 . ETH_SIGN_TYPED_DATA ( eth_signTypedData ): Typed data signature. SAFE_SIGNATURE : Signature from another Safe that acts as a signer. _ 10 const signedMessage = await protocolKit.signMessage( _ 10 '0x...', _ 10 SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 10 ) preimageSafeAddress (Optional) Type : string The address of the Safe that will be used to calculate the preimage. Required parameter for v1.3.0 and v1.4.1 Safe smart accounts. These versions use the old EIP-1271 interface, which uses bytes instead of bytes32 for the message. You need to use the pre-image of the message to calculate the message hash. _ 10 const signedMessage = await protocolKit.signMessage( _ 10 '0x...', _ 10 SigningMethod.ETH_SIGN_TYPED_DATA_V4, _ 10 '0x...' _ 10 ) Returns Promise<SafeMessage> The Safe message with the generated signature. isValidSignature createDisableModuleTx Was this page helpful? Report issue",
    "title": "signMessage – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "signMessage",
      "Usage",
      "Parameters",
      "message",
      "signingMethod(Optional)",
      "preimageSafeAddress(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getowners#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getowners",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Safe Configuration getOwners getOwners Returns the list of Safe owners. Usage example.ts setup.ts _ 10 import { protocolKit } from './setup.ts' _ 10 _ 10 const ownerAddresses = await protocolKit.getOwners() Returns Promise<string[]> The list of Safe owners. getNonce getOwnersWhoApprovedTx Was this page helpful? Report issue",
    "title": "getOwners – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/getownerswhoapprovedtx",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getOwners",
      "Usage",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/copytransaction#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/transactions/copytransaction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Transactions copyTransaction copyTransaction Copies a Safe transaction object. Usage example.ts setup.ts _ 17 import { _ 17 MetaTransactionData, _ 17 OperationType _ 17 } from '@safe-global/types-kit' _ 17 import { protocolKit } from './setup.ts' _ 17 _ 17 const transactions: MetaTransactionData[] = [{ _ 17 to: '0x...', _ 17 value: '123', _ 17 data: '0x', _ 17 operation: OperationType.Call // Optional _ 17 }] _ 17 const safeTransaction1 = await protocolKit.createTransaction({ _ 17 transactions _ 17 }) _ 17 _ 17 const safeTransaction2 = await copyTransaction(safeTransaction1) Parameters safeTransaction Type : SafeTransaction (opens in a new tab) The Safe transaction object to copy. _ 10 const safeTransaction2 = await copyTransaction( _ 10 safeTransaction _ 10 ) Returns Promise<SafeTransaction> The new object with a copy of the Safe transaction. isOwner createRejectionTransaction Was this page helpful? Report issue",
    "title": "copyTransaction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/isowner",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "copyTransaction",
      "Usage",
      "Parameters",
      "safeTransaction",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/deployment/getsafeaddressfromdeploymenttx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/deployment/getsafeaddressfromdeploymenttx",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Protocol Kit Reference Deployment getSafeAddressFromDeploymentTx getSafeAddressFromDeploymentTx Returns the Safe address from a Safe deployment transaction receipt. It scans the events emitted during the execution of the transaction to identify the creation event (opens in a new tab) and return its address. Usage example.ts setup.ts _ 21 import { getSafeAddressFromDeploymentTx } from '@safe-global/protocol-kit' _ 21 import { createWalletClient, http } from 'viem' _ 21 import { privateKeyToAccount } from 'viem/accounts' _ 21 import { sepolia } from 'viem/chains' _ 21 import { waitForTransactionReceipt } from 'viem/actions' _ 21 import { protocolKit } from './setup.ts' _ 21 _ 21 const account = privateKeyToAccount('0x...') _ 21 const client = createWalletClient({ _ 21 account, _ 21 chain: sepolia, _ 21 transport: http('https://rpc.ankr.com/eth_sepolia') _ 21 }) _ 21 const transactionReceipt = await waitForTransactionReceipt(client, { _ 21 hash: '0x...' _ 21 }) _ 21 _ 21 const safeAddress = getSafeAddressFromDeploymentTx( _ 21 transactionReceipt, _ 21 safeVersion: '1.4.1' _ 21 ) Parameters transactionReceipt Type : FormattedTransactionReceipt The transaction receipt of the Safe deployment. _ 10 const safeAddress = getSafeAddressFromDeploymentTx( _ 10 transactionReceipt, _ 10 '1.4.1' _ 10 ) safeVersion Type : SafeVersion (opens in a new tab) The version of the Safe account. _ 10 const safeAddress = getSafeAddressFromDeploymentTx( _ 10 transactionReceipt, _ 10 '1.4.1' _ 10 ) Returns string The address of the deployed Safe account. createSafeDeploymentTransaction createAddOwnerTx Was this page helpful? Report issue",
    "title": "getSafeAddressFromDeploymentTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createaddownertx",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "getSafeAddressFromDeploymentTx",
      "Usage",
      "Parameters",
      "transactionReceipt",
      "safeVersion",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createswapownertx#chunk-0",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createswapownertx",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Protocol Kit Reference Safe Configuration createSwapOwnerTx createSwapOwnerTx Returns a Safe transaction to replace an owner of the connected Safe with a new one. Usage example.ts passkeys-example.ts setup.ts _ 24 import { _ 24 SwapOwnerTxParams, _ 24 SafeTransactionOptionalProps _ 24 } from '@safe-global/protocol-kit' _ 24 import { protocolKit } from './setup.ts' _ 24 _ 24 const params: SwapOwnerTxParams = { _ 24 oldOwnerAddress, _ 24 newOwnerAddress _ 24 } _ 24 _ 24 const options: SafeTransactionOptionalProps = { _ 24 safeTxGas: '123', // Optional _ 24 baseGas: '123', // Optional _ 24 gasPrice: '123', // Optional _ 24 gasToken: '0x...', // Optional _ 24 refundReceiver: '0x...', // Optional _ 24 nonce: 123 // Optional _ 24 } _ 24 _ 24 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 24 params, _ 24 options // Optional _ 24 ) Parameters params.oldOwnerAddress Type : string The address of the owner to remove to the Safe. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx({ _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }) params.newOwnerAddress (Optional) Type : string The address of the owner to add to the Safe. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx({ _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }) params.newOwnerPasskey Type : PasskeyArgType The passkey associated with the owner to add to the Safe. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx({ _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerPasskey _ 10 }) options.safeTxGas (Optional) Type : string The gas that should be used for the Safe transaction. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 10 { _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }, _ 10 { _ 10 safeTxGas: '123' _ 10 } _ 10 ) options.baseGas (Optional) Type : string The gas costs for the data used to trigger the Safe transaction. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 10 { _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }, _ 10 { _ 10 baseGas: '123' _ 10 } _ 10 ) options.gasPrice (Optional) Type : string The price in wei that the sender is willing to pay for each unit of gas. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 10 { _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }, _ 10 { _ 10 gasPrice: '123' _ 10 } _ 10 ) options.gasToken (Optional) Type : string The token address that is used for the gas payment, or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 10 { _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }, _ 10 { _ 10 gasToken: '0x...' _ 10 } _ 10 ) options.refundReceiver (Optional) Type : string The address of the gas payment receiver or 0x0000000000000000000000000000000000000000 if there is no payment. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 10 { _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }, _ 10 { _ 10 refundReceiver: '0x...' _ 10 } _ 10 ) options.nonce (Optional)",
    "title": "createSwapOwnerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createremoveownertx",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "createSwapOwnerTx",
      "Usage",
      "Parameters",
      "params.oldOwnerAddress",
      "params.newOwnerAddress(Optional)",
      "params.newOwnerPasskey",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createswapownertx#chunk-1",
    "url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createswapownertx",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "Type : number The transaction nonce. _ 10 const safeTransaction = await protocolKit.createSwapOwnerTx( _ 10 { _ 10 oldOwnerAddress: '0x...', _ 10 newOwnerAddress: '0x...' _ 10 }, _ 10 { _ 10 nonce: 123 _ 10 } _ 10 ) Returns Promise<SafeTransaction> The Safe transaction to replace an owner. createRemoveOwnerTx getAddress Was this page helpful? Report issue",
    "title": "createSwapOwnerTx – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/reference-sdk-protocol-kit/safe-info/createremoveownertx",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "createSwapOwnerTx",
      "Usage",
      "Parameters",
      "params.oldOwnerAddress",
      "params.newOwnerAddress(Optional)",
      "params.newOwnerPasskey",
      "options.safeTxGas(Optional)",
      "options.baseGas(Optional)",
      "options.gasPrice(Optional)",
      "options.gasToken(Optional)",
      "options.refundReceiver(Optional)",
      "options.nonce(Optional)",
      "Returns"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/safe-deployment#chunk-0",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/safe-deployment",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "SDK Protocol Kit Guides Safe deployment Safe Deployment This guide will teach you how to deploy a new Safe using the Protocol Kit. This process includes initializing the Protocol Kit, setting up your Safe configuration, and executing the deployment. For more detailed information, see the Protocol Kit Reference . Prerequisites Node.js and npm (opens in a new tab) Install dependencies First, you need to install some dependencies. _ 10 pnpm add @safe-global/protocol-kit viem Steps Imports Here are all the necessary imports for this guide. _ 10 import Safe, { _ 10 PredictedSafeProps, _ 10 SafeAccountConfig, _ 10 SafeDeploymentConfig _ 10 } from '@safe-global/protocol-kit' _ 10 import { sepolia } from 'viem/chains' Create a signer You need a signer to instantiate the Protocol Kit. This example uses a private key to obtain a signer, but EIP-1193 (opens in a new tab) compatible signers are also supported. For detailed information about signers, please refer to the Protocol Kit reference . _ 10 const SIGNER_PRIVATE_KEY = // ... Initialize the Protocol Kit Initialize an instance of the Protocol Kit for each network where you want to deploy a new Safe smart account by calling the init method. Pass the provider with its corresponding value depending on the network, the signer executing the deployment, and the predictedSafe with the Safe account configuration. Optionally, you can track your Safe deployments and transactions on-chain by using the onchainAnalytics property. _ 17 const safeAccountConfig: SafeAccountConfig = { _ 17 owners: ['0x...', '0x...', '0x...'], _ 17 threshold: 2 _ 17 // More optional properties _ 17 } _ 17 _ 17 const predictedSafe: PredictedSafeProps = { _ 17 safeAccountConfig _ 17 // More optional properties _ 17 } _ 17 _ 17 const protocolKit = await Safe.init({ _ 17 provider: sepolia.rpcUrls.default.http[0], _ 17 signer: SIGNER_PRIVATE_KEY, _ 17 predictedSafe, _ 17 onchainAnalytics // Optional _ 17 }) Predict the Safe address You can predict the Safe address using the getAddress method in the Protocol Kit. _ 10 const safeAddress = await protocolKit.getAddress() Create the deployment transaction Create the deployment transaction to deploy a new Safe smart account by calling the createSafeDeploymentTransaction method. _ 10 const deploymentTransaction = await protocolKit.createSafeDeploymentTransaction() Execute the deployment transaction Once the deployment transaction object is ready, execute it using the provided signer or your preferred external Ethereum client. _ 12 const client = await protocolKit.getSafeProvider().getExternalSigner() _ 12 _ 12 const transactionHash = await client.sendTransaction({ _ 12 to: deploymentTransaction.to, _ 12 value: BigInt(deploymentTransaction.value), _ 12 data: deploymentTransaction.data as `0x${string}`, _ 12 chain: sepolia _ 12 }) _ 12 _ 12 const transactionReceipt = await client.waitForTransactionReceipt({ _ 12 hash: transactionHash _ 12 }) Reinitialize the Protocol Kit Once the deployment transaction is executed, connect the new Safe address to the Protocol Kit instance by calling the connect method. _ 10 const newProtocolKit = await protocolKit.connect({ _ 10 safeAddress _ 10 }) _ 10 _ 10 const isSafeDeployed = await newProtocolKit.isSafeDeployed() // True _ 10 const safeAddress = await newProtocolKit.getAddress() _ 10 const safeOwners = await newProtocolKit.getOwners() _",
    "title": "Safe Deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Safe Deployment",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize the Protocol Kit",
      "Predict the Safe address",
      "Create the deployment transaction",
      "Execute the deployment transaction",
      "Reinitialize the Protocol Kit",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/safe-deployment#chunk-1",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/safe-deployment",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "10 const safeThreshold = await newProtocolKit.getThreshold() Recap and further reading After following this guide, you are able to deploy new Safe smart accounts with the Protocol Kit. Protocol Kit Multichain Safe deployment Was this page helpful? Report issue",
    "title": "Safe Deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Safe Deployment",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Initialize the Protocol Kit",
      "Predict the Safe address",
      "Create the deployment transaction",
      "Execute the deployment transaction",
      "Reinitialize the Protocol Kit",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/multichain-safe-deployment#chunk-0",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/multichain-safe-deployment",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "SDK Protocol Kit Guides Multichain Safe deployment Multichain Safe Deployment This guide will teach you how to replicate a Safe address across different chains using the Protocol Kit. This process includes initializing the Protocol Kit, configuring the Safes to deploy, predicting its address on different chains, and executing the deployment transactions. For more detailed information, see the Protocol Kit Reference . Prerequisites Node.js and npm (opens in a new tab) Install dependencies First, you need to install the Protocol Kit. _ 10 pnpm add @safe-global/protocol-kit viem Steps Imports Here are all the necessary imports for this guide. _ 10 import Safe, { _ 10 PredictedSafeProps, _ 10 SafeAccountConfig, _ 10 SafeDeploymentConfig _ 10 } from '@safe-global/protocol-kit' _ 10 import { waitForTransactionReceipt } from 'viem/actions' _ 10 import { gnosisChiado, sepolia } from 'viem/chains' Create a signer You need a signer to instantiate the Protocol Kit. This example uses a private key to obtain a signer, but other EIP-1193 (opens in a new tab) compatible signers are also supported. For detailed information about signers, please refer to the Protocol Kit reference . _ 10 const SIGNER_PRIVATE_KEY = // ... Configure the Safe deployment Define the predictedSafe object with the configuration for all the Safe accounts you will deploy. Check the reference to learn about all the different configuration options. _ 10 const safeAccountConfig: SafeAccountConfig = { _ 10 owners: ['0x...', '0x...', '0x...'], _ 10 threshold: 2 _ 10 // ... _ 10 } _ 10 _ 10 const predictedSafe: PredictedSafeProps = { _ 10 safeAccountConfig _ 10 // ... _ 10 } Initialize the Protocol Kit Initialize an instance of the Protocol Kit for each network where you want to deploy a new Safe smart account by calling the init method. Pass the provider with its corresponding value depending on the network, the signer executing the deployment, and the predictedSafe with the Safe account configuration. _ 15 const protocolKitSepolia = await Safe.init({ _ 15 provider: sepolia.rpcUrls.default.http[0], _ 15 signer: SIGNER_PRIVATE_KEY, _ 15 predictedSafe, _ 15 onchainAnalytics // Optional _ 15 // ... _ 15 }) _ 15 _ 15 const protocolKitChiado = await Safe.init({ _ 15 provider: gnosisChiado.rpcUrls.default.http[0], _ 15 signer: PRIVATE_KEY, _ 15 predictedSafe, _ 15 onchainAnalytics // Optional _ 15 // ... _ 15 }) Optionally, you can track your Safe deployments and transactions on-chain by using the onchainAnalytics property. Predict the Safe addresses You can predict the Safe addresses by calling the getAddress method from each Protocol Kit instance and ensure that the result addresses are the same. _ 10 const sepoliaPredictedSafeAddress = await protocolKitSepolia.getAddress() _ 10 const chiadoPredictedSafeAddress = await protocolKitChiado.getAddress() Deployment on Sepolia Create the deployment transaction to deploy a new Safe account in Sepolia by calling the createSafeDeploymentTransaction method. _ 10 const sepoliaDeploymentTransaction = _ 10 await protocolKitSepolia.createSafeDeploymentTransaction() Call the sendTransaction method from your Sepolia client instance and wait for the transaction to be executed. _ 14 const sepoliaClient = _ 14 await protocolKitSepolia.getSafeProvider().getExternalSigner() _ 14 _ 14 const transactionHashSepolia = await sepoliaClient!.sendTransaction({ _ 14",
    "title": "Multichain Safe Deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Multichain Safe Deployment",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Configure the Safe deployment",
      "Initialize the Protocol Kit",
      "Predict the Safe addresses",
      "Deployment on Sepolia",
      "Deployment on Chiado",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/multichain-safe-deployment#chunk-1",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/multichain-safe-deployment",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "to: sepoliaDeploymentTransaction.to, _ 14 value: BigInt(sepoliaDeploymentTransaction.value), _ 14 data: sepoliaDeploymentTransaction.data as `0x${string}`, _ 14 chain: sepolia _ 14 }) _ 14 _ 14 await waitForTransactionReceipt( _ 14 sepoliaClient!, _ 14 { hash: transactionHashSepolia } _ 14 ) Once the deployment transaction is executed, connect the new Safe address to the Protocol Kit instance by calling the connect method. _ 10 const newProtocolKitSepolia = await protocolKitSepolia.connect({ _ 10 safeAddress: sepoliaPredictedSafeAddress _ 10 }) _ 10 _ 10 const isSepoliaSafeDeployed = await newProtocolKitSepolia.isSafeDeployed() // True _ 10 const sepoliaDeployedSafeAddress = await newProtocolKitSepolia.getAddress() If everything went well, isSepoliaSafeDeployed should be true , and the sepoliaDeployedSafeAddress should equal the sepoliaPredictedSafeAddress . Deployment on Chiado Repeat the same steps to deploy a Safe with the same configuration on Chiado testnet. _ 24 const chiadoDeploymentTransaction = _ 24 await protocolKitChiado.createSafeDeploymentTransaction() _ 24 _ 24 const chiadoClient = _ 24 await protocolKitChiado.getSafeProvider().getExternalSigner() _ 24 _ 24 const transactionHashChiado = await chiadoClient!.sendTransaction({ _ 24 to: chiadoDeploymentTransaction.to, _ 24 value: BigInt(chiadoDeploymentTransaction.value), _ 24 data: chiadoDeploymentTransaction.data as `0x${string}`, _ 24 chain: gnosisChiado _ 24 }) _ 24 _ 24 await waitForTransactionReceipt( _ 24 chiadoClient!, _ 24 { hash: transactionHashChiado } _ 24 ) _ 24 _ 24 const newProtocolKitChiado = await protocolKitChiado.connect({ _ 24 safeAddress: chiadoPredictedSafeAddress _ 24 }) _ 24 _ 24 const isChiadoSafeDeployed = await newProtocolKitChiado.isSafeDeployed() // True _ 24 const chiadoDeployedSafeAddress = await newProtocolKitChiado.getAddress() If everything went well, isChiadoSafeDeployed should be true , and the chiadoDeployedSafeAddress should equal the chiadoPredictedSafeAddress . In addition, chiadoDeployedSafeAddress and sepoliaDeployedSafeAddress should have the same value. Recap and further reading After following this guide, you are able to deploy multiple Safe accounts with the same address on different chains using the Protocol Kit. Safe deployment Execute transactions Was this page helpful? Report issue",
    "title": "Multichain Safe Deployment – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Multichain Safe Deployment",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Create a signer",
      "Configure the Safe deployment",
      "Initialize the Protocol Kit",
      "Predict the Safe addresses",
      "Deployment on Sepolia",
      "Deployment on Chiado",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/execute-transactions#chunk-0",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/execute-transactions",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "SDK Protocol Kit Guides Execute transactions Execute transactions In this guide, you will learn how to create Safe transactions, sign them, collect the signatures from the different owners, and execute them. See the Protocol Kit reference to find more details and configuration options. Prerequisites Node.js and npm (opens in a new tab) . An existing Safe with several signers. Install dependencies First, you need to install some dependencies. _ 10 pnpm add @safe-global/api-kit \\ _ 10 @safe-global/protocol-kit \\ _ 10 @safe-global/types-kit Steps Imports Here are all the necessary imports for this guide. _ 10 import SafeApiKit from '@safe-global/api-kit' _ 10 import Safe from '@safe-global/protocol-kit' _ 10 import { _ 10 MetaTransactionData, _ 10 OperationType _ 10 } from '@safe-global/types-kit' Setup You need a Safe account setup with two or more signers and threshold two, so at least multiple signatures have to be collected when executing a transaction. This example uses private keys, but any EIP-1193 compatible signers can be used. _ 10 const SAFE_ADDRESS = // ... _ 10 _ 10 const OWNER_1_ADDRESS = // ... _ 10 const OWNER_1_PRIVATE_KEY = // ... _ 10 _ 10 const OWNER_2_PRIVATE_KEY = // ... _ 10 _ 10 const RPC_URL = 'https://eth-sepolia.public.blastapi.io' This guide uses Sepolia, but you can use any chain from the Safe Transaction Service supported networks . Initialize the Protocol Kit To handle transactions and signatures, you need to create an instance of the Protocol Kit with the provider , signer and safeAddress . Optionally, you can track your Safe transactions on-chain by using the onchainAnalytics property. _ 10 const protocolKitOwner1 = await Safe.init({ _ 10 provider: RPC_URL, _ 10 signer: OWNER_1_PRIVATE_KEY, _ 10 safeAddress: SAFE_ADDRESS, _ 10 onchainAnalytics // Optional _ 10 }) Create a transaction Create a safeTransactionData object with the properties of the transaction, add it to an array of transactions you want to execute, and pass it to the createTransaction method. _ 10 const safeTransactionData: MetaTransactionData = { _ 10 to: '0x', _ 10 value: '1', // 1 wei _ 10 data: '0x', _ 10 operation: OperationType.Call _ 10 } _ 10 _ 10 const safeTransaction = await protocolKitOwner1.createTransaction({ _ 10 transactions: [safeTransactionData] _ 10 }) For more details on what to include in a transaction, see the createTransaction method in the reference. Propose the transaction Before a transaction can be executed, the signer who creates it needs to send it to the Safe Transaction Service so that it is accessible by the other owners, who can then give their approval and sign the transaction. Firstly, you need to create an instance of the API Kit. In chains where the Safe Transaction Service is supported, it's enough to specify the chainId property. _ 10 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 10 const apiKit = new SafeApiKit({ _ 10 chainId: 11155111n, _ 10 apiKey: 'YOUR_API_KEY' _ 10 }) You need to calculate the Safe transaction hash, sign the transaction hash, and call the proposeTransaction method from the API Kit instance to propose",
    "title": "Execute transactions – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Execute transactions",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Setup",
      "Initialize the Protocol Kit",
      "Create a transaction",
      "Propose the transaction",
      "Retrieve the pending transactions",
      "Confirm the transaction",
      "Execute the transaction",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/execute-transactions#chunk-1",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/execute-transactions",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "a transaction. For a full list and description of the properties see proposeTransaction in the API Kit reference. _ 13 // Deterministic hash based on transaction parameters _ 13 const safeTxHash = await protocolKitOwner1.getTransactionHash(safeTransaction) _ 13 _ 13 // Sign transaction to verify that the transaction is coming from owner 1 _ 13 const senderSignature = await protocolKitOwner1.signHash(safeTxHash) _ 13 _ 13 await apiKit.proposeTransaction({ _ 13 safeAddress, _ 13 safeTransactionData: safeTransaction.data, _ 13 safeTxHash, _ 13 senderAddress: OWNER_1_ADDRESS, _ 13 senderSignature: senderSignature.data _ 13 }) Retrieve the pending transactions The other signers need to retrieve the pending transactions from the Safe Transaction Service. Depending on the situation, different methods in the API Kit are available. Call the getPendingTransactions method to retrieve all the pending transactions of a Safe account. _ 10 const pendingTransactions = (await apiKit.getPendingTransactions(safeAddress)).results Confirm the transaction Once a signer has the pending transaction, they need to sign it with the Protocol Kit and submit the signature to the service using the confirmTransaction method. _ 14 const protocolKitOwner2 = await Safe.init({ _ 14 provider: RPC_URL, _ 14 signer: OWNER_2_PRIVATE_KEY, _ 14 safeAddress: SAFE_ADDRESS _ 14 }) _ 14 _ 14 const safeTxHash = transaction.transactionHash _ 14 const signature = await protocolKitOwner2.signHash(safeTxHash) _ 14 _ 14 // Confirm the Safe transaction _ 14 const signatureResponse = await apiKit.confirmTransaction( _ 14 safeTxHash, _ 14 signature.data _ 14 ) Execute the transaction The Safe transaction is now ready to be executed. This can be done using the Safe{Wallet} (opens in a new tab) web interface, the Protocol Kit , the Safe CLI or any other tool that's available. In this guide, the first signer will get the transaction from the service by calling the getTransaction method and execute it by passing the transaction with all the signatures to the executeTransaction method. _ 10 const safeTransaction = await apiKit.getTransaction(safeTxHash) _ 10 const executeTxResponse = await protocolKitOwner1.executeTransaction(safeTransaction) Recap and further reading After following this guide, you are able to create, sign, and execute Safe transactions with the Protocol Kit and share the signatures with the different signers using the API Kit. Multichain Safe deployment Signatures Was this page helpful? Report issue",
    "title": "Execute transactions – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Execute transactions",
      "Prerequisites",
      "Install dependencies",
      "Steps",
      "Imports",
      "Setup",
      "Initialize the Protocol Kit",
      "Create a transaction",
      "Propose the transaction",
      "Retrieve the pending transactions",
      "Confirm the transaction",
      "Execute the transaction",
      "Recap and further reading"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions#chunk-0",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions",
    "chunk_index": 0,
    "total_chunks": 6,
    "text": "SDK Protocol Kit Guides Signatures Transactions Transaction signatures This guide explains how transactions are signed by the Safe owners using the Protocol Kit. ℹ️ Before starting, check this guide's setup . Prerequisites Node.js and npm (opens in a new tab) Steps Install dependencies _ 10 yarn install @safe-global/protocol-kit Create a transaction The createTransaction method in the Protocol Kit allows the creation of new Safe transactions and returns an instance of the EthSafeTransaction class. _ 10 // Create a transaction to send 0.01 ETH _ 10 const safeTransactionData: SafeTransactionDataPartial = { _ 10 to: '0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1', _ 10 value: '100000000000000000', // 0.01 ETH _ 10 data: '0x' _ 10 } _ 10 _ 10 let safeTransaction = await protocolKit.createTransaction({ _ 10 transactions: [safeTransactionData] _ 10 }) The returned safeTransaction object contains the transaction data ( safeTransaction.data ) and a map of the owner-signature pairs ( safeTransaction.signatures ). The structure is similar to the EthSafeMessage class but applied for transactions instead of messages. We use let to initialize the safeTransaction variable because we will add the signatures later. _ 10 class EthSafeTransaction implements SafeTransaction { _ 10 data: SafeTransactionData _ 10 signatures: Map<string, SafeSignature> = new Map() _ 10 ... _ 10 // Other properties and methods _ 10 } Sign the transaction Once the safeTransaction object is created, we need to collect the signatures from the signers who will sign it. Following our setup , we will sign a Safe transaction from SAFE_3_4_ADDRESS , the main Safe account in this guide. To do that, we first need to sign the same transaction with its owners: OWNER_1_ADDRESS , OWNER_2_ADDRESS , SAFE_1_1_ADDRESS , and SAFE_2_3_ADDRESS . ECDSA signature This applies to OWNER_1_ADDRESS and OWNER_2_ADDRESS accounts, as both are EOAs. The signTransaction method takes the safeTransaction together with a SigningMethod and adds the new signature to the safeTransaction.signatures map. Depending on the type of message, the SigningMethod can take these values: SigningMethod.ETH_SIGN SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 25 // Connect OWNER_1_ADDRESS _ 25 protocolKit = await protocolKit.connect({ _ 25 provider: RPC_URL, _ 25 signer: OWNER_1_PRIVATE_KEY _ 25 }) _ 25 _ 25 // Sign the safeTransaction with OWNER_1_ADDRESS _ 25 // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS _ 25 safeTransaction = await protocolKit.signTransaction( _ 25 safeTransaction, _ 25 SigningMethod.ETH_SIGN _ 25 ) _ 25 _ 25 // Connect OWNER_2_ADDRESS _ 25 protocolKit = await protocolKit.connect({ _ 25 provider: RPC_URL, _ 25 signer: OWNER_2_PRIVATE_KEY _ 25 }) _ 25 _ 25 // Sign the safeTransaction with OWNER_2_ADDRESS _ 25 // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS and OWNER_2_ADDRESS _ 25 safeTransaction = await protocolKit.signTransaction( _ 25 safeTransaction, _ 25 SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 25 ) At this point, the safeTransaction object should look like this: _ 15 EthSafeTransaction { _ 15 signatures: Map(2) { _ 15 '0x90f8bf6a479f320ead074411a4b0e7944ea8c9c1' => EthSafeSignature { _ 15 signer: '0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1', _ 15 data: '0x969308e2abeda61a0c9c41b3c615012f50dd7456ca76ea39a18e3b975abeb67f275b07810dd59fc928f3f9103e52557c1578c7c5c171ffc983afa5306466b1261f', _ 15 isContractSignature: false _ 15 }, _ 15 '0xffcf8fdee72ac11b5c542428b35eef5769c409f0' => EthSafeSignature { _ 15 signer: '0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0', _ 15 data: '0x4d63c79cf9d743782bc31ad58c1a316020b39839ab164caee7ecac9829f685cc44ec0d066a5dfe646b2ffeeb37575df131daf9c96ced41b8c7c4aea8dc5461801c', _ 15 isContractSignature: false _ 15",
    "title": "Transaction signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Transaction signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a transaction",
      "Sign the transaction",
      "ECDSA signature",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Propose the transaction",
      "Confirm the transaction",
      "Execute the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions#chunk-1",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions",
    "chunk_index": 1,
    "total_chunks": 6,
    "text": "} _ 15 }, _ 15 data: { ... } _ 15 } The signatures.data represents a specific signature. The isContractSignature flag set to false indicates that the signature isn't a smart contract signature but an ECDSA signature instead. An ECDSA signature comprises two 32-byte integers ( r , s ) and an extra byte for recovery ( v ), totaling 65 bytes. In hexadecimal string format, each byte is represented by two characters. Hence, a 65-byte Ethereum signature will be 130 characters long. Including the 0x prefix commonly used with signatures, the total character count for such a signature would be 132. Two more characters are required to represent a byte (8 bits) in hexadecimal. Each hexadecimal character represents four bits. Therefore, two hexadecimal characters (2 x 4 bits) can represent a byte (8 bits). The final part of the signature, either 1f or 1c , indicates the signature type. Safe supports the following v values: 0 : Contract signature. 1 : Approved hash. {27, 28} + 4 : Ethereum adjusted ECDSA recovery byte for EIP-191 signed message. Regarding the EIP-191 signed message, the v value is adjusted to the ECDSA v + 4 . If the generated value is 28 and adjusted to 0x1f , the signature verification will fail as it should be 0x20 ('28 + 4 = 32 ) instead. If v > 30 , then the default v ( 27 , 28 ) was adjusted because of the eth_sign` implementation. This calculation is automatically done by the Safe{Core} SDK. Other: Ethereum adjusted ECDSA recovery byte for raw signed hash. The hexadecimal value 1f equals the decimal number 31 . If the decimal value is greater than 30 , it indicates (opens in a new tab) that the signature is an eth_sign signature. The hexadecimal value 1c equals the decimal number 28 , indicating that the signature is a typed data signature. The initial signature should look like this: 0x969308e2abeda61a0c9c41b3c615012f50dd7456ca76ea39a18e3b975abeb67f275b07810dd59fc928f3f9103e52557c1578c7c5c171ffc983afa5306466b1261f : Type Description Bytes Value Hex Hex string characters 1 0x Signature Signature bytes 64 969308e2abeda61a0c9c41b3c615012f50dd7456ca76ea39a18e3b975abeb67f275b07810dd59fc928f3f9103e52557c1578c7c5c171ffc983afa5306466b126 Signature Type 1f hex is 31 in decimal 1 1f Smart contract signatures When signing with a Safe account, the SigningMethod will take the value SigningMethod.SAFE_SIGNATURE . 1/1 Safe account This applies to the SAFE_1_1_ADDRESS account, another owner of SAFE_3_4_ADDRESS . We need to connect the Protocol Kit to SAFE_1_1_ADDRESS and the OWNER_3_ADDRESS account (the only owner of SAFE_1_1_ADDRESS ) and sign the transaction. _ 19 // Create a new transaction object _ 19 let transactionSafe1_1 = await protocolKit.createTransaction({ _ 19 transactions: [safeTransactionData] _ 19 }) _ 19 _ 19 // Connect OWNER_3_ADDRESS and SAFE_1_1_ADDRESS _ 19 protocolKit = await protocolKit.connect({ _ 19 provider: RPC_URL, _ 19 signer: OWNER_3_PRIVATE_KEY, _ 19 safeAddress: SAFE_1_1_ADDRESS _ 19 }) _ 19 _ 19 // Sign the transactionSafe1_1 with OWNER_3_ADDRESS _ 19 // After this, transactionSafe1_1 contains the signature from OWNER_3_ADDRESS _ 19 transactionSafe1_1 = await protocolKit.signTransaction( _ 19 transactionSafe1_1, _ 19 SigningMethod.SAFE_SIGNATURE, _ 19 SAFE_3_4_ADDRESS // Parent Safe address _ 19 ) When",
    "title": "Transaction signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Transaction signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a transaction",
      "Sign the transaction",
      "ECDSA signature",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Propose the transaction",
      "Confirm the transaction",
      "Execute the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions#chunk-2",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions",
    "chunk_index": 2,
    "total_chunks": 6,
    "text": "signing with a child Safe account, we need to specify the parent Safe address to generate the signature based on the version of the contract. At this point, the transactionSafe1_1 object should look like this: _ 10 EthSafeTransaction { _ 10 signatures: Map(1) { _ 10 '0x22d491bde2303f2f43325b2108d26f1eaba1e32b' => EthSafeSignature { _ 10 signer: '0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b', _ 10 data: '0x5edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f', _ 10 isContractSignature: false _ 10 } _ 10 }, _ 10 data: { ...} _ 10 } The signatures.data represents a specific signature. The isContractSignature flag set to false indicates that the signature isn't a smart contract signature but an ECDSA signature instead. To generate a Safe compatible signature, we use the buildContractSignature method, which takes an array of signatures and returns another signature that can be used with Safe accounts. After that, we add the signature from SAFE_1_1_ADDRESS to our initial transaction. _ 10 // Build the contract signature of SAFE_1_1_ADDRESS _ 10 const signatureSafe1_1 = await buildContractSignature( _ 10 Array.from(transactionSafe1_1.signatures.values()), _ 10 SAFE_1_1_ADDRESS _ 10 ) _ 10 _ 10 // Add the signatureSafe1_1 to safeTransaction _ 10 // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS, OWNER_2_ADDRESS and SAFE_1_1_ADDRESS _ 10 safeTransaction.addSignature(signatureSafe1_1) The signatureSafe1_1 object should look like this: _ 10 EthSafeSignature { _ 10 signer: '0x215033cdE0619D60B7352348F4598316Cc39bC6E', _ 10 data: '0x5edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f', _ 10 isContractSignature: true _ 10 } The isContractSignature flag is now true because signatureSafe1_1 is an EIP-1271 smart contract signature from the SAFE_1_1_ADDRESS account. The signatureSafe1_1.data signature should look like this: _ 10 0x000000000000000000000000215033cdE0619D60B7352348F4598316Cc39bC6E00000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000415edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f Type Description Bytes Value Hex Hex string characters 1 0x Verifier Padded address of the contract that implements the EIP-1271 interface to verify the signature. The Safe signer address 32 000000000000000000000000215033cdE0619D60B7352348F4598316Cc39bC6E Data position Start position of the signature data (offset relative to the beginning of the signature data). 41 hex is 65 in decimal 32 0000000000000000000000000000000000000000000000000000000000000041 Signature Type 00 for Safe accounts (opens in a new tab) 1 00 Signature Length The length of the signature. 41 hex is 65 in decimal 32 0000000000000000000000000000000000000000000000000000000000000041 Signature Signature bytes that are verified by the signature verifier 65 5edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f 2/3 Safe account This applies to the SAFE_2_3_ADDRESS account, another owner of SAFE_3_4_ADDRESS . We need to connect the Protocol Kit to SAFE_2_3_ADDRESS and the OWNER_4_ADDRESS and OWNER_5_ADDRESS accounts (owners of SAFE_2_3_ADDRESS ) and sign the transaction. _ 33 // Create a new transaction object _ 33 let transactionSafe2_3 = await protocolKit.createTransaction({ _ 33 transactions: [safeTransactionData] _ 33 }) _ 33 _ 33 // Connect OWNER_4_ADDRESS and the address of SAFE_2_3_ADDRESS _ 33 protocolKit = await protocolKit.connect({ _ 33 provider: RPC_URL, _ 33 signer: OWNER_4_ADDRESS, _ 33 safeAddress: SAFE_2_3_ADDRESS _ 33 }) _ 33 _ 33 // Sign the transactionSafe2_3 with OWNER_4_ADDRESS _ 33 // After this, the transactionSafe2_3 contains the signature from OWNER_4_ADDRESS _ 33 transactionSafe2_3 = await protocolKit.signTransaction( _ 33 transactionSafe2_3, _ 33 SigningMethod.SAFE_SIGNATURE, _ 33 SAFE_3_4_ADDRESS // Parent Safe address _ 33 ) _ 33 _ 33 // Connect OWNER_5_ADDRESS _ 33 protocolKit = await protocolKit.connect({ _ 33 provider: RPC_URL, _ 33",
    "title": "Transaction signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Transaction signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a transaction",
      "Sign the transaction",
      "ECDSA signature",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Propose the transaction",
      "Confirm the transaction",
      "Execute the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions#chunk-3",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions",
    "chunk_index": 3,
    "total_chunks": 6,
    "text": "signer: OWNER_5_ADDRESS _ 33 }) _ 33 _ 33 // Sign the transactionSafe2_3 with OWNER_5_ADDRESS _ 33 // After this, the transactionSafe2_3 contains the signature from OWNER_5_ADDRESS _ 33 transactionSafe2_3 = await protocolKit.signTransaction( _ 33 transactionSafe2_3, _ 33 SigningMethod.SAFE_SIGNATURE, _ 33 SAFE_3_4_ADDRESS // Parent Safe address _ 33 ) At this point, the transactionSafe2_3 object should look like this: _ 15 EthSafeTransaction { _ 15 signatures: Map(2) { _ 15 '0xe11ba2b4d45eaed5996cd0823791e0c93114882d' => EthSafeSignature { _ 15 signer: '0xE11BA2b4D45Eaed5996Cd0823791E0C93114882d', _ 15 data: '0xd3e6565e5590641db447277243cf24711dce533cfcaaf3a64415dcb9fa309fbf2de1ae4709c6450752acc0d45e01b67b55379bdf4e3dc32b2d89ad0a60c231d61f', _ 15 isContractSignature: false _ 15 }, _ 15 '0xd03ea8624c8c5987235048901fb614fdca89b117' => EthSafeSignature { _ 15 signer: '0xd03ea8624C8C5987235048901fB614fDcA89b117', _ 15 data: '0x023d1746ed548e90f387a6b8ddba26e6b80a78d5bfbc36e5bfcbfd63e136f8071db6e91c037fa36bde72159138bbb74fc359b35eb515e276a7c0547d5eaa042520', _ 15 isContractSignature: false _ 15 } _ 15 }, _ 15 data: { ... } _ 15 } We now have two signatures from the owners, OWNER_4_ADDRESS and OWNER_5_ADDRESS . Following the same process, we can create the contract signature and examine the result. The signatures.data represents a specific signature. The isContractSignature flag set to false indicates that the signature isn't a smart contract signature but an ECDSA signature instead. To generate a Safe compatible signature, we use the buildContractSignature method, which takes an array of signatures and returns another signature that can be used with Safe accounts. After that, we add the signature from safe1_1 to our initial transaction. _ 10 // Build the contract signature of SAFE_2_3_ADDRESS _ 10 const signatureSafe2_3 = await buildContractSignature( _ 10 Array.from(transactionSafe2_3.signatures.values()), _ 10 SAFE_2_3_ADDRESS _ 10 ) _ 10 _ 10 // Add the signatureSafe2_3 to safeTransaction _ 10 // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS, OWNER_2_ADDRESS, SAFE_1_1_ADDRESS and SAFE_2_3_ADDRESS _ 10 safeTransaction.addSignature(signatureSafe2_3) The signatureSafe2_3 object should look like this: _ 10 0x000000000000000000000000f75D61D6C27a7CC5788E633c1FC130f0F4a62D330000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000082023d1746ed548e90f387a6b8ddba26e6b80a78d5bfbc36e5bfcbfd63e136f8071db6e91c037fa36bde72159138bbb74fc359b35eb515e276a7c0547d5eaa042520d3e6565e5590641db447277243cf24711dce533cfcaaf3a64415dcb9fa309fbf2de1ae4709c6450752acc0d45e01b67b55379bdf4e3dc32b2d89ad0a60c231d61f Type Description Bytes Value Hex Hex string characters 1 0x Verifier Padded address of the contract that implements the EIP-1271 interface to verify the signature. The Safe signer address 32 000000000000000000000000f75D61D6C27a7CC5788E633c1FC130f0F4a62D33 Data position Start position of the signature data (offset relative to the beginning of the signature data). 41 hex is 65 in decimal 32 0000000000000000000000000000000000000000000000000000000000000041 Signature Type 00 for Safe accounts (opens in a new tab) 1 00 Signature Length The length of the signature. 82 hex is 130 in decimal 32 0000000000000000000000000000000000000000000000000000000000000082 Signature Signature bytes that are verified by the signature verifier (130 bytes are represented by 260 characters in an hex string) 130 023d1746ed548e90f387a6b8ddba26e6b80a78d5bfbc36e5bfcbfd63e136f8071db6e91c037fa36bde72159138bbb74fc359b35eb515e276a7c0547d5eaa042520d3e6565e5590641db447277243cf24711dce533cfcaaf3a64415dcb9fa309fbf2de1ae4709c6450752acc0d45e01b67b55379bdf4e3dc32b2d89ad0a60c231d61f The table looks very similar to the previous one, but there are two main differences: The Signature Length value has doubled because safe2_3 needs two signatures. The Signature value is a concatenation of the two regular signatures. After following all the steps above, the safeTransaction now contains all the signatures from the owners of the Safe. The safeTransaction object should look like this: _ 36 EthSafeTransaction { _ 36 signatures: Map(4) { _ 36 '0x90f8bf6a479f320ead074411a4b0e7944ea8c9c1' => EthSafeSignature { _ 36 signer: '0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1', _ 36 data: '0x969308e2abeda61a0c9c41b3c615012f50dd7456ca76ea39a18e3b975abeb67f275b07810dd59fc928f3f9103e52557c1578c7c5c171ffc983afa5306466b1261f', _ 36 isContractSignature: false _ 36 }, _ 36 '0xffcf8fdee72ac11b5c542428b35eef5769c409f0' => EthSafeSignature { _ 36 signer: '0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0', _ 36 data: '0x4d63c79cf9d743782bc31ad58c1a316020b39839ab164caee7ecac9829f685cc44ec0d066a5dfe646b2ffeeb37575df131daf9c96ced41b8c7c4aea8dc5461801c', _ 36 isContractSignature: false _ 36 }, _",
    "title": "Transaction signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Transaction signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a transaction",
      "Sign the transaction",
      "ECDSA signature",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Propose the transaction",
      "Confirm the transaction",
      "Execute the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions#chunk-4",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions",
    "chunk_index": 4,
    "total_chunks": 6,
    "text": "36 '0x215033cde0619d60b7352348f4598316cc39bc6e' => EthSafeSignature { _ 36 signer: '0x215033cdE0619D60B7352348F4598316Cc39bC6E', _ 36 data: '0x5edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f', _ 36 isContractSignature: true _ 36 }, _ 36 '0xf75d61d6c27a7cc5788e633c1fc130f0f4a62d33' => EthSafeSignature { _ 36 signer: '0xf75D61D6C27a7CC5788E633c1FC130f0F4a62D33', _ 36 data: '0x023d1746ed548e90f387a6b8ddba26e6b80a78d5bfbc36e5bfcbfd63e136f8071db6e91c037fa36bde72159138bbb74fc359b35eb515e276a7c0547d5eaa042520d3e6565e5590641db447277243cf24711dce533cfcaaf3a64415dcb9fa309fbf2de1ae4709c6450752acc0d45e01b67b55379bdf4e3dc32b2d89ad0a60c231d61f', _ 36 isContractSignature: true _ 36 } _ 36 }, _ 36 data: { _ 36 to: '0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1', _ 36 value: '100000000000000000', _ 36 data: '0x', _ 36 operation: 0, _ 36 baseGas: '0', _ 36 gasPrice: '0', _ 36 gasToken: '0x0000000000000000000000000000000000000000', _ 36 refundReceiver: '0x0000000000000000000000000000000000000000', _ 36 nonce: 0, _ 36 safeTxGas: '0' _ 36 } _ 36 } Propose the transaction To store the transactions and signatures off-chain, we need to call the Safe Transaction Service API - a centralized and open-source service that anyone can deploy and run. The Safe Transaction Service is used by Safe{Wallet} (opens in a new tab) to store transactions and signatures by default. To store a new transaction, we need to call the proposeTransaction from the API Kit, passing the Safe address, an object with the transaction, and a signature from one owner. _ 22 // Get the signature from OWNER_1_ADDRESS _ 22 const signatureOwner1 = safeTransaction.getSignature(OWNER_1_ADDRESS) as EthSafeSignature _ 22 _ 22 // Get the transaction hash of the safeTransaction _ 22 const safeTransactionHash = await protocolKit.getTransactionHash(safeTransaction) _ 22 _ 22 // Instantiate the API Kit _ 22 // Use the chainId where you have the Safe account deployed _ 22 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 22 const apiKit = new SafeApiKit({ _ 22 chainId, _ 22 apiKey: 'YOUR_API_KEY' _ 22 }) _ 22 _ 22 // Propose the transaction _ 22 await apiKit.proposeTransaction({ _ 22 safeAddress: SAFE_3_4_ADDRESS, _ 22 safeTransactionData: safeTransaction.data, _ 22 safeTxHash: safeTransactionHash, _ 22 senderAddress: signerAddress, _ 22 senderSignature: buildSignatureBytes([signatureOwner1]) _ 22 }) The transaction is now publicly available in the Safe Transaction Service with the signature of the owner who submitted it. Confirm the transaction To add the signatures from the remaining owners, we need to call the confirmTransaction , passing the safeMessageHash and a signature from the owner. Once a transaction is proposed, it becomes available on Safe{Wallet} (opens in a new tab) . However, to execute the transaction, all the confirmations from the owners are needed. _ 19 const signatureOwner2 = safeTransaction.getSignature(OWNER_2_ADDRESS) as EthSafeSignature _ 19 _ 19 // Confirm the transaction from OWNER_2_ADDRESS _ 19 await apiKit.confirmTransaction( _ 19 safeTransactionHash, _ 19 buildSignatureBytes([signatureOwner2]) _ 19 ) _ 19 _ 19 // Confirm the transaction with the owner SAFE_1_1_ADDRESS _ 19 await apiKit.confirmTransaction( _ 19 safeTransactionHash, _ 19 buildSignatureBytes([signatureSafe1_1]) _ 19 ) _ 19 _ 19 // Add signature from the owner SAFE_2_3_ADDRESS _ 19 await apiKit.confirmTransaction( _ 19 safeTransactionHash, _ 19 buildSignatureBytes([signerSafeSig2_3]) _ 19 ) At this point, the transaction stored in the Safe Transaction Service contains all the required signatures from the owners of the Safe. The getTransaction method returns the transaction with the confirmations property to check all the added signatures. _ 10 // Get the transactions _ 10 const signedTransaction =",
    "title": "Transaction signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Transaction signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a transaction",
      "Sign the transaction",
      "ECDSA signature",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Propose the transaction",
      "Confirm the transaction",
      "Execute the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions#chunk-5",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/transactions",
    "chunk_index": 5,
    "total_chunks": 6,
    "text": "await apiKit.getTransaction(safeTransactionHash) _ 10 _ 10 // Get the confirmations _ 10 const confirmations = signedTransaction.confirmations Safe{Wallet} (opens in a new tab) exposes to its users the list of pending transactions. _ 10 https://app.safe.global/transactions/queue?safe=<NETWORK_PREFIX>:<SAFE_ADDRESS> Execute the transaction Connect the Safe and an a signer to the Protocol Kit. Ensure enough funds are available in the owner's account to execute the transaction and cover the gas costs. Once the Protocol Kit is initialized, the executeTransaction method receives and executes the transaction with the required signatures. _ 10 protocolKit = await protocolKit.connect({ _ 10 provider: RPC_URL, _ 10 signer: OWNER_1_PRIVATE_KEY, _ 10 safeAddress: SAFE_3_4_ADDRESS _ 10 }) _ 10 _ 10 // Execute the Safe transaction _ 10 const transactionResponse = await protocolKit.executeTransaction(safeTransaction) At this point, the Safe transaction should be executed on-chain and listed on Safe{Wallet} (opens in a new tab) . _ 10 https://app.safe.global/transactions/history?safe=<NETWORK_PREFIX>:<SAFE_ADDRESS> The safeTransaction.encodedSignature method returns the signatures concatenated and sorted by the address of the signers. It should look like this: _ 10 0x000000000000000000000000215033cdE0619D60B7352348F4598316Cc39bC6E000000000000000000000000000000000000000000000000000000000000010400969308e2abeda61a0c9c41b3c615012f50dd7456ca76ea39a18e3b975abeb67f275b07810dd59fc928f3f9103e52557c1578c7c5c171ffc983afa5306466b1261f000000000000000000000000f75D61D6C27a7CC5788E633c1FC130f0F4a62D330000000000000000000000000000000000000000000000000000000000000165004d63c79cf9d743782bc31ad58c1a316020b39839ab164caee7ecac9829f685cc44ec0d066a5dfe646b2ffeeb37575df131daf9c96ced41b8c7c4aea8dc5461801c00000000000000000000000000000000000000000000000000000000000000415edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f0000000000000000000000000000000000000000000000000000000000000082023d1746ed548e90f387a6b8ddba26e6b80a78d5bfbc36e5bfcbfd63e136f8071db6e91c037fa36bde72159138bbb74fc359b35eb515e276a7c0547d5eaa042520d3e6565e5590641db447277243cf24711dce533cfcaaf3a64415dcb9fa309fbf2de1ae4709c6450752acc0d45e01b67b55379bdf4e3dc32b2d89ad0a60c231d61f Type Description Bytes Acc byte Value Hex Hex string characters 1 - 0x 1/1 Safe signer Safe Address 32 32 000000000000000000000000215033cdE0619D60B7352348F4598316Cc39bC6E Data position for 1/1 Safe 104 hex = Signature data for 1/1 Safe start at byte 260 32 64 0000000000000000000000000000000000000000000000000000000000000104 Signature Type Smart contract signature 1 65 00 Owner signature OWNER_1_ADDRESS signature 65 130 969308e2abeda61a0c9c41b3c615012f50dd7456ca76ea39a18e3b975abeb67f275b07810dd59fc928f3f9103e52557c1578c7c5c171ffc983afa5306466b1261f 2/3 Safe signer Safe Address 32 162 000000000000000000000000f75D61D6C27a7CC5788E633c1FC130f0F4a62D33 Data position for 2/3 Verifier 165 hex = Signature data for 2/3 Safe start at byte 357 32 194 0000000000000000000000000000000000000000000000000000000000000165 Signature Type Smart contract signature 1 195 00 Owner signature OWNER_2_ADDRESS signature 65 260 4d63c79cf9d743782bc31ad58c1a316020b39839ab164caee7ecac9829f685cc44ec0d066a5dfe646b2ffeeb37575df131daf9c96ced41b8c7c4aea8dc5461801c 1/1 Safe Signature Length Start of the 1/1 Safe Signature. 41 hex = 65 bytes 32 292 0000000000000000000000000000000000000000000000000000000000000041 Signature OWNER_3_ADDRESS signature 65 357 5edb6ffe67dd935d93d07c634970944ba0b096f767b92018ad635e8b28effeea5a1e512f1ad6f886690e0e30a3fae2c8c61d3f83d24d43276acdb3254b92ea5b1f 2/3 Safe Signature length Start of the 2/3 Safe Signature. 82 hex = 130 bytes 32 389 0000000000000000000000000000000000000000000000000000000000000082 Signature OWNER_4_ADDRESS and OWNER_5_ADDRESS concatenated signatures 130 519 023d1746ed548e90f387a6b8ddba26e6b80a78d5bfbc36e5bfcbfd63e136f8071db6e91c037fa36bde72159138bbb74fc359b35eb515e276a7c0547d5eaa042520d3e6565e5590641db447277243cf24711dce533cfcaaf3a64415dcb9fa309fbf2de1ae4709c6450752acc0d45e01b67b55379bdf4e3dc32b2d89ad0a60c231d61f Signatures Messages Was this page helpful? Report issue",
    "title": "Transaction signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Transaction signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a transaction",
      "Sign the transaction",
      "ECDSA signature",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Propose the transaction",
      "Confirm the transaction",
      "Execute the transaction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages#chunk-0",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages",
    "chunk_index": 0,
    "total_chunks": 5,
    "text": "SDK Protocol Kit Guides Signatures Messages Message signatures Using the Protocol Kit, this guide explains how to generate and sign messages from a Safe account, including plain string messages and EIP-712 JSON messages. ℹ️ Before starting, check this guide's setup . Prerequisites Node.js and npm (opens in a new tab) Steps Install dependencies _ 10 yarn install @safe-global/protocol-kit Create a message Messages can be plain strings or valid EIP-712 typed data structures. _ 10 // An example of a string message _ 10 const STRING_MESSAGE = \"I'm the owner of this Safe account\" _ 47 // An example of a typed data message _ 47 const TYPED_MESSAGE = { _ 47 types: { _ 47 EIP712Domain: [ _ 47 { name: 'name', type: 'string' }, _ 47 { name: 'version', type: 'string' }, _ 47 { name: 'chainId', type: 'uint256' }, _ 47 { name: 'verifyingContract', type: 'address' } _ 47 ], _ 47 Person: [ _ 47 { name: 'name', type: 'string' }, _ 47 { name: 'wallets', type: 'address[]' } _ 47 ], _ 47 Mail: [ _ 47 { name: 'from', type: 'Person' }, _ 47 { name: 'to', type: 'Person[]' }, _ 47 { name: 'contents', type: 'string' } _ 47 ] _ 47 }, _ 47 domain: { _ 47 name: 'Ether Mail', _ 47 version: '1', _ 47 chainId: Number(chainId), _ 47 verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC' _ 47 }, _ 47 primaryType: 'Mail', _ 47 message: { _ 47 from: { _ 47 name: 'Cow', _ 47 wallets: [ _ 47 '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826', _ 47 '0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF' _ 47 ] _ 47 }, _ 47 to: [ _ 47 { _ 47 name: 'Bob', _ 47 wallets: [ _ 47 '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB', _ 47 '0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57', _ 47 '0xB0B0b0b0b0b0B000000000000000000000000000' _ 47 ] _ 47 } _ 47 ], _ 47 contents: 'Hello, Bob!' _ 47 } _ 47 } The createMessage method in the Protocol Kit allows for creating new messages and returns an instance of the EthSafeMessage class. Here, we are passing TYPED_MESSAGE , but STRING_MESSAGE could also be passed. _ 10 let safeMessage = protocolKit.createMessage(TYPED_MESSAGE) The returned safeMessage object contains the message data ( safeMessage.data ) and a map of owner-signature pairs ( safeMessage.signatures ). The structure is similar to the EthSafeTransaction class but applied for messages instead of transactions. We use let to initialize the safeMessage variable because we will add the signatures later. _ 10 class EthSafeMessage implements SafeMessage { _ 10 data: EIP712TypedData | string _ 10 signatures: Map<string, SafeSignature> = new Map() _ 10 ... _ 10 // Other props and methods _ 10 } Sign the message Once the safeMessage object is created, we need to collect the signatures from the signers who will sign it. Following our setup , we will sign a message with SAFE_3_4_ADDRESS , the main Safe account in this guide. To do that, we first need to sign the same message with its owners: OWNER_1_ADDRESS , OWNER_2_ADDRESS , SAFE_1_1_ADDRESS , and SAFE_2_3_ADDRESS . ECDSA signatures This applies to",
    "title": "Message signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Message signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a message",
      "Sign the message",
      "ECDSA signatures",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Publish the signed message",
      "Off-chain messages",
      "Propose the message",
      "Confirm the message",
      "On-chain messages",
      "Validate the signature",
      "On-chain",
      "Off-chain"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages#chunk-1",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages",
    "chunk_index": 1,
    "total_chunks": 5,
    "text": "OWNER_1_ADDRESS and OWNER_2_ADDRESS accounts, as both are EOAs. The signMessage method takes the safeMessage together with a SigningMethod and adds the new signature to the signMessage.signatures map. Depending on the type of message, the SigningMethod can take these values: SigningMethod.ETH_SIGN SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 25 // Connect OWNER_1_ADDRESS _ 25 protocolKit = await protocolKit.connect({ _ 25 provider: RPC_URL _ 25 signer: OWNER_1_PRIVATE_KEY _ 25 }) _ 25 _ 25 // Sign the safeMessage with OWNER_1_ADDRESS _ 25 // After this, the safeMessage contains the signature from OWNER_1_ADDRESS _ 25 safeMessage = await protocolKit.signMessage( _ 25 safeMessage, _ 25 SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 25 ) _ 25 _ 25 // Connect OWNER_2_ADDRESS _ 25 protocolKit = await protocolKit.connect({ _ 25 provider: RPC_URL _ 25 signer: OWNER_2_PRIVATE_KEY _ 25 }) _ 25 _ 25 // Sign the safeMessage with OWNER_2_ADDRESS _ 25 // After this, the safeMessage contains the signature from OWNER_1_ADDRESS and OWNER_2_ADDRESS _ 25 safeMessage = await protocolKit.signMessage( _ 25 safeMessage, _ 25 SigningMethod.ETH_SIGN_TYPED_DATA_V4 _ 25 ) Smart contract signatures When signing with a Safe account, the SigningMethod will take the value SigningMethod.SAFE_SIGNATURE . 1/1 Safe account This applies to the SAFE_1_1_ADDRESS account, another owner of SAFE_3_4_ADDRESS . We need to connect the Protocol Kit to SAFE_1_1_ADDRESS and the OWNER_3_ADDRESS account (the only owner of SAFE_1_1_ADDRESS ) and sign the message. _ 27 // Create a new message object _ 27 let messageSafe1_1 = await createMessage(TYPED_MESSAGE) _ 27 _ 27 // Connect OWNER_3_ADDRESS and SAFE_1_1_ADDRESS _ 27 protocolKit = await protocolKit.connect({ _ 27 provider: RPC_URL _ 27 signer: OWNER_3_PRIVATE_KEY, _ 27 safeAddress: SAFE_1_1_ADDRESS _ 27 }) _ 27 _ 27 // Sign the messageSafe1_1 with OWNER_3_ADDRESS _ 27 // After this, the messageSafe1_1 contains the signature from OWNER_3_ADDRESS _ 27 messageSafe1_1 = await signMessage( _ 27 messageSafe1_1, _ 27 SigningMethod.SAFE_SIGNATURE, _ 27 SAFE_3_4_ADDRESS // Parent Safe address _ 27 ) _ 27 _ 27 // Build the contract signature of SAFE_1_1_ADDRESS _ 27 const signatureSafe1_1 = await buildContractSignature( _ 27 Array.from(messageSafe1_1.signatures.values()), _ 27 SAFE_1_1_ADDRESS _ 27 ) _ 27 _ 27 // Add the signatureSafe1_1 to safeMessage _ 27 // After this, the safeMessage contains the signature from OWNER_1_ADDRESS, OWNER_2_ADDRESS and SAFE_1_1_ADDRESS _ 27 safeMessage.addSignature(signatureSafe1_1) When signing with a child Safe account, we need to specify the parent Safe address to generate the signature based on the version of the contract. 2/3 Safe account This applies to the SAFE_2_3_ADDRESS account, another owner of SAFE_3_4_ADDRESS . We need to connect the Protocol Kit to SAFE_2_3_ADDRESS and the OWNER_4_ADDRESS and OWNER_5_ADDRESS accounts (owners of SAFE_2_3_ADDRESS ) and sign the message. _ 41 // Create a new message object _ 41 let messageSafe2_3 = await createMessage(TYPED_MESSAGE) _ 41 _ 41 // Connect OWNER_4_ADDRESS and SAFE_2_3_ADDRESS _ 41 protocolKit = await protocolKit.connect({ _ 41 provider: RPC_URL, _ 41 signer: OWNER_4_PRIVATE_KEY, _ 41 safeAddress: SAFE_2_3_ADDRESS _ 41 }) _ 41 _ 41 // Sign the messageSafe2_3 with OWNER_4_ADDRESS _ 41 // After this, the messageSafe2_3 contains the signature from OWNER_4_ADDRESS _ 41 messageSafe2_3 = await protocolKit.signMessage( _ 41 messageSafe2_3,",
    "title": "Message signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Message signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a message",
      "Sign the message",
      "ECDSA signatures",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Publish the signed message",
      "Off-chain messages",
      "Propose the message",
      "Confirm the message",
      "On-chain messages",
      "Validate the signature",
      "On-chain",
      "Off-chain"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages#chunk-2",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages",
    "chunk_index": 2,
    "total_chunks": 5,
    "text": "_ 41 SigningMethod.SAFE_SIGNATURE, _ 41 SAFE_3_4_ADDRESS // Parent Safe address _ 41 ) _ 41 _ 41 // Connect OWNER_5_ADDRESS _ 41 protocolKit = await protocolKit.connect({ _ 41 provider: RPC_URL, _ 41 signer: OWNER_5_PRIVATE_KEY _ 41 }) _ 41 _ 41 // Sign the messageSafe2_3 with OWNER_5_ADDRESS _ 41 // After this, the messageSafe2_3 contains the signature from OWNER_5_ADDRESS _ 41 messageSafe2_3 = await protocolKit.signMessage( _ 41 messageSafe2_3, _ 41 SigningMethod.SAFE_SIGNATURE, _ 41 SAFE_3_4_ADDRESS // Parent Safe address _ 41 ) _ 41 _ 41 // Build the contract signature of SAFE_2_3_ADDRESS _ 41 const signatureSafe2_3 = await buildContractSignature( _ 41 Array.from(messageSafe2_3.signatures.values()), _ 41 SAFE_2_3_ADDRESS _ 41 ) _ 41 _ 41 // Add the signatureSafe2_3 to safeMessage _ 41 // After this, the safeMessage contains the signature from OWNER_1_ADDRESS, OWNER_2_ADDRESS, SAFE_1_1_ADDRESS and SAFE_2_3_ADDRESS _ 41 safeMessage.addSignature(signatureSafe2_3) After following all the steps above, the safeMessage now contains all the signatures from the owners of the Safe. Publish the signed message As messages aren't stored in the blockchain, we must make them public and available to others by storing them elsewhere. Safe messages can be stored on-chain and off-chain: Off-chain : Messages are stored in the Safe Transaction Service. This is the default option and doesn't require any on-chain interaction. On-chain : Messages are stored (opens in a new tab) in the Safe contract. Safe supports signing EIP-191 (opens in a new tab) messages and EIP-712 (opens in a new tab) typed data messages all together with off-chain EIP-1271 (opens in a new tab) validation for signatures. Off-chain messages To use off-chain messages, we need to use the functionality from this guide and call the Safe Transaction Service API to store the messages and signatures. We mentioned the utility of storing messages in the contract. Off-chain messages have the same purpose, but they're stored in the Safe Transaction Service. It stores the messages and signatures in a database. It's a centralized service, but it's open-source and can be deployed by anyone. The Safe Transaction Service is used by Safe{Wallet} to store messages and signatures by default. Propose the message To store a new message, we need to call the addMessage from the API Kit, passing the Safe address, an object with the message, and a signature from one owner. _ 16 // Get the signature from OWNER_1_ADDRESS _ 16 const signatureOwner1 = safeMessage.getSignature(OWNER_1_PRIVATE_KEY) as EthSafeSignature _ 16 _ 16 // Instantiate the API Kit _ 16 // Use the chainId where you have the Safe account deployed _ 16 // How to get an Api key => http://docs.safe.global/core-api/how-to-use-api-keys _ 16 const apiKit = new SafeApiKit({ _ 16 chainId, _ 16 apiKey: 'YOUR_API_KEY' _ 16 }) _ 16 _ 16 // Propose the message _ 16 apiKit.addMessage(SAFE_3_4_ADDRESS, { _ 16 message: TYPED_MESSAGE, // or STRING_MESSAGE _ 16 signature: buildSignatureBytes([signatureOwner1]) _ 16 }) The message is now publicly available in the Safe Transaction Service with the signature of the owner who submitted it. Confirm the message To add the signatures from the remaining",
    "title": "Message signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Message signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a message",
      "Sign the message",
      "ECDSA signatures",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Publish the signed message",
      "Off-chain messages",
      "Propose the message",
      "Confirm the message",
      "On-chain messages",
      "Validate the signature",
      "On-chain",
      "Off-chain"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages#chunk-3",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages",
    "chunk_index": 3,
    "total_chunks": 5,
    "text": "owners, we need to call the addMessageSignature , passing the safeMessageHash and a signature from the owner. _ 25 // Get the safeMessageHash _ 25 const safeMessageHash = await protocolKit.getSafeMessageHash( _ 25 hashSafeMessage(TYPED_MESSAGE) // or STRING_MESSAGE _ 25 ) _ 25 _ 25 // Get the signature from OWNER_2_ADDRESS _ 25 const signatureOwner2 = safeMessage.getSignature(OWNER_2_ADDRESS) as EthSafeSignature _ 25 _ 25 // Add signature from OWNER_2_ADDRESS _ 25 await apiKit.addMessageSignature( _ 25 safeMessageHash, _ 25 buildSignatureBytes([signatureOwner2]) _ 25 ) _ 25 _ 25 // Add signature from the owner SAFE_1_1_ADDRESS _ 25 await apiKit.addMessageSignature( _ 25 safeMessageHash, _ 25 buildSignatureBytes([signatureSafe1_1]) _ 25 ) _ 25 _ 25 // Add signature from the owner SAFE_2_3_ADDRESS _ 25 await apiKit.addMessageSignature( _ 25 safeMessageHash, _ 25 buildSignatureBytes([signatureSafe2_3]) _ 25 ) At this point, the message stored in the Safe Transaction Service contains all the required signatures from the owners of the Safe. The getMessage method returns the status of a message. _ 10 const confirmedMessage = await apiKit.getMessage(safeMessageHash) Safe{Wallet} (opens in a new tab) exposes to its users the list of off-chain messages signed by a Safe account. _ 10 https://app.safe.global/transactions/messages?safe=<NETWORK_PREFIX>:<SAFE_ADDRESS> On-chain messages Storing messages on-chain is less efficient than doing it off-chain because it requires executing a transaction to store the message hash in the contract, resulting in additional gas costs. To do this on-chain, we use the SignMessageLib contract. _ 10 // Get the contract with the correct version _ 10 const signMessageLibContract = await getSignMessageLibContract({ _ 10 safeVersion: '1.4.1' _ 10 }) We need to calculate the messageHash , encode the call to the signMessage function in the SignMessageLib contract and create the transaction that will store the message hash in that contract. _ 13 const messageHash = hashSafeMessage(MESSAGE) _ 13 const txData = signMessageLibContract.encode('signMessage', [messageHash]) _ 13 _ 13 const safeTransactionData: SafeTransactionDataPartial = { _ 13 to: signMessageLibContract.address, _ 13 value: '0', _ 13 data: txData, _ 13 operation: OperationType.DelegateCall _ 13 } _ 13 _ 13 const signMessageTx = await protocolKit.createTransaction({ _ 13 transactions: [safeTransactionData] _ 13 }) Once the transaction object is instantiated, the owners must sign and execute it. _ 10 // Collect the signatures using the signTransaction method _ 10 _ 10 // Execute the transaction to store the messageHash _ 10 await protocolKit.executeTransaction(signMessageTx) Once the transaction is executed, the message hash will be stored in the contract. Validate the signature On-chain When a message is stored on-chain, the isValidSignature method in the Protocol Kit needs to be called with the parameters messageHash and 0x . The method will check the stored hashes in the Safe contract to validate the signature. _ 10 import { hashSafeMessage } from '@safe-global/protocol-kit' _ 10 _ 10 const messageHash = hashSafeMessage(MESSAGE) _ 10 _ 10 const isValid = await protocolKit.isValidSignature(messageHash, '0x') Off-chain When a message is stored off-chain, the isValidSignature method in the Protocol Kit must be called with the messageHash and the encodedSignatures parameters. The method will check the isValidSignature function defined in the CompatibilityFallbackHandler contract (opens in",
    "title": "Message signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Message signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a message",
      "Sign the message",
      "ECDSA signatures",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Publish the signed message",
      "Off-chain messages",
      "Propose the message",
      "Confirm the message",
      "On-chain messages",
      "Validate the signature",
      "On-chain",
      "Off-chain"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages#chunk-4",
    "url": "https://docs.safe.global/sdk/protocol-kit/guides/signatures/messages",
    "chunk_index": 4,
    "total_chunks": 5,
    "text": "a new tab) to validate the signature. _ 10 const encodedSignatures = safeMessage.encodedSignatures() _ 10 _ 10 const isValid = await protocolKit.isValidSignature( _ 10 messageHash, _ 10 encodedSignatures _ 10 ) Transactions Migrate to v1 Was this page helpful? Report issue",
    "title": "Message signatures – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/sdk/protocol-kit",
    "breadcrumbs": [
      {
        "text": "Protocol Kit",
        "url": "/sdk/protocol-kit"
      },
      {
        "text": "Signatures",
        "url": "/sdk/protocol-kit/guides/signatures"
      }
    ],
    "depth": 5,
    "section_titles": [
      "Message signatures",
      "Prerequisites",
      "Steps",
      "Install dependencies",
      "Create a message",
      "Sign the message",
      "ECDSA signatures",
      "Smart contract signatures",
      "1/1 Safe account",
      "2/3 Safe account",
      "Publish the signed message",
      "Off-chain messages",
      "Propose the message",
      "Confirm the message",
      "On-chain messages",
      "Validate the signature",
      "On-chain",
      "Off-chain"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/home/ai-agent-actions/introduction#chunk-0",
    "url": "https://docs.safe.global/home/ai-agent-actions/introduction",
    "chunk_index": 0,
    "total_chunks": 1,
    "text": "Home Action Guides Introduction Introduction Here you find example actions your AI agent can do. AI agent swaps on CoW Swap : The AI agent sends a swap intent to CoW Swap, which ensures the best swap rates and reduces MEV losses. AI agent swaps on Uniswap : An example of how your AI agent can trade tokens on Uniswap. Agent with spending limit AI agent swaps on CoW Swap Was this page helpful? Report issue",
    "title": "Introduction – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/home/ai-agent-actions/ai-agent-swaps-with-cow-swap",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Introduction"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/config-service-configuration/add-or-edit-chain#chunk-0",
    "url": "https://docs.safe.global/config-service-configuration/add-or-edit-chain",
    "chunk_index": 0,
    "total_chunks": 2,
    "text": "Config Service Reference Add or edit chains Add or edit chains Add (or edit) a blockchain network. Usage You can add a new chain by visiting this address: http://localhost:8000/cfg/admin/chains/chain/add/ (opens in a new tab) You can edit an existing chain by visiting this address: http://localhost:8000/cfg/admin/chains/chain/{chain index}/change/ where {chain index} is the index of the chain you want to edit. Parameters Chain Id The unique identifier for the chain. Relevance The relative importance of this chain for your project. You can use this value between 0 and 100 to sort chains in the UI. Chain name The name of the chain, in plain letters. EIP-3770 short name The short name of the chain, as defined in EIP-3770 (opens in a new tab) . This corresponds to the letters that will be prepended to all addresses on this chain. Description A brief description of the chain. Chain logo uri The chain's logo to upload. This will be displayed in the UI. L2 Whether this chain is a Layer 2 chain. Is testnet Whether this chain is a testnet. This will be indicated in the UI. Rpc authentication Whether the RPC endpoint requires authentication to access its data. Rpc uri The URI of the chain's RPC endpoint. Safe apps rpc authentication Whether the RPC endpoint dedicated to Safe Apps will require authentication. Safe Apps rpc uri The URI of the chain's RPC endpoint dedicated to Safe Apps. Public rpc authentication Whether the fallback public RPC endpoint will require authentication. Public rpc uri The URI of the chain's RPC public endpoint. Block explorer uri address template The URI template for the chain's block explorer addresses. This will be used to generate address links to the block explorer. For example: https://etherscan.io/address/{{address}} . Block explorer uri tx hash template The URI template for the chain's block explorer transaction hashes. This will be used to generate txHash links to the block explorer. For example: https://etherscan.io/tx/{{txHash}} . Block explorer uri api template The URI template for the chain's block explorer API. This will be used to fetch data from the block explorer. For example: https://api.etherscan.io/api . Beacon chain explorer uri public key template The URI template for the chain's beacon chain explorer public keys. This will be used to generate public key links to the beacon chain explorer. For example: https://beaconscan.com/validator/{{publicKey}} . Currency name The name of the chain's native currency. Currency symbol The symbol of the chain's native currency. Currency decimals The number of decimals of the chain's native currency. Currency logo uri The chain's native currency logo to upload. This will be displayed in the UI. Transaction service uri The URI of the chain's Transaction Service . This will be used to fetch transaction data from the chain. You will need to deploy one Transaction Service per chain, as well as txs-db , amqp and celery instances. Vpc transaction service uri The URI of the chain's VPC Transaction Service. If you are using a Virtual Private Cloud (VPC) to run your Transaction Service, you can set",
    "title": "Add or edit chains – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/config-service-configuration/edit-user",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Add or edit chains",
      "Usage",
      "Parameters",
      "Chain Id",
      "Relevance",
      "Chain name",
      "EIP-3770 short name",
      "Description",
      "Chain logo uri",
      "L2",
      "Is testnet",
      "Rpc authentication",
      "Rpc uri",
      "Safe apps rpc authentication",
      "Safe Apps rpc uri",
      "Public rpc authentication",
      "Public rpc uri",
      "Block explorer uri address template",
      "Block explorer uri tx hash template",
      "Block explorer uri api template",
      "Beacon chain explorer uri public key template",
      "Currency name",
      "Currency symbol",
      "Currency decimals",
      "Currency logo uri",
      "Transaction service uri",
      "Vpc transaction service uri",
      "Theme text color",
      "Theme background color",
      "Ens registry address",
      "Recommended mastercopy version",
      "Prices provider native coin",
      "Prices provider chain name",
      "Balances provider chain name",
      "Balances provider enabled",
      "Hidden",
      "Safe singleton address",
      "Safe proxy factory address",
      "MultiSend address",
      "MultiSend call only address",
      "Fallback handler address",
      "Sign message lib address",
      "Create call address",
      "Simulate tx accessor address",
      "Safe web authn signer factory address",
      "Features enabled on this chain",
      "Gas prices set for this chain",
      "Wallets enabled for this chain"
    ],
    "has_code": false,
    "code_languages": []
  },
  {
    "id": "https://docs.safe.global/config-service-configuration/add-or-edit-chain#chunk-1",
    "url": "https://docs.safe.global/config-service-configuration/add-or-edit-chain",
    "chunk_index": 1,
    "total_chunks": 2,
    "text": "this URI to fetch transaction data from the chain. Theme text color The hexadecimal chain color to display the text in the UI. Theme background color The hexadecimal chain color to display the background in the UI. Ens registry address The address of the chain's ENS registry. Recommended mastercopy version The recommended version of the chain's mastercopy. This will be used to display a warning if the mastercopy is outdated. For example: 1.4.1 . Prices provider native coin The native coin used by the chain's price provider. Prices provider chain name The name of the chain on CoinGecko. Balances provider chain name The name of the chain on Zerion. (Not implemented.) Balances provider enabled Whether the chain's balances provider is enabled. Hidden Whether the chain is hidden in the UI. Safe singleton address The address of the chain's Safe singleton. Safe proxy factory address The address of the chain's Safe ProxyFactory. MultiSend address The address of the chain's MultiSend contract. MultiSend call only address The address of the chain's MultiSendCallOnly contract. Fallback handler address The address of the chain's FallbackHandler contract. Sign message lib address The address of the chain's SignMessageLib contract. Create call address The address of the chain's CreateCall contract. Simulate tx accessor address The address of the chain's SimulateTxAccessor contract. Safe web authn signer factory address The address of the chain's SafeWebAuthnSignerFactory contract. Features enabled on this chain A list of features enabled on this chain. You can select as many as you want by clicking + Add another Feature-chain relationship . Gas prices set for this chain A list of gas prices set for this chain. You can select as many as you want by clicking + Add another Gas price . Wallets enabled for this chain A list of wallets enabled for this chain. You can select as many as you want by clicking + Add another Wallet-chain relationship . Edit users Add or edit features Was this page helpful? Report issue",
    "title": "Add or edit chains – Safe Docs",
    "description": "Safe{Core} is an open-source and modular account abstraction stack. Learn about its features and how to use it.",
    "parent_url": "https://docs.safe.global/config-service-configuration/edit-user",
    "breadcrumbs": [],
    "depth": 5,
    "section_titles": [
      "Add or edit chains",
      "Usage",
      "Parameters",
      "Chain Id",
      "Relevance",
      "Chain name",
      "EIP-3770 short name",
      "Description",
      "Chain logo uri",
      "L2",
      "Is testnet",
      "Rpc authentication",
      "Rpc uri",
      "Safe apps rpc authentication",
      "Safe Apps rpc uri",
      "Public rpc authentication",
      "Public rpc uri",
      "Block explorer uri address template",
      "Block explorer uri tx hash template",
      "Block explorer uri api template",
      "Beacon chain explorer uri public key template",
      "Currency name",
      "Currency symbol",
      "Currency decimals",
      "Currency logo uri",
      "Transaction service uri",
      "Vpc transaction service uri",
      "Theme text color",
      "Theme background color",
      "Ens registry address",
      "Recommended mastercopy version",
      "Prices provider native coin",
      "Prices provider chain name",
      "Balances provider chain name",
      "Balances provider enabled",
      "Hidden",
      "Safe singleton address",
      "Safe proxy factory address",
      "MultiSend address",
      "MultiSend call only address",
      "Fallback handler address",
      "Sign message lib address",
      "Create call address",
      "Simulate tx accessor address",
      "Safe web authn signer factory address",
      "Features enabled on this chain",
      "Gas prices set for this chain",
      "Wallets enabled for this chain"
    ],
    "has_code": false,
    "code_languages": []
  }
]