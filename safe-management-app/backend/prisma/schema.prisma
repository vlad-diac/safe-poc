generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SafeSession {
  id                    String   @id @default(uuid())
  name                  String
  safeAddress           String
  apiKey                String?  // Make optional - will use company key as fallback
  chainId               Int      // RPC URL determined by backend based on chainId
  transactionServiceUrl String
  isDefault             Boolean  @default(false)
  connectedWallet       String?  // Auto-connect this wallet when session loads
  autoReconnect         Boolean  @default(false) // Enable/disable auto-reconnect
  totalAssetValueUsd    String?  // Cached total asset value in USD
  assetBalances         Json?    // Cached token balances with prices
  lastBalanceUpdate     DateTime? // Last time balances were updated
  userId                String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  paymentLinks      PaymentLink[]
  transactions      Transaction[]
  transactionSync   TransactionSync?
  draftTransactions DraftTransaction[]
}

model PaymentLink {
  id          String       @id @default(uuid())
  sessionId   String
  safeAddress String
  safeTxHash  String?
  toAddress   String
  value       String
  description String?
  status      String       @default("pending")
  createdAt   DateTime     @default(now())
  expiresAt   DateTime?
  
  session SafeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                    String   @id @default(uuid())
  sessionId             String
  safeAddress           String
  safeTxHash            String   @unique
  txType                String?  // MULTISIG_TRANSACTION, ETHEREUM_TRANSACTION, MODULE_TRANSACTION
  executionDate         DateTime?
  submissionDate        DateTime?
  modified              DateTime?
  blockNumber           Int?
  transactionHash       String?
  safe                  String
  to                    String
  value                 String
  data                  String?
  operation             Int
  gasToken              String?
  safeTxGas             String?
  baseGas               String?
  gasPrice              String?
  refundReceiver        String?
  nonce                 Int
  executor              String?
  isExecuted            Boolean  @default(false)
  isSuccessful          Boolean?
  ethGasPrice           String?
  maxFeePerGas          String?
  maxPriorityFeePerGas  String?
  gasUsed               String?
  fee                   String?
  origin                String?
  dataDecoded           Json?
  confirmationsRequired Int?
  confirmations         Json?    // Array of confirmations with owner and signature
  trusted               Boolean  @default(false)
  proposer              String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  session SafeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([safeAddress])
  @@index([sessionId])
  @@index([isExecuted])
  @@index([executionDate])
}

model TransactionSync {
  id           String   @id @default(uuid())
  sessionId    String   @unique
  safeAddress  String
  lastSyncAt   DateTime
  lastTxHash   String?
  totalSynced  Int      @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  session SafeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model DraftTransaction {
  id              String   @id @default(uuid())
  sessionId       String
  safeAddress     String
  
  // Transaction Data
  safeTxHash      String   @unique
  transactionData String   @db.Text  // JSON: Full transaction object
  recipients      String   @db.Text  // JSON: Array of recipients
  
  // Metadata
  description     String?
  category        String?  // 'payment', 'batch', 'token-transfer'
  
  // Status Flow
  status          String   @default("draft")  // draft → proposed → executed
  
  // Signature
  senderAddress   String?
  senderSignature String?  @db.Text
  signedAt        DateTime?
  
  // Dates
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime?
  
  // Relations
  session         SafeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([status])
  @@index([safeTxHash])
}